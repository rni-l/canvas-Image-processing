webpackJsonp([0],[
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// 将对象存储在内存中\nvar oCan = document.getElementById('canvas'),\n    // 获取画布\nctx = oCan.getContext('2d'),\n    oShowImg = document.getElementById('lastImg'),\n    // 最终生成的图片\noMsg = document.querySelector('.msg'),\n    oZhezhao = document.querySelector('.zhezhao'),\n    oRevoke = document.getElementById('revoke'); // 撤销按钮  \n\n// 公共方法\nfunction showLoading(type) {\n  oZhezhao.style.display = type;\n  oMsg.style.display = type;\n}\n\nexports.default = {\n  // 对象\n  oCan: oCan,\n  ctx: ctx,\n  oShowImg: oShowImg,\n  oMsg: oMsg,\n  oZhezhao: oZhezhao,\n  oRevoke: oRevoke,\n  // 方法\n  showLoading: showLoading,\n  isDraw: false, // 能否涂鸦\n  isNewPic: true, // 是否新的图片\n  isStopPrevent: true, // 是否阻止全局默认事件\n  data: {},\n  imgData: {},\n  // 兼容写法\n  transform: function transform(obj, data) {\n    obj.style.WebkitTransform = data;\n    obj.style.transform = data;\n  }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvaW5kZXgvb3B0cy5qcz9lNWIyIl0sIm5hbWVzIjpbIm9DYW4iLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiY3R4IiwiZ2V0Q29udGV4dCIsIm9TaG93SW1nIiwib01zZyIsInF1ZXJ5U2VsZWN0b3IiLCJvWmhlemhhbyIsIm9SZXZva2UiLCJzaG93TG9hZGluZyIsInR5cGUiLCJzdHlsZSIsImRpc3BsYXkiLCJpc0RyYXciLCJpc05ld1BpYyIsImlzU3RvcFByZXZlbnQiLCJkYXRhIiwiaW1nRGF0YSIsInRyYW5zZm9ybSIsIm9iaiIsIldlYmtpdFRyYW5zZm9ybSJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBLElBQU1BLE9BQU9DLFNBQVNDLGNBQVQsQ0FBd0IsUUFBeEIsQ0FBYjtBQUFBLElBQWdEO0FBQzlDQyxNQUFNSCxLQUFLSSxVQUFMLENBQWdCLElBQWhCLENBRFI7QUFBQSxJQUVFQyxXQUFXSixTQUFTQyxjQUFULENBQXdCLFNBQXhCLENBRmI7QUFBQSxJQUVpRDtBQUMvQ0ksT0FBT0wsU0FBU00sYUFBVCxDQUF1QixNQUF2QixDQUhUO0FBQUEsSUFJRUMsV0FBV1AsU0FBU00sYUFBVCxDQUF1QixVQUF2QixDQUpiO0FBQUEsSUFLRUUsVUFBVVIsU0FBU0MsY0FBVCxDQUF3QixRQUF4QixDQUxaLEMsQ0FLOEM7O0FBRTlDO0FBQ0EsU0FBU1EsV0FBVCxDQUFxQkMsSUFBckIsRUFBMkI7QUFDekJILFdBQVNJLEtBQVQsQ0FBZUMsT0FBZixHQUF5QkYsSUFBekI7QUFDQUwsT0FBS00sS0FBTCxDQUFXQyxPQUFYLEdBQXFCRixJQUFyQjtBQUNEOztrQkFFYztBQUNiO0FBQ0FYLFFBQU1BLElBRk87QUFHYkcsT0FBS0EsR0FIUTtBQUliRSxZQUFVQSxRQUpHO0FBS2JDLFFBQU1BLElBTE87QUFNYkUsWUFBVUEsUUFORztBQU9iQyxXQUFTQSxPQVBJO0FBUWI7QUFDQUMsZUFBYUEsV0FUQTtBQVViSSxVQUFRLEtBVkssRUFVRTtBQUNmQyxZQUFVLElBWEcsRUFXRztBQUNoQkMsaUJBQWUsSUFaRixFQVlRO0FBQ3JCQyxRQUFNLEVBYk87QUFjYkMsV0FBUyxFQWRJO0FBZWI7QUFDQUMsYUFBVyxtQkFBQ0MsR0FBRCxFQUFNSCxJQUFOLEVBQWU7QUFDeEJHLFFBQUlSLEtBQUosQ0FBVVMsZUFBVixHQUE0QkosSUFBNUI7QUFDQUcsUUFBSVIsS0FBSixDQUFVTyxTQUFWLEdBQXNCRixJQUF0QjtBQUNEO0FBbkJZLEMiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIOWwhuWvueixoeWtmOWCqOWcqOWGheWtmOS4rVxyXG5jb25zdCBvQ2FuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NhbnZhcycpLCAvLyDojrflj5bnlLvluINcclxuICBjdHggPSBvQ2FuLmdldENvbnRleHQoJzJkJyksXHJcbiAgb1Nob3dJbWcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGFzdEltZycpLCAvLyDmnIDnu4jnlJ/miJDnmoTlm77niYdcclxuICBvTXNnID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1zZycpLFxyXG4gIG9aaGV6aGFvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnpoZXpoYW8nKSxcclxuICBvUmV2b2tlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jldm9rZScpIC8vIOaSpOmUgOaMiemSriAgXHJcblxyXG4vLyDlhazlhbHmlrnms5VcclxuZnVuY3Rpb24gc2hvd0xvYWRpbmcodHlwZSkge1xyXG4gIG9aaGV6aGFvLnN0eWxlLmRpc3BsYXkgPSB0eXBlXHJcbiAgb01zZy5zdHlsZS5kaXNwbGF5ID0gdHlwZVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgLy8g5a+56LGhXHJcbiAgb0Nhbjogb0NhbixcclxuICBjdHg6IGN0eCxcclxuICBvU2hvd0ltZzogb1Nob3dJbWcsXHJcbiAgb01zZzogb01zZyxcclxuICBvWmhlemhhbzogb1poZXpoYW8sXHJcbiAgb1Jldm9rZTogb1Jldm9rZSxcclxuICAvLyDmlrnms5VcclxuICBzaG93TG9hZGluZzogc2hvd0xvYWRpbmcsXHJcbiAgaXNEcmF3OiBmYWxzZSwgLy8g6IO95ZCm5raC6bimXHJcbiAgaXNOZXdQaWM6IHRydWUsIC8vIOaYr+WQpuaWsOeahOWbvueJh1xyXG4gIGlzU3RvcFByZXZlbnQ6IHRydWUsIC8vIOaYr+WQpumYu+atouWFqOWxgOm7mOiupOS6i+S7tlxyXG4gIGRhdGE6IHt9LFxyXG4gIGltZ0RhdGE6IHt9LFxyXG4gIC8vIOWFvOWuueWGmeazlVxyXG4gIHRyYW5zZm9ybTogKG9iaiwgZGF0YSkgPT4ge1xyXG4gICAgb2JqLnN0eWxlLldlYmtpdFRyYW5zZm9ybSA9IGRhdGFcclxuICAgIG9iai5zdHlsZS50cmFuc2Zvcm0gPSBkYXRhXHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy9pbmRleC9vcHRzLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _opts = __webpack_require__(0);\n\nvar _opts2 = _interopRequireDefault(_opts);\n\nvar _lineData = __webpack_require__(4);\n\nvar _lineData2 = _interopRequireDefault(_lineData);\n\nvar _filter = __webpack_require__(2);\n\nvar _filter2 = _interopRequireDefault(_filter);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// 画布功能\nvar arrX = [],\n    // 坐标x\narrY = [],\n    // 坐标y\narrN = [],\n    // 笔触点击，移动，放开总次数\narrColor = [],\n    // 线条颜色\narrWidth = [],\n    // 线条粗细\narrNumber = [],\n    // 笔触点击次数\nc_left = _opts2.default.oCan.offsetLeft,\n    // canvas的Left,top\nc_top = _opts2.default.oCan.offsetTop,\n    oCan = _opts2.default.oCan,\n    ctx = _opts2.default.ctx;\nvar lastX = -1,\n    lastY = -1;\n\nfunction addData(data) {\n  arrX.push(data.x);\n  arrY.push(data.y);\n  arrN.push(data.n);\n  arrColor.push(data.color);\n  arrWidth.push(data.width);\n}\n\n// 绘制\nfunction draw(len) {\n  ctx.beginPath();\n  ctx.lineCap = 'round';\n  ctx.lineJoin = 'round';\n\n  for (var i = 1; i < len; i++) {\n    // 线条颜色，粗细\n    ctx.lineWidth = arrWidth[i];\n    ctx.strokeStyle = arrColor[i];\n    lastX = arrX[i];\n    lastY = arrY[i];\n    if (arrN[i] === 2) {\n      // 开头，保存当前的桟\n      ctx.beginPath();\n      ctx.save();\n      ctx.moveTo(lastX, lastY);\n    } else {\n      ctx.lineTo(lastX, lastY);\n    }\n    // 绘制线条，释放桟，关闭路线\n    ctx.stroke();\n    ctx.restore();\n  }\n  ctx.closePath();\n}\n\n// 重新绘制笔触\nfunction cleanDraw() {\n  draw(arrN.length);\n}\n\n// 移动\nfunction move(e) {\n  e.preventDefault();\n  var t = e.touches[0];\n  // 将计算后的xy位置，添加到数组里\n  arrX.push(Math.floor(t.pageX - c_left));\n  arrY.push(Math.floor(t.pageY - c_top));\n  arrN.push(1);\n  arrWidth.push(_lineData2.default.w);\n  arrColor.push(_lineData2.default.color);\n  // 绘制\n  draw(arrX.length);\n}\n// 点击\nfunction down(e) {\n  ctx.clearRect(0, 0, _opts2.default.canvasW, _opts2.default.cavasH);\n  if (!_opts2.default.isDraw) {\n    return false;\n  }\n  // 重新上传图片，笔触清零\n  if (_opts2.default.isNewPic) {\n    _opts2.default.isNewPic = false;\n    // 笔触记录清零\n    arrX.length = 0;\n    arrY.length = 0;\n    arrN.length = 0;\n    arrColor.length = 0;\n    arrWidth.length = 0;\n  }\n  var t = e.touches[0];\n  // 添加到数组，存储\n  addData({\n    x: t.pageX - c_left,\n    y: t.pageY - c_top,\n    n: 2,\n    color: _lineData2.default.color,\n    width: _lineData2.default.w\n  });\n  // 记录操作\n  arrNumber.push(arrN.length);\n  oCan.addEventListener('touchmove', move, false);\n}\n// 放开\nfunction up(e) {\n  if (!_opts2.default.isDraw) {\n    return false;\n  }\n  var t = e.changedTouches[0];\n  // 添加到数组，存储\n  addData({\n    x: t.pageX - c_left,\n    y: t.pageY - c_top,\n    n: 1,\n    color: _lineData2.default.color,\n    width: _lineData2.default.w\n  });\n  // 取消事件\n  oCan.removeEventListener('touchmove', move, false);\n}\n\n// 撤销\nfunction revoke() {\n  // 如果路线少于0，不会绘制\n  if (!arrNumber[arrNumber.length - 1]) {\n    return false;\n  }\n  // 获取最后一次笔触的次数\n  var len = arrNumber[arrNumber.length - 1];\n  arrNumber.pop();\n  // 清除对应数量的操作\n  arrX.length = len;\n  arrY.length = len;\n  arrN.length = len;\n  arrColor.length = len;\n  arrWidth.length = len;\n  ctx.clearRect(0, 0, _opts2.default.canvasW, _opts2.default.canvasH);\n  var data = _opts2.default.data;\n  /*\r\n    重绘流程：\r\n    重新绘制图片 => 渲染滤镜 => 渲染笔触\r\n  */\n  ctx.drawImage(data.img, data.imgPos.x, data.imgPos.y, data.imgPos.w, data.imgPos.h);\n  (0, _filter2.default)();\n  draw(len);\n}\n\n// 添加撤销事件撤销事件\n_opts2.default.oRevoke.addEventListener('touchstart', revoke);\n\noCan.addEventListener('touchstart', down, false);\noCan.addEventListener('touchend', up, false);\n\n// 清除笔画功能\nexports.default = cleanDraw;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvaW5kZXgvZHJhdy5qcz9iZTk4Il0sIm5hbWVzIjpbImFyclgiLCJhcnJZIiwiYXJyTiIsImFyckNvbG9yIiwiYXJyV2lkdGgiLCJhcnJOdW1iZXIiLCJjX2xlZnQiLCJvQ2FuIiwib2Zmc2V0TGVmdCIsImNfdG9wIiwib2Zmc2V0VG9wIiwiY3R4IiwibGFzdFgiLCJsYXN0WSIsImFkZERhdGEiLCJkYXRhIiwicHVzaCIsIngiLCJ5IiwibiIsImNvbG9yIiwid2lkdGgiLCJkcmF3IiwibGVuIiwiYmVnaW5QYXRoIiwibGluZUNhcCIsImxpbmVKb2luIiwiaSIsImxpbmVXaWR0aCIsInN0cm9rZVN0eWxlIiwic2F2ZSIsIm1vdmVUbyIsImxpbmVUbyIsInN0cm9rZSIsInJlc3RvcmUiLCJjbG9zZVBhdGgiLCJjbGVhbkRyYXciLCJsZW5ndGgiLCJtb3ZlIiwiZSIsInByZXZlbnREZWZhdWx0IiwidCIsInRvdWNoZXMiLCJNYXRoIiwiZmxvb3IiLCJwYWdlWCIsInBhZ2VZIiwidyIsImRvd24iLCJjbGVhclJlY3QiLCJjYW52YXNXIiwiY2F2YXNIIiwiaXNEcmF3IiwiaXNOZXdQaWMiLCJhZGRFdmVudExpc3RlbmVyIiwidXAiLCJjaGFuZ2VkVG91Y2hlcyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZXZva2UiLCJwb3AiLCJjYW52YXNIIiwiZHJhd0ltYWdlIiwiaW1nIiwiaW1nUG9zIiwiaCIsIm9SZXZva2UiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBRUE7QUFDQSxJQUFNQSxPQUFPLEVBQWI7QUFBQSxJQUFpQjtBQUNmQyxPQUFPLEVBRFQ7QUFBQSxJQUNhO0FBQ1hDLE9BQU8sRUFGVDtBQUFBLElBRWE7QUFDWEMsV0FBVyxFQUhiO0FBQUEsSUFHaUI7QUFDZkMsV0FBVyxFQUpiO0FBQUEsSUFJaUI7QUFDZkMsWUFBWSxFQUxkO0FBQUEsSUFLa0I7QUFDaEJDLFNBQVMsZUFB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QUFkO0FBQ0F0QixPQUFLb0MsTUFBTCxHQUFjZCxHQUFkO0FBQ0FyQixPQUFLbUMsTUFBTCxHQUFjZCxHQUFkO0FBQ0FwQixXQUFTa0MsTUFBVCxHQUFrQmQsR0FBbEI7QUFDQW5CLFdBQVNpQyxNQUFULEdBQWtCZCxHQUFsQjtBQUNBWixNQUFJc0MsU0FBSixDQUFjLENBQWQsRUFBaUIsQ0FBakIsRUFBb0IsZUFBS0MsT0FBekIsRUFBa0MsZUFBS1UsT0FBdkM7QUFDQSxNQUFNN0MsT0FBTyxlQUFLQSxJQUFsQjtBQUNBOzs7O0FBSUFKLE1BQUlrRCxTQUFKLENBQWM5QyxLQUFLK0MsR0FBbkIsRUFBd0IvQyxLQUFLZ0QsTUFBTCxDQUFZOUMsQ0FBcEMsRUFBdUNGLEtBQUtnRCxNQUFMLENBQVk3QyxDQUFuRCxFQUFzREgsS0FBS2dELE1BQUwsQ0FBWWhCLENBQWxFLEVBQXFFaEMsS0FBS2dELE1BQUwsQ0FBWUMsQ0FBakY7QUFDQTtBQUNBMUMsT0FBS0MsR0FBTDtBQUNEOztBQUVEO0FBQ0EsZUFBSzBDLE9BQUwsQ0FBYVgsZ0JBQWIsQ0FBOEIsWUFBOUIsRUFBNENJLE1BQTVDOztBQUVBbkQsS0FBSytDLGdCQUFMLENBQXNCLFlBQXRCLEVBQW9DTixJQUFwQyxFQUEwQyxLQUExQztBQUNBekMsS0FBSytDLGdCQUFMLENBQXNCLFVBQXRCLEVBQWtDQyxFQUFsQyxFQUFzQyxLQUF0Qzs7QUFFQTtrQkFDZW5CLFMiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBvcHRzIGZyb20gJy4vb3B0cydcclxuaW1wb3J0IGxpbmVEYXRhIGZyb20gJy4vbGluZURhdGEnXHJcbmltcG9ydCBzZXRGaWx0ZXIgZnJvbSAnLi9maWx0ZXInXHJcblxyXG4vLyDnlLvluIPlip/og71cclxuY29uc3QgYXJyWCA9IFtdLCAvLyDlnZDmoId4XHJcbiAgYXJyWSA9IFtdLCAvLyDlnZDmoId5XHJcbiAgYXJyTiA9IFtdLCAvLyDnrJTop6bngrnlh7vvvIznp7vliqjvvIzmlL7lvIDmgLvmrKHmlbBcclxuICBhcnJDb2xvciA9IFtdLCAvLyDnur/mnaHpopzoibJcclxuICBhcnJXaWR0aCA9IFtdLCAvLyDnur/mnaHnspfnu4ZcclxuICBhcnJOdW1iZXIgPSBbXSwgLy8g56yU6Kem54K55Ye75qyh5pWwXHJcbiAgY19sZWZ0ID0gb3B0cy5vQ2FuLm9mZnNldExlZnQsIC8vIGNhbnZhc+eahExlZnQsdG9wXHJcbiAgY190b3AgPSBvcHRzLm9DYW4ub2Zmc2V0VG9wLFxyXG4gIG9DYW4gPSBvcHRzLm9DYW4sXHJcbiAgY3R4ID0gb3B0cy5jdHhcclxubGV0IGxhc3RYID0gLTEsXHJcbiAgbGFzdFkgPSAtMVxyXG5cclxuZnVuY3Rpb24gYWRkRGF0YShkYXRhKSB7XHJcbiAgYXJyWC5wdXNoKGRhdGEueClcclxuICBhcnJZLnB1c2goZGF0YS55KVxyXG4gIGFyck4ucHVzaChkYXRhLm4pXHJcbiAgYXJyQ29sb3IucHVzaChkYXRhLmNvbG9yKVxyXG4gIGFycldpZHRoLnB1c2goZGF0YS53aWR0aClcclxufVxyXG5cclxuLy8g57uY5Yi2XHJcbmZ1bmN0aW9uIGRyYXcobGVuKSB7XHJcbiAgY3R4LmJlZ2luUGF0aCgpXHJcbiAgY3R4LmxpbmVDYXAgPSAncm91bmQnXHJcbiAgY3R4LmxpbmVKb2luID0gJ3JvdW5kJ1xyXG5cclxuICBmb3IgKGxldCBpID0gMTsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAvLyDnur/mnaHpopzoibLvvIznspfnu4ZcclxuICAgIGN0eC5saW5lV2lkdGggPSBhcnJXaWR0aFtpXVxyXG4gICAgY3R4LnN0cm9rZVN0eWxlID0gYXJyQ29sb3JbaV1cclxuICAgIGxhc3RYID0gYXJyWFtpXVxyXG4gICAgbGFzdFkgPSBhcnJZW2ldXHJcbiAgICBpZiAoYXJyTltpXSA9PT0gMikge1xyXG4gICAgICAvLyDlvIDlpLTvvIzkv53lrZjlvZPliY3nmoTmoZ9cclxuICAgICAgY3R4LmJlZ2luUGF0aCgpXHJcbiAgICAgIGN0eC5zYXZlKClcclxuICAgICAgY3R4Lm1vdmVUbyhsYXN0WCwgbGFzdFkpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjdHgubGluZVRvKGxhc3RYLCBsYXN0WSlcclxuICAgIH1cclxuICAgIC8vIOe7mOWItue6v+adoe+8jOmHiuaUvuahn++8jOWFs+mXrei3r+e6v1xyXG4gICAgY3R4LnN0cm9rZSgpXHJcbiAgICBjdHgucmVzdG9yZSgpXHJcbiAgfVxyXG4gIGN0eC5jbG9zZVBhdGgoKVxyXG59XHJcblxyXG4vLyDph43mlrDnu5jliLbnrJTop6ZcclxuZnVuY3Rpb24gY2xlYW5EcmF3KCkge1xyXG4gIGRyYXcoYXJyTi5sZW5ndGgpXHJcbn1cclxuXHJcbi8vIOenu+WKqFxyXG5mdW5jdGlvbiBtb3ZlKGUpIHtcclxuICBlLnByZXZlbnREZWZhdWx0KClcclxuICBjb25zdCB0ID0gZS50b3VjaGVzWzBdXHJcbiAgLy8g5bCG6K6h566X5ZCO55qEeHnkvY3nva7vvIzmt7vliqDliLDmlbDnu4Tph4xcclxuICBhcnJYLnB1c2goTWF0aC5mbG9vcih0LnBhZ2VYIC0gY19sZWZ0KSlcclxuICBhcnJZLnB1c2goTWF0aC5mbG9vcih0LnBhZ2VZIC0gY190b3ApKVxyXG4gIGFyck4ucHVzaCgxKVxyXG4gIGFycldpZHRoLnB1c2gobGluZURhdGEudylcclxuICBhcnJDb2xvci5wdXNoKGxpbmVEYXRhLmNvbG9yKVxyXG4gIC8vIOe7mOWItlxyXG4gIGRyYXcoYXJyWC5sZW5ndGgpXHJcbn1cclxuLy8g54K55Ye7XHJcbmZ1bmN0aW9uIGRvd24oZSkge1xyXG4gIGN0eC5jbGVhclJlY3QoMCwgMCwgb3B0cy5jYW52YXNXLCBvcHRzLmNhdmFzSClcclxuICBpZiAoIW9wdHMuaXNEcmF3KSB7XHJcbiAgICByZXR1cm4gZmFsc2VcclxuICB9XHJcbiAgLy8g6YeN5paw5LiK5Lyg5Zu+54mH77yM56yU6Kem5riF6Zu2XHJcbiAgaWYgKG9wdHMuaXNOZXdQaWMpIHtcclxuICAgIG9wdHMuaXNOZXdQaWMgPSBmYWxzZVxyXG4gICAgLy8g56yU6Kem6K6w5b2V5riF6Zu2XHJcbiAgICBhcnJYLmxlbmd0aCA9IDBcclxuICAgIGFyclkubGVuZ3RoID0gMFxyXG4gICAgYXJyTi5sZW5ndGggPSAwXHJcbiAgICBhcnJDb2xvci5sZW5ndGggPSAwXHJcbiAgICBhcnJXaWR0aC5sZW5ndGggPSAwXHJcbiAgfVxyXG4gIGNvbnN0IHQgPSBlLnRvdWNoZXNbMF1cclxuICAvLyDmt7vliqDliLDmlbDnu4TvvIzlrZjlgqhcclxuICBhZGREYXRhKHtcclxuICAgIHg6IHQucGFnZVggLSBjX2xlZnQsXHJcbiAgICB5OiB0LnBhZ2VZIC0gY190b3AsXHJcbiAgICBuOiAyLFxyXG4gICAgY29sb3I6IGxpbmVEYXRhLmNvbG9yLFxyXG4gICAgd2lkdGg6IGxpbmVEYXRhLndcclxuICB9KVxyXG4gIC8vIOiusOW9leaTjeS9nFxyXG4gIGFyck51bWJlci5wdXNoKGFyck4ubGVuZ3RoKVxyXG4gIG9DYW4uYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgbW92ZSwgZmFsc2UpXHJcbn1cclxuLy8g5pS+5byAXHJcbmZ1bmN0aW9uIHVwKGUpIHtcclxuICBpZiAoIW9wdHMuaXNEcmF3KSB7XHJcbiAgICByZXR1cm4gZmFsc2VcclxuICB9XHJcbiAgY29uc3QgdCA9IGUuY2hhbmdlZFRvdWNoZXNbMF1cclxuICAvLyDmt7vliqDliLDmlbDnu4TvvIzlrZjlgqhcclxuICBhZGREYXRhKHtcclxuICAgIHg6IHQucGFnZVggLSBjX2xlZnQsXHJcbiAgICB5OiB0LnBhZ2VZIC0gY190b3AsXHJcbiAgICBuOiAxLFxyXG4gICAgY29sb3I6IGxpbmVEYXRhLmNvbG9yLFxyXG4gICAgd2lkdGg6IGxpbmVEYXRhLndcclxuICB9KVxyXG4gIC8vIOWPlua2iOS6i+S7tlxyXG4gIG9DYW4ucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgbW92ZSwgZmFsc2UpXHJcbn1cclxuXHJcbi8vIOaSpOmUgFxyXG5mdW5jdGlvbiByZXZva2UoKSB7XHJcbiAgLy8g5aaC5p6c6Lev57q/5bCR5LqOMO+8jOS4jeS8mue7mOWItlxyXG4gIGlmICghYXJyTnVtYmVyW2Fyck51bWJlci5sZW5ndGggLSAxXSkge1xyXG4gICAgcmV0dXJuIGZhbHNlXHJcbiAgfVxyXG4gIC8vIOiOt+WPluacgOWQjuS4gOasoeeslOinpueahOasoeaVsFxyXG4gIGNvbnN0IGxlbiA9IGFyck51bWJlclthcnJOdW1iZXIubGVuZ3RoIC0gMV1cclxuICBhcnJOdW1iZXIucG9wKClcclxuICAvLyDmuIXpmaTlr7nlupTmlbDph4/nmoTmk43kvZxcclxuICBhcnJYLmxlbmd0aCA9IGxlblxyXG4gIGFyclkubGVuZ3RoID0gbGVuXHJcbiAgYXJyTi5sZW5ndGggPSBsZW5cclxuICBhcnJDb2xvci5sZW5ndGggPSBsZW5cclxuICBhcnJXaWR0aC5sZW5ndGggPSBsZW5cclxuICBjdHguY2xlYXJSZWN0KDAsIDAsIG9wdHMuY2FudmFzVywgb3B0cy5jYW52YXNIKVxyXG4gIGNvbnN0IGRhdGEgPSBvcHRzLmRhdGFcclxuICAvKlxyXG4gICAg6YeN57uY5rWB56iL77yaXHJcbiAgICDph43mlrDnu5jliLblm77niYcgPT4g5riy5p+T5ruk6ZWcID0+IOa4suafk+eslOinplxyXG4gICovXHJcbiAgY3R4LmRyYXdJbWFnZShkYXRhLmltZywgZGF0YS5pbWdQb3MueCwgZGF0YS5pbWdQb3MueSwgZGF0YS5pbWdQb3MudywgZGF0YS5pbWdQb3MuaClcclxuICBzZXRGaWx0ZXIoKVxyXG4gIGRyYXcobGVuKVxyXG59XHJcblxyXG4vLyDmt7vliqDmkqTplIDkuovku7bmkqTplIDkuovku7Zcclxub3B0cy5vUmV2b2tlLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCByZXZva2UpXHJcblxyXG5vQ2FuLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBkb3duLCBmYWxzZSlcclxub0Nhbi5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHVwLCBmYWxzZSlcclxuXHJcbi8vIOa4hemZpOeslOeUu+WKn+iDvVxyXG5leHBvcnQgZGVmYXVsdCBjbGVhbkRyYXdcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL2luZGV4L2RyYXcuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _opts = __webpack_require__(0);\n\nvar _opts2 = _interopRequireDefault(_opts);\n\nvar _draw = __webpack_require__(1);\n\nvar _draw2 = _interopRequireDefault(_draw);\n\nvar _imagefilters = __webpack_require__(11);\n\nvar _imagefilters2 = _interopRequireDefault(_imagefilters);\n\nvar _filterData = __webpack_require__(12);\n\nvar _filterData2 = _interopRequireDefault(_filterData);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n// 缓存滤镜信息数据\nvar filterData = {\n  filter: []\n};\nvar oFilterBox = document.getElementById('filterBox'),\n    // 滤镜盒子\noFilterSelect = document.getElementById('filterSelect'),\n    // 选择滤镜select\noContent = document.querySelector('#filterBox .content');\nvar typeName = '',\n    // 当前滤镜效果的名字\ndataList = []; // 当前滤镜效果，子选项值\n\n/*\r\n  滤镜流程：\r\n  1. 选择好滤镜效果和滤镜的值\r\n  2. 获取渲染滤镜效果的数据\r\n  3. 再渲染到主屏\r\n  4. 绘制笔触效果\r\n*/\n\n/*\r\n *设置滤镜\r\n *参数\r\n *type: 滤镜类型名字\r\n *imageData: 图片数据\r\n*/\nfunction setFilter() {\n  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : typeName;\n  var imgData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _opts2.default.data.imageData;\n\n  if (!type) {\n    return false;\n  }\n  var ctx = _opts2.default.ctx;\n  /*\r\n   *生成滤镜效果\r\n   *参数\r\n   *type: 选择的滤镜效果名字\r\n   *[0]: 图片数据\r\n   *[1]: 滤镜效果的各个数值\r\n  */\n  var filtered = _imagefilters2.default[type].apply(_imagefilters2.default, [imgData].concat(_toConsumableArray(filterData.filter))),\n      pos = _opts2.default.data.imgPos;\n  ctx.clearRect(pos.x, pos.y, pos.w, pos.h);\n  ctx.putImageData(filtered, pos.x, pos.y);\n  filtered = null;\n  pos = null;\n}\n\n// 更新滤镜选项\nfunction updateFilter() {\n  // 清空\n  filterData.filter.length = 0;\n  // 将当前input的value值存入filter里面\n  dataList.forEach(function (v) {\n    filterData.filter.push(v.value);\n  });\n  // 设置\n  setFilter(typeName);\n  // 绘制笔触\n  (0, _draw2.default)();\n}\n\n// 将数组格式化成html\nfunction format(data) {\n  var str = '';\n  typeName = data.name;\n  data.chooseValue.forEach(function (v, i) {\n    var _range = data.range;\n    str += '<div class=\\'list\\'>\\n      <span>' + v + '</span><input type=\\'range\\' max=\\'' + _range[i].max + '\\' min=\\'' + _range[i].min + '\\' value=\\'' + _range[i].first + '\\' id=\\'' + v + '\\' /><span>' + _range[i].first + '</span>\\n    </div>';\n  });\n  return str;\n}\n\n// box change事件\noFilterBox.addEventListener('change', function (e) {\n  var tar = e.target;\n  // 事件委托，获取到当前对象\n  if (tar.getAttribute('type') === 'range') {\n    // 当range值更改后，渲染滤镜\n    updateFilter();\n  }\n}, false);\n\n// box input事件\noFilterBox.addEventListener('input', function (e) {\n  var tar = e.target;\n  // 事件委托，获取到当前对象\n  if (tar.getAttribute('type') === 'range') {\n    // 拖动滚动条时，显示当前的value值\n    tar.nextSibling.innerHTML = tar.value;\n  }\n});\n\noFilterBox.addEventListener('touchstart', function () {\n  _opts2.default.isStopPrevent = false;\n}, false);\n\n// 选择滤镜效果\noFilterSelect.addEventListener('change', function () {\n  var _this = this;\n\n  _opts2.default.isStopPrevent = true;\n  // 获取选择的滤镜效果数据\n  var arr = _filterData2.default.filterValue.filter(function (v) {\n    return v.name === _this.value;\n  });\n  if (!arr) {\n    return false;\n  }\n  // 格式化内容，生成range组件\n  oContent.innerHTML = format(arr[0]);\n  // 获取input对象数组\n  var aInput = [].concat(_toConsumableArray(document.querySelectorAll('#filterBox .content input')));\n  // 缓存input对象\n  dataList = aInput.filter(function (v) {\n    return v.nodeName === 'INPUT';\n  });\n  updateFilter();\n}, false);\n\n// 渲染当前选择好的滤镜效果\nexports.default = setFilter;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

eval("/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */\r\nmodule.exports = __webpack_amd_options__;\r\n\n/* WEBPACK VAR INJECTION */}.call(exports, {}))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vYW1kLW9wdGlvbnMuanM/NWY3MSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWxzIF9fd2VicGFja19hbWRfb3B0aW9uc19fICovXHJcbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX2FtZF9vcHRpb25zX187XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2FtZC1vcHRpb25zLmpzXG4vLyBtb2R1bGUgaWQgPSAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _opts = __webpack_require__(0);\n\nvar _opts2 = _interopRequireDefault(_opts);\n\nvar _colorPicker = __webpack_require__(10);\n\nvar _colorPicker2 = _interopRequireDefault(_colorPicker);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar output = { color: '#000000', w: 5\n  // 画布的线的，数据（）\n};document.addEventListener('DOMContentLoaded', function () {\n  var oP = document.querySelector('.rangeWrap p');\n  var oColorBtn = document.querySelector('.colorBtn'),\n      oColorBox = document.querySelector('.colorPickerbox');\n  var colorOnoff = true;\n\n  // 模拟range\n  var oRange = document.querySelector('.rangeBtn'),\n      oRangePar = document.querySelector('.rangeLine'),\n      r_opts = {\n    h: oRangePar.offsetHeight,\n    t: oRangePar.offsetTop,\n    rH: oRange.offsetHeight,\n    max: 10,\n    min: 1,\n    size: 1,\n    num: 0\n  };\n\n  function rangeMove(e) {\n    var t = e.touches[0];\n    var my = t.clientY - r_opts.t;\n    if (my <= 0) {\n      my = 0;\n    } else if (my >= r_opts.h) {\n      my = r_opts.h;\n    }\n\n    _opts2.default.transform(oRange, 'translateY(' + my + 'px)');\n    r_opts.my = my;\n    // 判断当前位置，属于几\n    var value = Math.floor(my / r_opts.num);\n    output.w = value;\n    oP.innerHTML = '宽度：' + value;\n  }\n\n  // 颜色选择器\n  var colorPicker = new _colorPicker2.default({\n    oBox: oColorBox,\n    oBtnWrap: document.querySelector('.btnWrap'),\n    oCan: document.querySelector('#colorPicker'),\n    width: 200,\n    height: 200,\n    callback: function callback(color) {\n      output.color = color;\n      oColorBtn.style.background = color;\n    }\n  });\n\n  colorPicker.init();\n\n  oColorBtn.addEventListener('touchstart', function () {\n    _opts2.default.transform(oColorBox, 'translateX(' + (colorOnoff ? 0 : -1000) + 'px)');\n    colorOnoff = !colorOnoff;\n  }, false);\n\n  oRange.addEventListener('touchstart', function (e) {\n    e.stopPropagation();\n    var t = e.touches[0];\n    r_opts.fx = t.clientX;\n    r_opts.fy = t.clientY;\n\n    r_opts.h = oRangePar.offsetHeight;\n    r_opts.t = oRangePar.offsetTop;\n    r_opts.rH = oRange.offsetHeight;\n    // 修正高度\n    r_opts.h -= r_opts.rH;\n    // 份数\n    r_opts.num = r_opts.h / r_opts.max;\n    // 添加移动事件\n    oRange.addEventListener('touchmove', rangeMove, false);\n  }, false);\n\n  oRange.addEventListener('touchend', function () {\n    // 移除移动事件\n    oRange.removeEventListener('touchmove', rangeMove, false);\n  }, false);\n}, false);\n\nexports.default = output;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvaW5kZXgvbGluZURhdGEuanM/ZjViZSJdLCJuYW1lcyI6WyJvdXRwdXQiLCJjb2xvciIsInciLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJvUCIsInF1ZXJ5U2VsZWN0b3IiLCJvQ29sb3JCdG4iLCJvQ29sb3JCb3giLCJjb2xvck9ub2ZmIiwib1JhbmdlIiwib1JhbmdlUGFyIiwicl9vcHRzIiwiaCIsIm9mZnNldEhlaWdodCIsInQiLCJvZmZzZXRUb3AiLCJySCIsIm1heCIsIm1pbiIsInNpemUiLCJudW0iLCJyYW5nZU1vdmUiLCJlIiwidG91Y2hlcyIsIm15IiwiY2xpZW50WSIsInRyYW5zZm9ybSIsInZhbHVlIiwiTWF0aCIsImZsb29yIiwiaW5uZXJIVE1MIiwiY29sb3JQaWNrZXIiLCJvQm94Iiwib0J0bldyYXAiLCJvQ2FuIiwid2lkdGgiLCJoZWlnaHQiLCJjYWxsYmFjayIsInN0eWxlIiwiYmFja2dyb3VuZCIsImluaXQiLCJzdG9wUHJvcGFnYXRpb24iLCJmeCIsImNsaWVudFgiLCJmeSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7OztBQUVBLElBQU1BLFNBQVMsRUFBRUMsT0FBTyxTQUFULEVBQW9CQyxHQUFHO0FBQ3RDO0FBRGUsQ0FBZixDQUVBQyxTQUFTQyxnQkFBVCxDQUEwQixrQkFBMUIsRUFBOEMsWUFBTTtBQUNsRCxNQUFNQyxLQUFLRixTQUFTRyxhQUFULENBQXVCLGNBQXZCLENBQVg7QUFDQSxNQUFNQyxZQUFZSixTQUFTRyxhQUFULENBQXVCLFdBQXZCLENBQWxCO0FBQUEsTUFDRUUsWUFBWUwsU0FBU0csYUFBVCxDQUF1QixpQkFBdkIsQ0FEZDtBQUVBLE1BQUlHLGFBQWEsSUFBakI7O0FBRUE7QUFDQSxNQUFNQyxTQUFTUCxTQUFTRyxhQUFULENBQXVCLFdBQXZCLENBQWY7QUFBQSxNQUNFSyxZQUFZUixTQUFTRyxh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ImltcG9ydCBvcHRzIGZyb20gJy4vb3B0cydcclxuaW1wb3J0IENvbG9yUGlja2VyIGZyb20gJy4vLi4vLi4vcGx1Z2lucy9jb2xvclBpY2tlcidcclxuXHJcbmNvbnN0IG91dHB1dCA9IHsgY29sb3I6ICcjMDAwMDAwJywgdzogNSB9XHJcbi8vIOeUu+W4g+eahOe6v+eahO+8jOaVsOaNru+8iO+8iVxyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xyXG4gIGNvbnN0IG9QID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJhbmdlV3JhcCBwJylcclxuICBjb25zdCBvQ29sb3JCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29sb3JCdG4nKSxcclxuICAgIG9Db2xvckJveCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb2xvclBpY2tlcmJveCcpXHJcbiAgbGV0IGNvbG9yT25vZmYgPSB0cnVlXHJcblxyXG4gIC8vIOaooeaLn3JhbmdlXHJcbiAgY29uc3Qgb1JhbmdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJhbmdlQnRuJyksXHJcbiAgICBvUmFuZ2VQYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucmFuZ2VMaW5lJyksXHJcbiAgICByX29wdHMgPSB7XHJcbiAgICAgIGg6IG9SYW5nZVBhci5vZmZzZXRIZWlnaHQsXHJcbiAgICAgIHQ6IG9SYW5nZVBhci5vZmZzZXRUb3AsXHJcbiAgICAgIHJIOiBvUmFuZ2Uub2Zmc2V0SGVpZ2h0LFxyXG4gICAgICBtYXg6IDEwLFxyXG4gICAgICBtaW46IDEsXHJcbiAgICAgIHNpemU6IDEsXHJcbiAgICAgIG51bTogMFxyXG4gICAgfVxyXG5cclxuICBmdW5jdGlvbiByYW5nZU1vdmUoZSkge1xyXG4gICAgY29uc3QgdCA9IGUudG91Y2hlc1swXVxyXG4gICAgbGV0IG15ID0gdC5jbGllbnRZIC0gcl9vcHRzLnRcclxuICAgIGlmIChteSA8PSAwKSB7XHJcbiAgICAgIG15ID0gMFxyXG4gICAgfSBlbHNlIGlmIChteSA+PSByX29wdHMuaCkge1xyXG4gICAgICBteSA9IHJfb3B0cy5oXHJcbiAgICB9XHJcblxyXG4gICAgb3B0cy50cmFuc2Zvcm0ob1JhbmdlLCAoJ3RyYW5zbGF0ZVkoJyArIG15ICsgJ3B4KScpKVxyXG4gICAgcl9vcHRzLm15ID0gbXlcclxuICAgIC8vIOWIpOaWreW9k+WJjeS9jee9ru+8jOWxnuS6juWHoFxyXG4gICAgY29uc3QgdmFsdWUgPSBNYXRoLmZsb29yKG15IC8gcl9vcHRzLm51bSlcclxuICAgIG91dHB1dC53ID0gdmFsdWVcclxuICAgIG9QLmlubmVySFRNTCA9ICflrr3luqbvvJonICsgdmFsdWVcclxuICB9XHJcblxyXG4gIC8vIOminOiJsumAieaLqeWZqFxyXG4gIGNvbnN0IGNvbG9yUGlja2VyID0gbmV3IENvbG9yUGlja2VyKHtcclxuICAgIG9Cb3g6IG9Db2xvckJveCxcclxuICAgIG9CdG5XcmFwOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYnRuV3JhcCcpLFxyXG4gICAgb0NhbjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NvbG9yUGlja2VyJyksXHJcbiAgICB3aWR0aDogMjAwLFxyXG4gICAgaGVpZ2h0OiAyMDAsXHJcbiAgICBjYWxsYmFjazogKGNvbG9yKSA9PiB7XHJcbiAgICAgIG91dHB1dC5jb2xvciA9IGNvbG9yXHJcbiAgICAgIG9Db2xvckJ0bi5zdHlsZS5iYWNrZ3JvdW5kID0gY29sb3JcclxuICAgIH1cclxuICB9KVxyXG5cclxuICBjb2xvclBpY2tlci5pbml0KClcclxuXHJcbiAgb0NvbG9yQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCAoKSA9PiB7XHJcbiAgICBvcHRzLnRyYW5zZm9ybShvQ29sb3JCb3gsICd0cmFuc2xhdGVYKCcgKyAoY29sb3JPbm9mZiA/IDAgOiAtMTAwMCkgKyAncHgpJylcclxuICAgIGNvbG9yT25vZmYgPSAhY29sb3JPbm9mZlxyXG4gIH0sIGZhbHNlKVxyXG5cclxuICBvUmFuZ2UuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIChlKSA9PiB7XHJcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpXHJcbiAgICBjb25zdCB0ID0gZS50b3VjaGVzWzBdXHJcbiAgICByX29wdHMuZnggPSB0LmNsaWVudFhcclxuICAgIHJfb3B0cy5meSA9IHQuY2xpZW50WVxyXG5cclxuICAgIHJfb3B0cy5oID0gb1JhbmdlUGFyLm9mZnNldEhlaWdodFxyXG4gICAgcl9vcHRzLnQgPSBvUmFuZ2VQYXIub2Zmc2V0VG9wXHJcbiAgICByX29wdHMuckggPSBvUmFuZ2Uub2Zmc2V0SGVpZ2h0XHJcbiAgICAvLyDkv67mraPpq5jluqZcclxuICAgIHJfb3B0cy5oIC09IHJfb3B0cy5ySFxyXG4gICAgLy8g5Lu95pWwXHJcbiAgICByX29wdHMubnVtID0gcl9vcHRzLmggLyByX29wdHMubWF4XHJcbiAgICAvLyDmt7vliqDnp7vliqjkuovku7ZcclxuICAgIG9SYW5nZS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCByYW5nZU1vdmUsIGZhbHNlKVxyXG4gIH0sIGZhbHNlKVxyXG5cclxuICBvUmFuZ2UuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCAoKSA9PiB7XHJcbiAgICAvLyDnp7vpmaTnp7vliqjkuovku7ZcclxuICAgIG9SYW5nZS5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCByYW5nZU1vdmUsIGZhbHNlKVxyXG4gIH0sIGZhbHNlKVxyXG59LCBmYWxzZSlcclxuXHJcbmV4cG9ydCBkZWZhdWx0IG91dHB1dFxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvaW5kZXgvbGluZURhdGEuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n__webpack_require__(6);\n\nvar _fastclick = __webpack_require__(7);\n\nvar _fastclick2 = _interopRequireDefault(_fastclick);\n\nvar _opts2 = __webpack_require__(0);\n\nvar _opts3 = _interopRequireDefault(_opts2);\n\n__webpack_require__(8);\n\n__webpack_require__(1);\n\n__webpack_require__(4);\n\n__webpack_require__(2);\n\n__webpack_require__(13);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// 添加fastclick\n// 入口文件\ndocument.addEventListener('DOMContentLoaded', function () {\n  _fastclick2.default.attach(document.body);\n}, false);\n\ndocument.querySelector('.main').addEventListener('touchmove', function (e) {\n  if (_opts3.default.isStopPrevent) {\n    e.preventDefault();\n  }\n}, false);\n\nvar oFilterBox = document.getElementById('filterBox');\n\n// 滤镜框显示隐藏\ndocument.getElementById('filterBtn').addEventListener('touchstart', function () {\n  oFilterBox.style.display = 'block';\n}, false);\n\ndocument.querySelector('#filterBox .close').addEventListener('touchstart', function () {\n  oFilterBox.style.display = 'none';\n}, false);\n\nvar oTop = document.querySelector('.main_top');\n\n_opts3.default.canvasW = oTop.offsetWidth;\n_opts3.default.canvasH = oTop.offsetHeight;\n\n// 初始化，定义画布宽高\nvar oCan = _opts3.default.oCan;\noCan.width = _opts3.default.canvasW;\noCan.height = _opts3.default.canvasH;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvcGFnZS9pbmRleC5qcz8zOWEwIl0sIm5hbWVzIjpbImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaCIsImJvZHkiLCJxdWVyeVNlbGVjdG9yIiwiZSIsImlzU3RvcFByZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsIm9GaWx0ZXJCb3giLCJnZXRFbGVtZW50QnlJZCIsInN0eWxlIiwiZGlzcGxheSIsIm9Ub3AiLCJjYW52YXNXIiwib2Zmc2V0V2lkdGgiLCJjYW52YXNIIiwib2Zmc2V0SGVpZ2h0Iiwib0NhbiIsIndpZHRoIiwiaGVpZ2h0Il0sIm1hcHBpbmdzIjoiOztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUVBO0FBVkE7QUFXQUEsU0FBU0MsZ0JBQVQsQ0FBMEIsa0JBQTFCLEVBQThDLFlBQU07QUFDbEQsc0JBQVVDLE1BQVYsQ0FBaUJGLFNBQVNHLElBQTFCO0FBQ0QsQ0FGRCxFQUVHLEtBRkg7O0FBSUFILFNBQVNJLGFBQVQsQ0FBdUIsT0FBdkIsRUFBZ0NILGdCQUFoQyxDQUFpRCxXQUFqRCxFQUE4RCxVQUFDSSxDQUFELEVBQU87QUFDbkUsTUFBSSxlQUFNQyxhQUFWLEVBQXlCO0FBQ3ZCRCxNQUFFRSxjQUFGO0FBQ0Q7QUFDRixDQUpELEVBSUcsS0FKSDs7QUFNQSxJQUFNQyxhQUFhUixTQUFTUyxjQUFULENBQXdCLFdBQXhCLENBQW5COztBQUVBO0FBQ0FULFNBQVNTLGNBQVQsQ0FBd0IsV0FBeEIsRUFBcUNSLGdCQUFyQyxDQUFzRCxZQUF0RCxFQUFvRSxZQUFNO0FBQ3hFTyxhQUFXRSxLQUFYLENBQWlCQyxPQUFqQixHQUEyQixPQUEzQjtBQUNELENBRkQsRUFFRyxLQUZIOztBQUlBWCxTQUFTSSxhQUFULENBQXVCLG1CQUF2QixFQUE0Q0gsZ0JBQTVDLENBQTZELFlBQTdELEVBQTJFLFlBQU07QUFDL0VPLGFBQVdFLEtBQVgsQ0FBaUJDLE9BQWpCLEdBQTJCLE1BQTNCO0FBQ0QsQ0FGRCxFQUVHLEtBRkg7O0FBSUEsSUFBTUMsT0FBT1osU0FBU0ksYUFBVCxDQUF1QixXQUF2QixDQUFiOztBQUVBLGVBQU1TLE9BQU4sR0FBZ0JELEtBQUtFLFdBQXJCO0FBQ0EsZUFBTUMsT0FBTixHQUFnQkgsS0FBS0ksWUFBckI7O0FBRUE7QUFDQSxJQUFNQyxPQUFPLGVBQU1BLElBQW5CO0FBQ0FBLEtBQUtDLEtBQUwsR0FBYSxlQUFNTCxPQUFuQjtBQUNBSSxLQUFLRSxNQUFMLEdBQWMsZUFBTUosT0FBcEIiLCJmaWxlIjoiNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIOWFpeWPo+aWh+S7tlxyXG5pbXBvcnQgJy4vLi4vLi4vY3NzL2luZGV4LnNjc3MnXHJcbmltcG9ydCBGYXN0Y2xpY2sgZnJvbSAnLi8uLi8uLi9wbHVnaW5zL2Zhc3RjbGljaydcclxuaW1wb3J0IF9vcHRzIGZyb20gJy4vLi4vaW5kZXgvb3B0cydcclxuaW1wb3J0ICcuLy4uL2luZGV4L3Bob3RvZ3JhcGgnXHJcbmltcG9ydCAnLi8uLi9pbmRleC9kcmF3J1xyXG5pbXBvcnQgJy4vLi4vaW5kZXgvbGluZURhdGEnXHJcbmltcG9ydCAnLi8uLi9pbmRleC9maWx0ZXInXHJcbmltcG9ydCAnLi8uLi9pbmRleC9zZWxlY3RJbWdTaXplJ1xyXG5cclxuLy8g5re75YqgZmFzdGNsaWNrXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XHJcbiAgRmFzdGNsaWNrLmF0dGFjaChkb2N1bWVudC5ib2R5KVxyXG59LCBmYWxzZSlcclxuXHJcbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tYWluJykuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgKGUpID0+IHtcclxuICBpZiAoX29wdHMuaXNTdG9wUHJldmVudCkge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXHJcbiAgfVxyXG59LCBmYWxzZSlcclxuXHJcbmNvbnN0IG9GaWx0ZXJCb3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmlsdGVyQm94JylcclxuXHJcbi8vIOa7pOmVnOahhuaYvuekuumakOiXj1xyXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmlsdGVyQnRuJykuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsICgpID0+IHtcclxuICBvRmlsdGVyQm94LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snXHJcbn0sIGZhbHNlKVxyXG5cclxuZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2ZpbHRlckJveCAuY2xvc2UnKS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgKCkgPT4ge1xyXG4gIG9GaWx0ZXJCb3guc3R5bGUuZGlzcGxheSA9ICdub25lJ1xyXG59LCBmYWxzZSlcclxuXHJcbmNvbnN0IG9Ub3AgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFpbl90b3AnKVxyXG5cclxuX29wdHMuY2FudmFzVyA9IG9Ub3Aub2Zmc2V0V2lkdGhcclxuX29wdHMuY2FudmFzSCA9IG9Ub3Aub2Zmc2V0SGVpZ2h0XHJcblxyXG4vLyDliJ3lp4vljJbvvIzlrprkuYnnlLvluIPlrr3pq5hcclxuY29uc3Qgb0NhbiA9IF9vcHRzLm9DYW5cclxub0Nhbi53aWR0aCA9IF9vcHRzLmNhbnZhc1dcclxub0Nhbi5oZWlnaHQgPSBfb3B0cy5jYW52YXNIXHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy9wYWdlL2luZGV4LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY3NzL2luZGV4LnNjc3M/YzllZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jc3MvaW5kZXguc2Nzc1xuLy8gbW9kdWxlIGlkID0gNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var __WEBPACK_AMD_DEFINE_RESULT__;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n;(function () {\n\t'use strict';\n\n\t/**\r\n  * @preserve FastClick: polyfill to remove click delays on browsers with touch UIs.\r\n  *\r\n  * @codingstandard ftlabs-jsv2\r\n  * @copyright The Financial Times Limited [All Rights Reserved]\r\n  * @license MIT License (see LICENSE.txt)\r\n  */\n\n\t/*jslint browser:true, node:true*/\n\t/*global define, Event, Node*/\n\n\t/**\r\n  * Instantiate fast-clicking listeners on the specified layer.\r\n  *\r\n  * @constructor\r\n  * @param {Element} layer The layer to listen on\r\n  * @param {Object} [options={}] The options to override the defaults\r\n  */\n\n\tfunction FastClick(layer, options) {\n\t\tvar oldOnClick;\n\n\t\toptions = options || {};\n\n\t\t/**\r\n   * Whether a click is currently being tracked.\r\n   *\r\n   * @type boolean\r\n   */\n\t\tthis.trackingClick = false;\n\n\t\t/**\r\n   * Timestamp for when click tracking started.\r\n   *\r\n   * @type number\r\n   */\n\t\tthis.trackingClickStart = 0;\n\n\t\t/**\r\n   * The element being tracked for a click.\r\n   *\r\n   * @type EventTarget\r\n   */\n\t\tthis.targetElement = null;\n\n\t\t/**\r\n   * X-coordinate of touch start event.\r\n   *\r\n   * @type number\r\n   */\n\t\tthis.touchStartX = 0;\n\n\t\t/**\r\n   * Y-coordinate of touch start event.\r\n   *\r\n   * @type number\r\n   */\n\t\tthis.touchStartY = 0;\n\n\t\t/**\r\n   * ID of the last touch, retrieved from Touch.identifier.\r\n   *\r\n   * @type number\r\n   */\n\t\tthis.lastTouchIdentifier = 0;\n\n\t\t/**\r\n   * Touchmove boundary, beyond which a click will be cancelled.\r\n   *\r\n   * @type number\r\n   */\n\t\tthis.touchBoundary = options.touchBoundary || 10;\n\n\t\t/**\r\n   * The FastClick layer.\r\n   *\r\n   * @type Element\r\n   */\n\t\tthis.layer = layer;\n\n\t\t/**\r\n   * The minimum time between tap(touchstart and touchend) events\r\n   *\r\n   * @type number\r\n   */\n\t\tthis.tapDelay = options.tapDelay || 200;\n\n\t\t/**\r\n   * The maximum time for a tap\r\n   *\r\n   * @type number\r\n   */\n\t\tthis.tapTimeout = options.tapTimeout || 700;\n\n\t\tif (FastClick.notNeeded(layer)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Some old versions of Android don't have Function.prototype.bind\n\t\tfunction bind(method, context) {\n\t\t\treturn function () {\n\t\t\t\treturn method.apply(context, arguments);\n\t\t\t};\n\t\t}\n\n\t\tvar methods = ['onMouse', 'onClick', 'onTouchStart', 'onTouchMove', 'onTouchEnd', 'onTouchCancel'];\n\t\tvar context = this;\n\t\tfor (var i = 0, l = methods.length; i < l; i++) {\n\t\t\tcontext[methods[i]] = bind(context[methods[i]], context);\n\t\t}\n\n\t\t// Set up event handlers as required\n\t\tif (deviceIsAndroid) {\n\t\t\tlayer.addEventListener('mouseover', this.onMouse, true);\n\t\t\tlayer.addEventListener('mousedown', this.onMouse, true);\n\t\t\tlayer.addEventListener('mouseup', this.onMouse, true);\n\t\t}\n\n\t\tlayer.addEventListener('click', this.onClick, true);\n\t\tlayer.addEventListener('touchstart', this.onTouchStart, false);\n\t\tlayer.addEventListener('touchmove', this.onTouchMove, false);\n\t\tlayer.addEventListener('touchend', this.onTouchEnd, false);\n\t\tlayer.addEventListener('touchcancel', this.onTouchCancel, false);\n\n\t\t// Hack is required for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)\n\t\t// which is how FastClick normally stops click events bubbling to callbacks registered on the FastClick\n\t\t// layer when they are cancelled.\n\t\tif (!Event.prototype.stopImmediatePropagation) {\n\t\t\tlayer.removeEventListener = function (type, callback, capture) {\n\t\t\t\tvar rmv = Node.prototype.removeEventListener;\n\t\t\t\tif (type === 'click') {\n\t\t\t\t\trmv.call(layer, type, callback.hijacked || callback, capture);\n\t\t\t\t} else {\n\t\t\t\t\trmv.call(layer, type, callback, capture);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tlayer.addEventListener = function (type, callback, capture) {\n\t\t\t\tvar adv = Node.prototype.addEventListener;\n\t\t\t\tif (type === 'click') {\n\t\t\t\t\tadv.call(layer, type, callback.hijacked || (callback.hijacked = function (event) {\n\t\t\t\t\t\tif (!event.propagationStopped) {\n\t\t\t\t\t\t\tcallback(event);\n\t\t\t\t\t\t}\n\t\t\t\t\t}), capture);\n\t\t\t\t} else {\n\t\t\t\t\tadv.call(layer, type, callback, capture);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\t// If a handler is already declared in the element's onclick attribute, it will be fired before\n\t\t// FastClick's onClick handler. Fix this by pulling out the user-defined handler function and\n\t\t// adding it as listener.\n\t\tif (typeof layer.onclick === 'function') {\n\n\t\t\t// Android browser on at least 3.2 requires a new reference to the function in layer.onclick\n\t\t\t// - the old one won't work if passed to addEventListener directly.\n\t\t\toldOnClick = layer.onclick;\n\t\t\tlayer.addEventListener('click', function (event) {\n\t\t\t\toldOnClick(event);\n\t\t\t}, false);\n\t\t\tlayer.onclick = null;\n\t\t}\n\t}\n\n\t/**\r\n * Windows Phone 8.1 fakes user agent string to look like Android and iPhone.\r\n *\r\n * @type boolean\r\n */\n\tvar deviceIsWindowsPhone = navigator.userAgent.indexOf(\"Windows Phone\") >= 0;\n\n\t/**\r\n  * Android requires exceptions.\r\n  *\r\n  * @type boolean\r\n  */\n\tvar deviceIsAndroid = navigator.userAgent.indexOf('Android') > 0 && !deviceIsWindowsPhone;\n\n\t/**\r\n  * iOS requires exceptions.\r\n  *\r\n  * @type boolean\r\n  */\n\tvar deviceIsIOS = /iP(ad|hone|od)/.test(navigator.userAgent) && !deviceIsWindowsPhone;\n\n\t/**\r\n  * iOS 4 requires an exception for select elements.\r\n  *\r\n  * @type boolean\r\n  */\n\tvar deviceIsIOS4 = deviceIsIOS && /OS 4_\\d(_\\d)?/.test(navigator.userAgent);\n\n\t/**\r\n  * iOS 6.0-7.* requires the target element to be manually derived\r\n  *\r\n  * @type boolean\r\n  */\n\tvar deviceIsIOSWithBadTarget = deviceIsIOS && /OS [6-7]_\\d/.test(navigator.userAgent);\n\n\t/**\r\n  * BlackBerry requires exceptions.\r\n  *\r\n  * @type boolean\r\n  */\n\tvar deviceIsBlackBerry10 = navigator.userAgent.indexOf('BB10') > 0;\n\n\t/**\r\n  * Determine whether a given element requires a native click.\r\n  *\r\n  * @param {EventTarget|Element} target Target DOM element\r\n  * @returns {boolean} Returns true if the element needs a native click\r\n  */\n\tFastClick.prototype.needsClick = function (target) {\n\t\tswitch (target.nodeName.toLowerCase()) {\n\n\t\t\t// Don't send a synthetic click to disabled inputs (issue #62)\n\t\t\tcase 'button':\n\t\t\tcase 'select':\n\t\t\tcase 'textarea':\n\t\t\t\tif (target.disabled) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\tcase 'input':\n\n\t\t\t\t// File inputs need real clicks on iOS 6 due to a browser bug (issue #68)\n\t\t\t\tif (deviceIsIOS && target.type === 'file' || target.disabled) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\tcase 'label':\n\t\t\tcase 'iframe': // iOS8 homescreen apps can prevent events bubbling into frames\n\t\t\tcase 'video':\n\t\t\t\treturn true;\n\t\t}\n\n\t\treturn (/\\bneedsclick\\b/.test(target.className)\n\t\t);\n\t};\n\n\t/**\r\n  * Determine whether a given element requires a call to focus to simulate click into element.\r\n  *\r\n  * @param {EventTarget|Element} target Target DOM element\r\n  * @returns {boolean} Returns true if the element requires a call to focus to simulate native click.\r\n  */\n\tFastClick.prototype.needsFocus = function (target) {\n\t\tswitch (target.nodeName.toLowerCase()) {\n\t\t\tcase 'textarea':\n\t\t\t\treturn true;\n\t\t\tcase 'select':\n\t\t\t\treturn !deviceIsAndroid;\n\t\t\tcase 'input':\n\t\t\t\tswitch (target.type) {\n\t\t\t\t\tcase 'button':\n\t\t\t\t\tcase 'checkbox':\n\t\t\t\t\tcase 'file':\n\t\t\t\t\tcase 'image':\n\t\t\t\t\tcase 'radio':\n\t\t\t\t\tcase 'submit':\n\t\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// No point in attempting to focus disabled inputs\n\t\t\t\treturn !target.disabled && !target.readOnly;\n\t\t\tdefault:\n\t\t\t\treturn (/\\bneedsfocus\\b/.test(target.className)\n\t\t\t\t);\n\t\t}\n\t};\n\n\t/**\r\n  * Send a click event to the specified element.\r\n  *\r\n  * @param {EventTarget|Element} targetElement\r\n  * @param {Event} event\r\n  */\n\tFastClick.prototype.sendClick = function (targetElement, event) {\n\t\tvar clickEvent, touch;\n\n\t\t// On some Android devices activeElement needs to be blurred otherwise the synthetic click will have no effect (#24)\n\t\tif (document.activeElement && document.activeElement !== targetElement) {\n\t\t\tdocument.activeElement.blur();\n\t\t}\n\n\t\ttouch = event.changedTouches[0];\n\n\t\t// Synthesise a click event, with an extra attribute so it can be tracked\n\t\tclickEvent = document.createEvent('MouseEvents');\n\t\tclickEvent.initMouseEvent(this.determineEventType(targetElement), true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);\n\t\tclickEvent.forwardedTouchEvent = true;\n\t\ttargetElement.dispatchEvent(clickEvent);\n\t};\n\n\tFastClick.prototype.determineEventType = function (targetElement) {\n\n\t\t//Issue #159: Android Chrome Select Box does not open with a synthetic click event\n\t\tif (deviceIsAndroid && targetElement.tagName.toLowerCase() === 'select') {\n\t\t\treturn 'mousedown';\n\t\t}\n\n\t\treturn 'click';\n\t};\n\n\t/**\r\n  * @param {EventTarget|Element} targetElement\r\n  */\n\tFastClick.prototype.focus = function (targetElement) {\n\t\tvar length;\n\n\t\t// Issue #160: on iOS 7, some input elements (e.g. date datetime month) throw a vague TypeError on setSelectionRange. These elements don't have an integer value for the selectionStart and selectionEnd properties, but unfortunately that can't be used for detection because accessing the properties also throws a TypeError. Just check the type instead. Filed as Apple bug #15122724.\n\t\tif (deviceIsIOS && targetElement.setSelectionRange && targetElement.type.indexOf('date') !== 0 && targetElement.type !== 'time' && targetElement.type !== 'month') {\n\t\t\tlength = targetElement.value.length;\n\t\t\ttargetElement.setSelectionRange(length, length);\n\t\t} else {\n\t\t\ttargetElement.focus();\n\t\t}\n\t};\n\n\t/**\r\n  * Check whether the given target element is a child of a scrollable layer and if so, set a flag on it.\r\n  *\r\n  * @param {EventTarget|Element} targetElement\r\n  */\n\tFastClick.prototype.updateScrollParent = function (targetElement) {\n\t\tvar scrollParent, parentElement;\n\n\t\tscrollParent = targetElement.fastClickScrollParent;\n\n\t\t// Attempt to discover whether the target element is contained within a scrollable layer. Re-check if the\n\t\t// target element was moved to another parent.\n\t\tif (!scrollParent || !scrollParent.contains(targetElement)) {\n\t\t\tparentElement = targetElement;\n\t\t\tdo {\n\t\t\t\tif (parentElement.scrollHeight > parentElement.offsetHeight) {\n\t\t\t\t\tscrollParent = parentElement;\n\t\t\t\t\ttargetElement.fastClickScrollParent = parentElement;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tparentElement = parentElement.parentElement;\n\t\t\t} while (parentElement);\n\t\t}\n\n\t\t// Always update the scroll top tracker if possible.\n\t\tif (scrollParent) {\n\t\t\tscrollParent.fastClickLastScrollTop = scrollParent.scrollTop;\n\t\t}\n\t};\n\n\t/**\r\n  * @param {EventTarget} targetElement\r\n  * @returns {Element|EventTarget}\r\n  */\n\tFastClick.prototype.getTargetElementFromEventTarget = function (eventTarget) {\n\n\t\t// On some older browsers (notably Safari on iOS 4.1 - see issue #56) the event target may be a text node.\n\t\tif (eventTarget.nodeType === Node.TEXT_NODE) {\n\t\t\treturn eventTarget.parentNode;\n\t\t}\n\n\t\treturn eventTarget;\n\t};\n\n\t/**\r\n  * On touch start, record the position and scroll offset.\r\n  *\r\n  * @param {Event} event\r\n  * @returns {boolean}\r\n  */\n\tFastClick.prototype.onTouchStart = function (event) {\n\t\tvar targetElement, touch, selection;\n\n\t\t// Ignore multiple touches, otherwise pinch-to-zoom is prevented if both fingers are on the FastClick element (issue #111).\n\t\tif (event.targetTouches.length > 1) {\n\t\t\treturn true;\n\t\t}\n\n\t\ttargetElement = this.getTargetElementFromEventTarget(event.target);\n\t\ttouch = event.targetTouches[0];\n\n\t\tif (deviceIsIOS) {\n\n\t\t\t// Only trusted events will deselect text on iOS (issue #49)\n\t\t\tselection = window.getSelection();\n\t\t\tif (selection.rangeCount && !selection.isCollapsed) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (!deviceIsIOS4) {\n\n\t\t\t\t// Weird things happen on iOS when an alert or confirm dialog is opened from a click event callback (issue #23):\n\t\t\t\t// when the user next taps anywhere else on the page, new touchstart and touchend events are dispatched\n\t\t\t\t// with the same identifier as the touch event that previously triggered the click that triggered the alert.\n\t\t\t\t// Sadly, there is an issue on iOS 4 that causes some normal touch events to have the same identifier as an\n\t\t\t\t// immediately preceeding touch event (issue #52), so this fix is unavailable on that platform.\n\t\t\t\t// Issue 120: touch.identifier is 0 when Chrome dev tools 'Emulate touch events' is set with an iOS device UA string,\n\t\t\t\t// which causes all touch events to be ignored. As this block only applies to iOS, and iOS identifiers are always long,\n\t\t\t\t// random integers, it's safe to to continue if the identifier is 0 here.\n\t\t\t\tif (touch.identifier && touch.identifier === this.lastTouchIdentifier) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tthis.lastTouchIdentifier = touch.identifier;\n\n\t\t\t\t// If the target element is a child of a scrollable layer (using -webkit-overflow-scrolling: touch) and:\n\t\t\t\t// 1) the user does a fling scroll on the scrollable layer\n\t\t\t\t// 2) the user stops the fling scroll with another tap\n\t\t\t\t// then the event.target of the last 'touchend' event will be the element that was under the user's finger\n\t\t\t\t// when the fling scroll was started, causing FastClick to send a click event to that layer - unless a check\n\t\t\t\t// is made to ensure that a parent layer was not scrolled before sending a synthetic click (issue #42).\n\t\t\t\tthis.updateScrollParent(targetElement);\n\t\t\t}\n\t\t}\n\n\t\tthis.trackingClick = true;\n\t\tthis.trackingClickStart = event.timeStamp;\n\t\tthis.targetElement = targetElement;\n\n\t\tthis.touchStartX = touch.pageX;\n\t\tthis.touchStartY = touch.pageY;\n\n\t\t// Prevent phantom clicks on fast double-tap (issue #36)\n\t\tif (event.timeStamp - this.lastClickTime < this.tapDelay) {\n\t\t\tevent.preventDefault();\n\t\t}\n\n\t\treturn true;\n\t};\n\n\t/**\r\n  * Based on a touchmove event object, check whether the touch has moved past a boundary since it started.\r\n  *\r\n  * @param {Event} event\r\n  * @returns {boolean}\r\n  */\n\tFastClick.prototype.touchHasMoved = function (event) {\n\t\tvar touch = event.changedTouches[0],\n\t\t    boundary = this.touchBoundary;\n\n\t\tif (Math.abs(touch.pageX - this.touchStartX) > boundary || Math.abs(touch.pageY - this.touchStartY) > boundary) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t};\n\n\t/**\r\n  * Update the last position.\r\n  *\r\n  * @param {Event} event\r\n  * @returns {boolean}\r\n  */\n\tFastClick.prototype.onTouchMove = function (event) {\n\t\tif (!this.trackingClick) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// If the touch has moved, cancel the click tracking\n\t\tif (this.targetElement !== this.getTargetElementFromEventTarget(event.target) || this.touchHasMoved(event)) {\n\t\t\tthis.trackingClick = false;\n\t\t\tthis.targetElement = null;\n\t\t}\n\n\t\treturn true;\n\t};\n\n\t/**\r\n  * Attempt to find the labelled control for the given label element.\r\n  *\r\n  * @param {EventTarget|HTMLLabelElement} labelElement\r\n  * @returns {Element|null}\r\n  */\n\tFastClick.prototype.findControl = function (labelElement) {\n\n\t\t// Fast path for newer browsers supporting the HTML5 control attribute\n\t\tif (labelElement.control !== undefined) {\n\t\t\treturn labelElement.control;\n\t\t}\n\n\t\t// All browsers under test that support touch events also support the HTML5 htmlFor attribute\n\t\tif (labelElement.htmlFor) {\n\t\t\treturn document.getElementById(labelElement.htmlFor);\n\t\t}\n\n\t\t// If no for attribute exists, attempt to retrieve the first labellable descendant element\n\t\t// the list of which is defined here: http://www.w3.org/TR/html5/forms.html#category-label\n\t\treturn labelElement.querySelector('button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea');\n\t};\n\n\t/**\r\n  * On touch end, determine whether to send a click event at once.\r\n  *\r\n  * @param {Event} event\r\n  * @returns {boolean}\r\n  */\n\tFastClick.prototype.onTouchEnd = function (event) {\n\t\tvar forElement,\n\t\t    trackingClickStart,\n\t\t    targetTagName,\n\t\t    scrollParent,\n\t\t    touch,\n\t\t    targetElement = this.targetElement;\n\n\t\tif (!this.trackingClick) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Prevent phantom clicks on fast double-tap (issue #36)\n\t\tif (event.timeStamp - this.lastClickTime < this.tapDelay) {\n\t\t\tthis.cancelNextClick = true;\n\t\t\treturn true;\n\t\t}\n\n\t\tif (event.timeStamp - this.trackingClickStart > this.tapTimeout) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Reset to prevent wrong click cancel on input (issue #156).\n\t\tthis.cancelNextClick = false;\n\n\t\tthis.lastClickTime = event.timeStamp;\n\n\t\ttrackingClickStart = this.trackingClickStart;\n\t\tthis.trackingClick = false;\n\t\tthis.trackingClickStart = 0;\n\n\t\t// On some iOS devices, the targetElement supplied with the event is invalid if the layer\n\t\t// is performing a transition or scroll, and has to be re-detected manually. Note that\n\t\t// for this to function correctly, it must be called *after* the event target is checked!\n\t\t// See issue #57; also filed as rdar://13048589 .\n\t\tif (deviceIsIOSWithBadTarget) {\n\t\t\ttouch = event.changedTouches[0];\n\n\t\t\t// In certain cases arguments of elementFromPoint can be negative, so prevent setting targetElement to null\n\t\t\ttargetElement = document.elementFromPoint(touch.pageX - window.pageXOffset, touch.pageY - window.pageYOffset) || targetElement;\n\t\t\ttargetElement.fastClickScrollParent = this.targetElement.fastClickScrollParent;\n\t\t}\n\n\t\ttargetTagName = targetElement.tagName.toLowerCase();\n\t\tif (targetTagName === 'label') {\n\t\t\tforElement = this.findControl(targetElement);\n\t\t\tif (forElement) {\n\t\t\t\tthis.focus(targetElement);\n\t\t\t\tif (deviceIsAndroid) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\ttargetElement = forElement;\n\t\t\t}\n\t\t} else if (this.needsFocus(targetElement)) {\n\n\t\t\t// Case 1: If the touch started a while ago (best guess is 100ms based on tests for issue #36) then focus will be triggered anyway. Return early and unset the target element reference so that the subsequent click will be allowed through.\n\t\t\t// Case 2: Without this exception for input elements tapped when the document is contained in an iframe, then any inputted text won't be visible even though the value attribute is updated as the user types (issue #37).\n\t\t\tif (event.timeStamp - trackingClickStart > 100 || deviceIsIOS && window.top !== window && targetTagName === 'input') {\n\t\t\t\tthis.targetElement = null;\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tthis.focus(targetElement);\n\t\t\tthis.sendClick(targetElement, event);\n\n\t\t\t// Select elements need the event to go through on iOS 4, otherwise the selector menu won't open.\n\t\t\t// Also this breaks opening selects when VoiceOver is active on iOS6, iOS7 (and possibly others)\n\t\t\tif (!deviceIsIOS || targetTagName !== 'select') {\n\t\t\t\tthis.targetElement = null;\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tif (deviceIsIOS && !deviceIsIOS4) {\n\n\t\t\t// Don't send a synthetic click event if the target element is contained within a parent layer that was scrolled\n\t\t\t// and this tap is being used to stop the scrolling (usually initiated by a fling - issue #42).\n\t\t\tscrollParent = targetElement.fastClickScrollParent;\n\t\t\tif (scrollParent && scrollParent.fastClickLastScrollTop !== scrollParent.scrollTop) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// Prevent the actual click from going though - unless the target node is marked as requiring\n\t\t// real clicks or if it is in the whitelist in which case only non-programmatic clicks are permitted.\n\t\tif (!this.needsClick(targetElement)) {\n\t\t\tevent.preventDefault();\n\t\t\tthis.sendClick(targetElement, event);\n\t\t}\n\n\t\treturn false;\n\t};\n\n\t/**\r\n  * On touch cancel, stop tracking the click.\r\n  *\r\n  * @returns {void}\r\n  */\n\tFastClick.prototype.onTouchCancel = function () {\n\t\tthis.trackingClick = false;\n\t\tthis.targetElement = null;\n\t};\n\n\t/**\r\n  * Determine mouse events which should be permitted.\r\n  *\r\n  * @param {Event} event\r\n  * @returns {boolean}\r\n  */\n\tFastClick.prototype.onMouse = function (event) {\n\n\t\t// If a target element was never set (because a touch event was never fired) allow the event\n\t\tif (!this.targetElement) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (event.forwardedTouchEvent) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Programmatically generated events targeting a specific element should be permitted\n\t\tif (!event.cancelable) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Derive and check the target element to see whether the mouse event needs to be permitted;\n\t\t// unless explicitly enabled, prevent non-touch click events from triggering actions,\n\t\t// to prevent ghost/doubleclicks.\n\t\tif (!this.needsClick(this.targetElement) || this.cancelNextClick) {\n\n\t\t\t// Prevent any user-added listeners declared on FastClick element from being fired.\n\t\t\tif (event.stopImmediatePropagation) {\n\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t} else {\n\n\t\t\t\t// Part of the hack for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)\n\t\t\t\tevent.propagationStopped = true;\n\t\t\t}\n\n\t\t\t// Cancel the event\n\t\t\tevent.stopPropagation();\n\t\t\tevent.preventDefault();\n\n\t\t\treturn false;\n\t\t}\n\n\t\t// If the mouse event is permitted, return true for the action to go through.\n\t\treturn true;\n\t};\n\n\t/**\r\n  * On actual clicks, determine whether this is a touch-generated click, a click action occurring\r\n  * naturally after a delay after a touch (which needs to be cancelled to avoid duplication), or\r\n  * an actual click which should be permitted.\r\n  *\r\n  * @param {Event} event\r\n  * @returns {boolean}\r\n  */\n\tFastClick.prototype.onClick = function (event) {\n\t\tvar permitted;\n\n\t\t// It's possible for another FastClick-like library delivered with third-party code to fire a click event before FastClick does (issue #44). In that case, set the click-tracking flag back to false and return early. This will cause onTouchEnd to return early.\n\t\tif (this.trackingClick) {\n\t\t\tthis.targetElement = null;\n\t\t\tthis.trackingClick = false;\n\t\t\treturn true;\n\t\t}\n\n\t\t// Very odd behaviour on iOS (issue #18): if a submit element is present inside a form and the user hits enter in the iOS simulator or clicks the Go button on the pop-up OS keyboard the a kind of 'fake' click event will be triggered with the submit-type input element as the target.\n\t\tif (event.target.type === 'submit' && event.detail === 0) {\n\t\t\treturn true;\n\t\t}\n\n\t\tpermitted = this.onMouse(event);\n\n\t\t// Only unset targetElement if the click is not permitted. This will ensure that the check for !targetElement in onMouse fails and the browser's click doesn't go through.\n\t\tif (!permitted) {\n\t\t\tthis.targetElement = null;\n\t\t}\n\n\t\t// If clicks are permitted, return true for the action to go through.\n\t\treturn permitted;\n\t};\n\n\t/**\r\n  * Remove all FastClick's event listeners.\r\n  *\r\n  * @returns {void}\r\n  */\n\tFastClick.prototype.destroy = function () {\n\t\tvar layer = this.layer;\n\n\t\tif (deviceIsAndroid) {\n\t\t\tlayer.removeEventListener('mouseover', this.onMouse, true);\n\t\t\tlayer.removeEventListener('mousedown', this.onMouse, true);\n\t\t\tlayer.removeEventListener('mouseup', this.onMouse, true);\n\t\t}\n\n\t\tlayer.removeEventListener('click', this.onClick, true);\n\t\tlayer.removeEventListener('touchstart', this.onTouchStart, false);\n\t\tlayer.removeEventListener('touchmove', this.onTouchMove, false);\n\t\tlayer.removeEventListener('touchend', this.onTouchEnd, false);\n\t\tlayer.removeEventListener('touchcancel', this.onTouchCancel, false);\n\t};\n\n\t/**\r\n  * Check whether FastClick is needed.\r\n  *\r\n  * @param {Element} layer The layer to listen on\r\n  */\n\tFastClick.notNeeded = function (layer) {\n\t\tvar metaViewport;\n\t\tvar chromeVersion;\n\t\tvar blackberryVersion;\n\t\tvar firefoxVersion;\n\n\t\t// Devices that don't support touch don't need FastClick\n\t\tif (typeof window.ontouchstart === 'undefined') {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Chrome version - zero for other browsers\n\t\tchromeVersion = +(/Chrome\\/([0-9]+)/.exec(navigator.userAgent) || [, 0])[1];\n\n\t\tif (chromeVersion) {\n\n\t\t\tif (deviceIsAndroid) {\n\t\t\t\tmetaViewport = document.querySelector('meta[name=viewport]');\n\n\t\t\t\tif (metaViewport) {\n\t\t\t\t\t// Chrome on Android with user-scalable=\"no\" doesn't need FastClick (issue #89)\n\t\t\t\t\tif (metaViewport.content.indexOf('user-scalable=no') !== -1) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\t// Chrome 32 and above with width=device-width or less don't need FastClick\n\t\t\t\t\tif (chromeVersion > 31 && document.documentElement.scrollWidth <= window.outerWidth) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Chrome desktop doesn't need FastClick (issue #15)\n\t\t\t} else {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tif (deviceIsBlackBerry10) {\n\t\t\tblackberryVersion = navigator.userAgent.match(/Version\\/([0-9]*)\\.([0-9]*)/);\n\n\t\t\t// BlackBerry 10.3+ does not require Fastclick library.\n\t\t\t// https://github.com/ftlabs/fastclick/issues/251\n\t\t\tif (blackberryVersion[1] >= 10 && blackberryVersion[2] >= 3) {\n\t\t\t\tmetaViewport = document.querySelector('meta[name=viewport]');\n\n\t\t\t\tif (metaViewport) {\n\t\t\t\t\t// user-scalable=no eliminates click delay.\n\t\t\t\t\tif (metaViewport.content.indexOf('user-scalable=no') !== -1) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\t// width=device-width (or less than device-width) eliminates click delay.\n\t\t\t\t\tif (document.documentElement.scrollWidth <= window.outerWidth) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// IE10 with -ms-touch-action: none or manipulation, which disables double-tap-to-zoom (issue #97)\n\t\tif (layer.style.msTouchAction === 'none' || layer.style.touchAction === 'manipulation') {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Firefox version - zero for other browsers\n\t\tfirefoxVersion = +(/Firefox\\/([0-9]+)/.exec(navigator.userAgent) || [, 0])[1];\n\n\t\tif (firefoxVersion >= 27) {\n\t\t\t// Firefox 27+ does not have tap delay if the content is not zoomable - https://bugzilla.mozilla.org/show_bug.cgi?id=922896\n\n\t\t\tmetaViewport = document.querySelector('meta[name=viewport]');\n\t\t\tif (metaViewport && (metaViewport.content.indexOf('user-scalable=no') !== -1 || document.documentElement.scrollWidth <= window.outerWidth)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// IE11: prefixed -ms-touch-action is no longer supported and it's recomended to use non-prefixed version\n\t\t// http://msdn.microsoft.com/en-us/library/windows/apps/Hh767313.aspx\n\t\tif (layer.style.touchAction === 'none' || layer.style.touchAction === 'manipulation') {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t};\n\n\t/**\r\n  * Factory method for creating a FastClick object\r\n  *\r\n  * @param {Element} layer The layer to listen on\r\n  * @param {Object} [options={}] The options to override the defaults\r\n  */\n\tFastClick.attach = function (layer, options) {\n\t\treturn new FastClick(layer, options);\n\t};\n\n\tif (\"function\" === 'function' && _typeof(__webpack_require__(3)) === 'object' && __webpack_require__(3)) {\n\n\t\t// AMD. Register as an anonymous module.\n\t\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t\t\treturn FastClick;\n\t\t}.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else if (typeof module !== 'undefined' && module.exports) {\n\t\tmodule.exports = FastClick.attach;\n\t\tmodule.exports.FastClick = FastClick;\n\t} else {\n\t\twindow.FastClick = FastClick;\n\t}\n})();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _exif = __webpack_require__(9);\n\nvar _exif2 = _interopRequireDefault(_exif);\n\nvar _opts = __webpack_require__(0);\n\nvar _opts2 = _interopRequireDefault(_opts);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar oCan = _opts2.default.oCan,\n    ctx = _opts2.default.ctx,\n    oAsideBtn = document.querySelector('.asideBtn'),\n    oAside = document.querySelector('#aside'),\n    oFile = document.getElementById('file'),\n    // 上传图片按钮\noCreateBtn = document.getElementById('create'),\n    // 生成图片按钮\nimgData = {};\n\nvar isCreatePic = false; // 是否生成了图片\n\n/*\r\n *图片上传处理过程\r\n *图片上传成功后 => 获取元数据 => 转化为base64 => 修正图片的宽高，显示的方向和图片的内存大小\r\n*/\n\n// 生成图片\nfunction createImg(e) {\n  e.preventDefault();\n  if (!isCreatePic) {\n    return false;\n  }\n  // 删除上传图片按钮\n  oFile.parentNode.removeChild(oFile);\n  this.parentNode.removeChild(this);\n  oCan.style.display = 'none';\n  this.style.display = 'block';\n  // 生成图片\n  _opts2.default.oShowImg.src = oCan.toDataURL('image/png');\n  _opts2.default.oShowImg.style.display = 'block';\n  _opts2.default.oShowImg.style.position = 'static';\n  document.querySelector('.main_bottom').innerHTML = '<p class=\"success_txt\">生成图片成功！长按可保存图片</p>';\n}\n\n// 图片load回调方法\nfunction cacheImg(url, callback) {\n  if (!url) {\n    callback.call();\n    return false;\n  }\n  var img = new Image();\n  // img.crossOrigin = \"Anonymous\"\n  img.onload = function () {\n    // 图片加载完，执行回调\n    callback.call(img);\n  };\n  img.src = url;\n}\n\n// 显示功能\nfunction showFun() {\n  _opts2.default.showLoading('none');\n  // 选择size，笔触颜色显示\n  oAsideBtn.style.display = 'block';\n  oCreateBtn.style.display = 'block';\n  document.getElementById('filterBtn').style.display = 'block';\n  // 撤销按钮小时\n  _opts2.default.oRevoke.style.display = 'block';\n  isCreatePic = true;\n  // 是否可以画笔触\n  _opts2.default.isDraw = true;\n  // 是新的图片\n  _opts2.default.isNewPic = true;\n}\n\n// 使用离屏进行计算\n// function offScreen() {\n// }\n\n// 计算图片的宽高\nfunction computeWidthAndHeight(data) {\n  var drawWidth = data.drawWidth,\n      drawHeight = data.drawHeight,\n      degree = 0,\n      maxSide = Math.max(drawWidth, drawHeight);\n  var params = data.params,\n      size = 2048;\n\n  // 如果当期size大于2M，按比例修正到2M以下\n  if (maxSide > size) {\n    var minSide = Math.min(drawWidth, drawHeight);\n    minSide = minSide / maxSide * size;\n    maxSide = size;\n    if (drawWidth > drawHeight) {\n      drawWidth = maxSide;\n      drawHeight = minSide;\n    } else {\n      drawWidth = minSide;\n      drawHeight = maxSide;\n    }\n  }\n  // 使用离屏canvas修正图片的方向\n  var canvas = document.createElement('canvas');\n  var width = drawWidth,\n      height = drawHeight;\n\n  var context = canvas.getContext('2d');\n  // 判断图片方向，重置canvas大小，确定旋转角度，iphone默认的是home键在右方的横屏拍摄方式\n  switch (params.data.Orientation) {\n    // iphone横屏拍摄，此时home键在左侧\n    case 3:\n      degree = 180;\n      drawWidth = -width;\n      drawHeight = -height;\n      break;\n    // iphone竖屏拍摄，此时home键在下方(正常拿手机的方向)\n    case 6:\n      canvas.width = height;\n      canvas.height = width;\n      degree = 90;\n      drawWidth = width;\n      drawHeight = -height;\n      break;\n    // iphone竖屏拍摄，此时home键在上方\n    case 8:\n      canvas.width = height;\n      canvas.height = width;\n      degree = 270;\n      drawWidth = -width;\n      drawHeight = height;\n      break;\n  }\n  /*\r\n   *返回参数\r\n   *degress: 渲染的方向\r\n   *drawWidth: 修正后的宽度\r\n   *.......\r\n  */\n  return {\n    degree: degree,\n    drawWidth: drawWidth,\n    drawHeight: drawHeight,\n    context: context,\n    canvas: canvas\n  };\n}\n\n// 获取处理好的图片数据\nfunction getImgData(params) {\n  cacheImg(params.img, function () {\n    // 以下改变一下图片大小\n    // 获取宽高中，最大的值\n    var output = computeWidthAndHeight({\n      drawWidth: params.data.PixelXDimension || this.naturalWidth,\n      drawHeight: params.data.PixelYDimension || this.naturalHeight,\n      params: params\n    });\n    // 使用canvas旋转校正\n    output.context.rotate(output.degree * Math.PI / 180);\n    // 渲染新的图片\n    output.context.drawImage(this, 0, 0, output.drawWidth, output.drawHeight);\n    // 生成校正后图片\n    params.next(output.canvas.toDataURL('image/png'));\n    output = null;\n  });\n}\n\n// 处理修正后的图片，渲染到屏幕上\nfunction uploadFileCallBack() {\n  // 获取图片的宽高\n  var w = this.width,\n      h = this.height;\n  // 缓存图片初始宽高\n  imgData.w = w;\n  imgData.h = h;\n  _opts2.default.imgData.w = w;\n  _opts2.default.imgData.h = h;\n  var cW = _opts2.default.canvasW,\n      cH = _opts2.default.canvasH;\n  if (cW / cH > w / h) {\n    // 宽大于高，高100%\n    w = w * cH / h;\n    h = cH;\n  } else {\n    // 高大于宽，宽100%\n    h = h * cW / w;\n    w = cW;\n  }\n  ctx.clearRect(0, 0, cW, cH);\n  // 生成图片，居中显示\n  ctx.drawImage(this, (cW - w) / 2, (cH - h) / 2, w, h);\n  // 缓存当前图片的数据到内存里\n  _opts2.default.data.imageData = ctx.getImageData((cW - w) / 2, (cH - h) / 2, w, h);\n  _opts2.default.data.img = this;\n  _opts2.default.data.imgPos = {\n    x: (cW - w) / 2,\n    y: (cH - h) / 2,\n    w: w,\n    h: h\n  };\n  showFun();\n}\n\n// 图片上传回调事件\nfunction uploadFile() {\n  var file = this.files[0];\n  var exifData = null;\n  // 判断图片是否过大\n  if (file.size / 1024 > 5000) {\n    // 大于2M\n    alert('图片过大，请选择相对较小的图片');\n    return false;\n  }\n  // 图片处理中，提示层出现\n  _opts2.default.showLoading('block');\n  var reader = new FileReader();\n  new Promise(function (resolve) {\n    // 获取图片的元数据\n    _exif2.default.getData(file, function () {\n      exifData = _exif2.default.getAllTags(this);\n      resolve();\n    });\n  }).then(function () {\n    reader.onload = function () {\n      // 图片信息获取完毕\n      // 修正图片方向\n      getImgData({\n        img: this.result,\n        data: exifData,\n        next: function next(img) {\n          cacheImg(img, uploadFileCallBack);\n        }\n      });\n    };\n    reader.readAsDataURL(file);\n  });\n}\n\n// 图片上传后，change事件\noFile.addEventListener('change', uploadFile, false);\n\n// 生成图片\noCreateBtn.addEventListener('touchstart', createImg, false);\n\n// 侧边栏显示\noAsideBtn.addEventListener('touchstart', function () {\n  if (!isCreatePic) {\n    alert('请先选择图片');\n    return false;\n  }\n  _opts2.default.isDraw = false;\n  oAside.style.display = 'block';\n});\n// 侧边栏隐藏\ndocument.querySelector('.aside_hideBtn').addEventListener('touchstart', function () {\n  _opts2.default.isDraw = true;\n  oAside.style.display = 'none';\n  _opts2.default.transform(document.querySelector('.colorPickerbox'), 'translateX(-1000px)');\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n(function () {\n\n    var debug = false;\n\n    var root = this;\n\n    var EXIF = function EXIF(obj) {\n        if (obj instanceof EXIF) return obj;\n        if (!(this instanceof EXIF)) return new EXIF(obj);\n        this.EXIFwrapped = obj;\n    };\n\n    if (true) {\n        if (typeof module !== 'undefined' && module.exports) {\n            exports = module.exports = EXIF;\n        }\n        exports.EXIF = EXIF;\n    } else {\n        root.EXIF = EXIF;\n    }\n\n    var ExifTags = EXIF.Tags = {\n\n        // version tags\n        0x9000: \"ExifVersion\", // EXIF version\n        0xA000: \"FlashpixVersion\", // Flashpix format version\n\n        // colorspace tags\n        0xA001: \"ColorSpace\", // Color space information tag\n\n        // image configuration\n        0xA002: \"PixelXDimension\", // Valid width of meaningful image\n        0xA003: \"PixelYDimension\", // Valid height of meaningful image\n        0x9101: \"ComponentsConfiguration\", // Information about channels\n        0x9102: \"CompressedBitsPerPixel\", // Compressed bits per pixel\n\n        // user information\n        0x927C: \"MakerNote\", // Any desired information written by the manufacturer\n        0x9286: \"UserComment\", // Comments by user\n\n        // related file\n        0xA004: \"RelatedSoundFile\", // Name of related sound file\n\n        // date and time\n        0x9003: \"DateTimeOriginal\", // Date and time when the original image was generated\n        0x9004: \"DateTimeDigitized\", // Date and time when the image was stored digitally\n        0x9290: \"SubsecTime\", // Fractions of seconds for DateTime\n        0x9291: \"SubsecTimeOriginal\", // Fractions of seconds for DateTimeOriginal\n        0x9292: \"SubsecTimeDigitized\", // Fractions of seconds for DateTimeDigitized\n\n        // picture-taking conditions\n        0x829A: \"ExposureTime\", // Exposure time (in seconds)\n        0x829D: \"FNumber\", // F number\n        0x8822: \"ExposureProgram\", // Exposure program\n        0x8824: \"SpectralSensitivity\", // Spectral sensitivity\n        0x8827: \"ISOSpeedRatings\", // ISO speed rating\n        0x8828: \"OECF\", // Optoelectric conversion factor\n        0x9201: \"ShutterSpeedValue\", // Shutter speed\n        0x9202: \"ApertureValue\", // Lens aperture\n        0x9203: \"BrightnessValue\", // Value of brightness\n        0x9204: \"ExposureBias\", // Exposure bias\n        0x9205: \"MaxApertureValue\", // Smallest F number of lens\n        0x9206: \"SubjectDistance\", // Distance to subject in meters\n        0x9207: \"MeteringMode\", // Metering mode\n        0x9208: \"LightSource\", // Kind of light source\n        0x9209: \"Flash\", // Flash status\n        0x9214: \"SubjectArea\", // Location and area of main subject\n        0x920A: \"FocalLength\", // Focal length of the lens in mm\n        0xA20B: \"FlashEnergy\", // Strobe energy in BCPS\n        0xA20C: \"SpatialFrequencyResponse\", //\n        0xA20E: \"FocalPlaneXResolution\", // Number of pixels in width direction per FocalPlaneResolutionUnit\n        0xA20F: \"FocalPlaneYResolution\", // Number of pixels in height direction per FocalPlaneResolutionUnit\n        0xA210: \"FocalPlaneResolutionUnit\", // Unit for measuring FocalPlaneXResolution and FocalPlaneYResolution\n        0xA214: \"SubjectLocation\", // Location of subject in image\n        0xA215: \"ExposureIndex\", // Exposure index selected on camera\n        0xA217: \"SensingMethod\", // Image sensor type\n        0xA300: \"FileSource\", // Image source (3 == DSC)\n        0xA301: \"SceneType\", // Scene type (1 == directly photographed)\n        0xA302: \"CFAPattern\", // Color filter array geometric pattern\n        0xA401: \"CustomRendered\", // Special processing\n        0xA402: \"ExposureMode\", // Exposure mode\n        0xA403: \"WhiteBalance\", // 1 = auto white balance, 2 = manual\n        0xA404: \"DigitalZoomRation\", // Digital zoom ratio\n        0xA405: \"FocalLengthIn35mmFilm\", // Equivalent foacl length assuming 35mm film camera (in mm)\n        0xA406: \"SceneCaptureType\", // Type of scene\n        0xA407: \"GainControl\", // Degree of overall image gain adjustment\n        0xA408: \"Contrast\", // Direction of contrast processing applied by camera\n        0xA409: \"Saturation\", // Direction of saturation processing applied by camera\n        0xA40A: \"Sharpness\", // Direction of sharpness processing applied by camera\n        0xA40B: \"DeviceSettingDescription\", //\n        0xA40C: \"SubjectDistanceRange\", // Distance to subject\n\n        // other tags\n        0xA005: \"InteroperabilityIFDPointer\",\n        0xA420: \"ImageUniqueID\" // Identifier assigned uniquely to each image\n    };\n\n    var TiffTags = EXIF.TiffTags = {\n        0x0100: \"ImageWidth\",\n        0x0101: \"ImageHeight\",\n        0x8769: \"ExifIFDPointer\",\n        0x8825: \"GPSInfoIFDPointer\",\n        0xA005: \"InteroperabilityIFDPointer\",\n        0x0102: \"BitsPerSample\",\n        0x0103: \"Compression\",\n        0x0106: \"PhotometricInterpretation\",\n        0x0112: \"Orientation\",\n        0x0115: \"SamplesPerPixel\",\n        0x011C: \"PlanarConfiguration\",\n        0x0212: \"YCbCrSubSampling\",\n        0x0213: \"YCbCrPositioning\",\n        0x011A: \"XResolution\",\n        0x011B: \"YResolution\",\n        0x0128: \"ResolutionUnit\",\n        0x0111: \"StripOffsets\",\n        0x0116: \"RowsPerStrip\",\n        0x0117: \"StripByteCounts\",\n        0x0201: \"JPEGInterchangeFormat\",\n        0x0202: \"JPEGInterchangeFormatLength\",\n        0x012D: \"TransferFunction\",\n        0x013E: \"WhitePoint\",\n        0x013F: \"PrimaryChromaticities\",\n        0x0211: \"YCbCrCoefficients\",\n        0x0214: \"ReferenceBlackWhite\",\n        0x0132: \"DateTime\",\n        0x010E: \"ImageDescription\",\n        0x010F: \"Make\",\n        0x0110: \"Model\",\n        0x0131: \"Software\",\n        0x013B: \"Artist\",\n        0x8298: \"Copyright\"\n    };\n\n    var GPSTags = EXIF.GPSTags = {\n        0x0000: \"GPSVersionID\",\n        0x0001: \"GPSLatitudeRef\",\n        0x0002: \"GPSLatitude\",\n        0x0003: \"GPSLongitudeRef\",\n        0x0004: \"GPSLongitude\",\n        0x0005: \"GPSAltitudeRef\",\n        0x0006: \"GPSAltitude\",\n        0x0007: \"GPSTimeStamp\",\n        0x0008: \"GPSSatellites\",\n        0x0009: \"GPSStatus\",\n        0x000A: \"GPSMeasureMode\",\n        0x000B: \"GPSDOP\",\n        0x000C: \"GPSSpeedRef\",\n        0x000D: \"GPSSpeed\",\n        0x000E: \"GPSTrackRef\",\n        0x000F: \"GPSTrack\",\n        0x0010: \"GPSImgDirectionRef\",\n        0x0011: \"GPSImgDirection\",\n        0x0012: \"GPSMapDatum\",\n        0x0013: \"GPSDestLatitudeRef\",\n        0x0014: \"GPSDestLatitude\",\n        0x0015: \"GPSDestLongitudeRef\",\n        0x0016: \"GPSDestLongitude\",\n        0x0017: \"GPSDestBearingRef\",\n        0x0018: \"GPSDestBearing\",\n        0x0019: \"GPSDestDistanceRef\",\n        0x001A: \"GPSDestDistance\",\n        0x001B: \"GPSProcessingMethod\",\n        0x001C: \"GPSAreaInformation\",\n        0x001D: \"GPSDateStamp\",\n        0x001E: \"GPSDifferential\"\n    };\n\n    var StringValues = EXIF.StringValues = {\n        ExposureProgram: {\n            0: \"Not defined\",\n            1: \"Manual\",\n            2: \"Normal program\",\n            3: \"Aperture priority\",\n            4: \"Shutter priority\",\n            5: \"Creative program\",\n            6: \"Action program\",\n            7: \"Portrait mode\",\n            8: \"Landscape mode\"\n        },\n        MeteringMode: {\n            0: \"Unknown\",\n            1: \"Average\",\n            2: \"CenterWeightedAverage\",\n            3: \"Spot\",\n            4: \"MultiSpot\",\n            5: \"Pattern\",\n            6: \"Partial\",\n            255: \"Other\"\n        },\n        LightSource: {\n            0: \"Unknown\",\n            1: \"Daylight\",\n            2: \"Fluorescent\",\n            3: \"Tungsten (incandescent light)\",\n            4: \"Flash\",\n            9: \"Fine weather\",\n            10: \"Cloudy weather\",\n            11: \"Shade\",\n            12: \"Daylight fluorescent (D 5700 - 7100K)\",\n            13: \"Day white fluorescent (N 4600 - 5400K)\",\n            14: \"Cool white fluorescent (W 3900 - 4500K)\",\n            15: \"White fluorescent (WW 3200 - 3700K)\",\n            17: \"Standard light A\",\n            18: \"Standard light B\",\n            19: \"Standard light C\",\n            20: \"D55\",\n            21: \"D65\",\n            22: \"D75\",\n            23: \"D50\",\n            24: \"ISO studio tungsten\",\n            255: \"Other\"\n        },\n        Flash: {\n            0x0000: \"Flash did not fire\",\n            0x0001: \"Flash fired\",\n            0x0005: \"Strobe return light not detected\",\n            0x0007: \"Strobe return light detected\",\n            0x0009: \"Flash fired, compulsory flash mode\",\n            0x000D: \"Flash fired, compulsory flash mode, return light not detected\",\n            0x000F: \"Flash fired, compulsory flash mode, return light detected\",\n            0x0010: \"Flash did not fire, compulsory flash mode\",\n            0x0018: \"Flash did not fire, auto mode\",\n            0x0019: \"Flash fired, auto mode\",\n            0x001D: \"Flash fired, auto mode, return light not detected\",\n            0x001F: \"Flash fired, auto mode, return light detected\",\n            0x0020: \"No flash function\",\n            0x0041: \"Flash fired, red-eye reduction mode\",\n            0x0045: \"Flash fired, red-eye reduction mode, return light not detected\",\n            0x0047: \"Flash fired, red-eye reduction mode, return light detected\",\n            0x0049: \"Flash fired, compulsory flash mode, red-eye reduction mode\",\n            0x004D: \"Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected\",\n            0x004F: \"Flash fired, compulsory flash mode, red-eye reduction mode, return light detected\",\n            0x0059: \"Flash fired, auto mode, red-eye reduction mode\",\n            0x005D: \"Flash fired, auto mode, return light not detected, red-eye reduction mode\",\n            0x005F: \"Flash fired, auto mode, return light detected, red-eye reduction mode\"\n        },\n        SensingMethod: {\n            1: \"Not defined\",\n            2: \"One-chip color area sensor\",\n            3: \"Two-chip color area sensor\",\n            4: \"Three-chip color area sensor\",\n            5: \"Color sequential area sensor\",\n            7: \"Trilinear sensor\",\n            8: \"Color sequential linear sensor\"\n        },\n        SceneCaptureType: {\n            0: \"Standard\",\n            1: \"Landscape\",\n            2: \"Portrait\",\n            3: \"Night scene\"\n        },\n        SceneType: {\n            1: \"Directly photographed\"\n        },\n        CustomRendered: {\n            0: \"Normal process\",\n            1: \"Custom process\"\n        },\n        WhiteBalance: {\n            0: \"Auto white balance\",\n            1: \"Manual white balance\"\n        },\n        GainControl: {\n            0: \"None\",\n            1: \"Low gain up\",\n            2: \"High gain up\",\n            3: \"Low gain down\",\n            4: \"High gain down\"\n        },\n        Contrast: {\n            0: \"Normal\",\n            1: \"Soft\",\n            2: \"Hard\"\n        },\n        Saturation: {\n            0: \"Normal\",\n            1: \"Low saturation\",\n            2: \"High saturation\"\n        },\n        Sharpness: {\n            0: \"Normal\",\n            1: \"Soft\",\n            2: \"Hard\"\n        },\n        SubjectDistanceRange: {\n            0: \"Unknown\",\n            1: \"Macro\",\n            2: \"Close view\",\n            3: \"Distant view\"\n        },\n        FileSource: {\n            3: \"DSC\"\n        },\n\n        Components: {\n            0: \"\",\n            1: \"Y\",\n            2: \"Cb\",\n            3: \"Cr\",\n            4: \"R\",\n            5: \"G\",\n            6: \"B\"\n        }\n    };\n\n    function addEvent(element, event, handler) {\n        if (element.addEventListener) {\n            element.addEventListener(event, handler, false);\n        } else if (element.attachEvent) {\n            element.attachEvent(\"on\" + event, handler);\n        }\n    }\n\n    function imageHasData(img) {\n        return !!img.exifdata;\n    }\n\n    function base64ToArrayBuffer(base64, contentType) {\n        contentType = contentType || base64.match(/^data\\:([^\\;]+)\\;base64,/mi)[1] || ''; // e.g. 'data:image/jpeg;base64,...' => 'image/jpeg'\n        base64 = base64.replace(/^data\\:([^\\;]+)\\;base64,/gmi, '');\n        var binary = atob(base64);\n        var len = binary.length;\n        var buffer = new ArrayBuffer(len);\n        var view = new Uint8Array(buffer);\n        for (var i = 0; i < len; i++) {\n            view[i] = binary.charCodeAt(i);\n        }\n        return buffer;\n    }\n\n    function objectURLToBlob(url, callback) {\n        var http = new XMLHttpRequest();\n        http.open(\"GET\", url, true);\n        http.responseType = \"blob\";\n        http.onload = function (e) {\n            if (this.status == 200 || this.status === 0) {\n                callback(this.response);\n            }\n        };\n        http.send();\n    }\n\n    function getImageData(img, callback) {\n        function handleBinaryFile(binFile) {\n            var data = findEXIFinJPEG(binFile);\n            var iptcdata = findIPTCinJPEG(binFile);\n            img.exifdata = data || {};\n            img.iptcdata = iptcdata || {};\n            if (callback) {\n                callback.call(img);\n            }\n        }\n\n        if (img.src) {\n            if (/^data\\:/i.test(img.src)) {\n                // Data URI\n                var arrayBuffer = base64ToArrayBuffer(img.src);\n                handleBinaryFile(arrayBuffer);\n            } else if (/^blob\\:/i.test(img.src)) {\n                // Object URL\n                var fileReader = new FileReader();\n                fileReader.onload = function (e) {\n                    handleBinaryFile(e.target.result);\n                };\n                objectURLToBlob(img.src, function (blob) {\n                    fileReader.readAsArrayBuffer(blob);\n                });\n            } else {\n                var http = new XMLHttpRequest();\n                http.onload = function () {\n                    if (this.status == 200 || this.status === 0) {\n                        handleBinaryFile(http.response);\n                    } else {\n                        throw \"Could not load image\";\n                    }\n                    http = null;\n                };\n                http.open(\"GET\", img.src, true);\n                http.responseType = \"arraybuffer\";\n                http.send(null);\n            }\n        } else if (window.FileReader && (img instanceof window.Blob || img instanceof window.File)) {\n            var fileReader = new FileReader();\n            fileReader.onload = function (e) {\n                if (debug) console.log(\"Got file of length \" + e.target.result.byteLength);\n                handleBinaryFile(e.target.result);\n            };\n\n            fileReader.readAsArrayBuffer(img);\n        }\n    }\n\n    function findEXIFinJPEG(file) {\n        var dataView = new DataView(file);\n\n        if (debug) console.log(\"Got file of length \" + file.byteLength);\n        if (dataView.getUint8(0) != 0xFF || dataView.getUint8(1) != 0xD8) {\n            if (debug) console.log(\"Not a valid JPEG\");\n            return false; // not a valid jpeg\n        }\n\n        var offset = 2,\n            length = file.byteLength,\n            marker;\n\n        while (offset < length) {\n            if (dataView.getUint8(offset) != 0xFF) {\n                if (debug) console.log(\"Not a valid marker at offset \" + offset + \", found: \" + dataView.getUint8(offset));\n                return false; // not a valid marker, something is wrong\n            }\n\n            marker = dataView.getUint8(offset + 1);\n            if (debug) console.log(marker);\n\n            // we could implement handling for other markers here,\n            // but we're only looking for 0xFFE1 for EXIF data\n\n            if (marker == 225) {\n                if (debug) console.log(\"Found 0xFFE1 marker\");\n\n                return readEXIFData(dataView, offset + 4, dataView.getUint16(offset + 2) - 2);\n\n                // offset += 2 + file.getShortAt(offset+2, true);\n            } else {\n                offset += 2 + dataView.getUint16(offset + 2);\n            }\n        }\n    }\n\n    function findIPTCinJPEG(file) {\n        var dataView = new DataView(file);\n\n        if (debug) console.log(\"Got file of length \" + file.byteLength);\n        if (dataView.getUint8(0) != 0xFF || dataView.getUint8(1) != 0xD8) {\n            if (debug) console.log(\"Not a valid JPEG\");\n            return false; // not a valid jpeg\n        }\n\n        var offset = 2,\n            length = file.byteLength;\n\n        var isFieldSegmentStart = function isFieldSegmentStart(dataView, offset) {\n            return dataView.getUint8(offset) === 0x38 && dataView.getUint8(offset + 1) === 0x42 && dataView.getUint8(offset + 2) === 0x49 && dataView.getUint8(offset + 3) === 0x4D && dataView.getUint8(offset + 4) === 0x04 && dataView.getUint8(offset + 5) === 0x04;\n        };\n\n        while (offset < length) {\n\n            if (isFieldSegmentStart(dataView, offset)) {\n\n                // Get the length of the name header (which is padded to an even number of bytes)\n                var nameHeaderLength = dataView.getUint8(offset + 7);\n                if (nameHeaderLength % 2 !== 0) nameHeaderLength += 1;\n                // Check for pre photoshop 6 format\n                if (nameHeaderLength === 0) {\n                    // Always 4\n                    nameHeaderLength = 4;\n                }\n\n                var startOffset = offset + 8 + nameHeaderLength;\n                var sectionLength = dataView.getUint16(offset + 6 + nameHeaderLength);\n\n                return readIPTCData(file, startOffset, sectionLength);\n\n                break;\n            }\n\n            // Not the marker, continue searching\n            offset++;\n        }\n    }\n    var IptcFieldMap = {\n        0x78: 'caption',\n        0x6E: 'credit',\n        0x19: 'keywords',\n        0x37: 'dateCreated',\n        0x50: 'byline',\n        0x55: 'bylineTitle',\n        0x7A: 'captionWriter',\n        0x69: 'headline',\n        0x74: 'copyright',\n        0x0F: 'category'\n    };\n    function readIPTCData(file, startOffset, sectionLength) {\n        var dataView = new DataView(file);\n        var data = {};\n        var fieldValue, fieldName, dataSize, segmentType, segmentSize;\n        var segmentStartPos = startOffset;\n        while (segmentStartPos < startOffset + sectionLength) {\n            if (dataView.getUint8(segmentStartPos) === 0x1C && dataView.getUint8(segmentStartPos + 1) === 0x02) {\n                segmentType = dataView.getUint8(segmentStartPos + 2);\n                if (segmentType in IptcFieldMap) {\n                    dataSize = dataView.getInt16(segmentStartPos + 3);\n                    segmentSize = dataSize + 5;\n                    fieldName = IptcFieldMap[segmentType];\n                    fieldValue = getStringFromDB(dataView, segmentStartPos + 5, dataSize);\n                    // Check if we already stored a value with this name\n                    if (data.hasOwnProperty(fieldName)) {\n                        // Value already stored with this name, create multivalue field\n                        if (data[fieldName] instanceof Array) {\n                            data[fieldName].push(fieldValue);\n                        } else {\n                            data[fieldName] = [data[fieldName], fieldValue];\n                        }\n                    } else {\n                        data[fieldName] = fieldValue;\n                    }\n                }\n            }\n            segmentStartPos++;\n        }\n        return data;\n    }\n\n    function readTags(file, tiffStart, dirStart, strings, bigEnd) {\n        var entries = file.getUint16(dirStart, !bigEnd),\n            tags = {},\n            entryOffset,\n            tag,\n            i;\n\n        for (i = 0; i < entries; i++) {\n            entryOffset = dirStart + i * 12 + 2;\n            tag = strings[file.getUint16(entryOffset, !bigEnd)];\n            if (!tag && debug) console.log(\"Unknown tag: \" + file.getUint16(entryOffset, !bigEnd));\n            tags[tag] = readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd);\n        }\n        return tags;\n    }\n\n    function readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd) {\n        var type = file.getUint16(entryOffset + 2, !bigEnd),\n            numValues = file.getUint32(entryOffset + 4, !bigEnd),\n            valueOffset = file.getUint32(entryOffset + 8, !bigEnd) + tiffStart,\n            offset,\n            vals,\n            val,\n            n,\n            numerator,\n            denominator;\n\n        switch (type) {\n            case 1: // byte, 8-bit unsigned int\n            case 7:\n                // undefined, 8-bit byte, value depending on field\n                if (numValues == 1) {\n                    return file.getUint8(entryOffset + 8, !bigEnd);\n                } else {\n                    offset = numValues > 4 ? valueOffset : entryOffset + 8;\n                    vals = [];\n                    for (n = 0; n < numValues; n++) {\n                        vals[n] = file.getUint8(offset + n);\n                    }\n                    return vals;\n                }\n\n            case 2:\n                // ascii, 8-bit byte\n                offset = numValues > 4 ? valueOffset : entryOffset + 8;\n                return getStringFromDB(file, offset, numValues - 1);\n\n            case 3:\n                // short, 16 bit int\n                if (numValues == 1) {\n                    return file.getUint16(entryOffset + 8, !bigEnd);\n                } else {\n                    offset = numValues > 2 ? valueOffset : entryOffset + 8;\n                    vals = [];\n                    for (n = 0; n < numValues; n++) {\n                        vals[n] = file.getUint16(offset + 2 * n, !bigEnd);\n                    }\n                    return vals;\n                }\n\n            case 4:\n                // long, 32 bit int\n                if (numValues == 1) {\n                    return file.getUint32(entryOffset + 8, !bigEnd);\n                } else {\n                    vals = [];\n                    for (n = 0; n < numValues; n++) {\n                        vals[n] = file.getUint32(valueOffset + 4 * n, !bigEnd);\n                    }\n                    return vals;\n                }\n\n            case 5:\n                // rational = two long values, first is numerator, second is denominator\n                if (numValues == 1) {\n                    numerator = file.getUint32(valueOffset, !bigEnd);\n                    denominator = file.getUint32(valueOffset + 4, !bigEnd);\n                    val = new Number(numerator / denominator);\n                    val.numerator = numerator;\n                    val.denominator = denominator;\n                    return val;\n                } else {\n                    vals = [];\n                    for (n = 0; n < numValues; n++) {\n                        numerator = file.getUint32(valueOffset + 8 * n, !bigEnd);\n                        denominator = file.getUint32(valueOffset + 4 + 8 * n, !bigEnd);\n                        vals[n] = new Number(numerator / denominator);\n                        vals[n].numerator = numerator;\n                        vals[n].denominator = denominator;\n                    }\n                    return vals;\n                }\n\n            case 9:\n                // slong, 32 bit signed int\n                if (numValues == 1) {\n                    return file.getInt32(entryOffset + 8, !bigEnd);\n                } else {\n                    vals = [];\n                    for (n = 0; n < numValues; n++) {\n                        vals[n] = file.getInt32(valueOffset + 4 * n, !bigEnd);\n                    }\n                    return vals;\n                }\n\n            case 10:\n                // signed rational, two slongs, first is numerator, second is denominator\n                if (numValues == 1) {\n                    return file.getInt32(valueOffset, !bigEnd) / file.getInt32(valueOffset + 4, !bigEnd);\n                } else {\n                    vals = [];\n                    for (n = 0; n < numValues; n++) {\n                        vals[n] = file.getInt32(valueOffset + 8 * n, !bigEnd) / file.getInt32(valueOffset + 4 + 8 * n, !bigEnd);\n                    }\n                    return vals;\n                }\n        }\n    }\n\n    function getStringFromDB(buffer, start, length) {\n        var outstr = \"\";\n        for (var n = start; n < start + length; n++) {\n            outstr += String.fromCharCode(buffer.getUint8(n));\n        }\n        return outstr;\n    }\n\n    function readEXIFData(file, start) {\n        if (getStringFromDB(file, start, 4) != \"Exif\") {\n            if (debug) console.log(\"Not valid EXIF data! \" + getStringFromDB(file, start, 4));\n            return false;\n        }\n\n        var bigEnd,\n            tags,\n            tag,\n            exifData,\n            gpsData,\n            tiffOffset = start + 6;\n\n        // test for TIFF validity and endianness\n        if (file.getUint16(tiffOffset) == 0x4949) {\n            bigEnd = false;\n        } else if (file.getUint16(tiffOffset) == 0x4D4D) {\n            bigEnd = true;\n        } else {\n            if (debug) console.log(\"Not valid TIFF data! (no 0x4949 or 0x4D4D)\");\n            return false;\n        }\n\n        if (file.getUint16(tiffOffset + 2, !bigEnd) != 0x002A) {\n            if (debug) console.log(\"Not valid TIFF data! (no 0x002A)\");\n            return false;\n        }\n\n        var firstIFDOffset = file.getUint32(tiffOffset + 4, !bigEnd);\n\n        if (firstIFDOffset < 0x00000008) {\n            if (debug) console.log(\"Not valid TIFF data! (First offset less than 8)\", file.getUint32(tiffOffset + 4, !bigEnd));\n            return false;\n        }\n\n        tags = readTags(file, tiffOffset, tiffOffset + firstIFDOffset, TiffTags, bigEnd);\n\n        if (tags.ExifIFDPointer) {\n            exifData = readTags(file, tiffOffset, tiffOffset + tags.ExifIFDPointer, ExifTags, bigEnd);\n            for (tag in exifData) {\n                switch (tag) {\n                    case \"LightSource\":\n                    case \"Flash\":\n                    case \"MeteringMode\":\n                    case \"ExposureProgram\":\n                    case \"SensingMethod\":\n                    case \"SceneCaptureType\":\n                    case \"SceneType\":\n                    case \"CustomRendered\":\n                    case \"WhiteBalance\":\n                    case \"GainControl\":\n                    case \"Contrast\":\n                    case \"Saturation\":\n                    case \"Sharpness\":\n                    case \"SubjectDistanceRange\":\n                    case \"FileSource\":\n                        exifData[tag] = StringValues[tag][exifData[tag]];\n                        break;\n\n                    case \"ExifVersion\":\n                    case \"FlashpixVersion\":\n                        exifData[tag] = String.fromCharCode(exifData[tag][0], exifData[tag][1], exifData[tag][2], exifData[tag][3]);\n                        break;\n\n                    case \"ComponentsConfiguration\":\n                        exifData[tag] = StringValues.Components[exifData[tag][0]] + StringValues.Components[exifData[tag][1]] + StringValues.Components[exifData[tag][2]] + StringValues.Components[exifData[tag][3]];\n                        break;\n                }\n                tags[tag] = exifData[tag];\n            }\n        }\n\n        if (tags.GPSInfoIFDPointer) {\n            gpsData = readTags(file, tiffOffset, tiffOffset + tags.GPSInfoIFDPointer, GPSTags, bigEnd);\n            for (tag in gpsData) {\n                switch (tag) {\n                    case \"GPSVersionID\":\n                        gpsData[tag] = gpsData[tag][0] + \".\" + gpsData[tag][1] + \".\" + gpsData[tag][2] + \".\" + gpsData[tag][3];\n                        break;\n                }\n                tags[tag] = gpsData[tag];\n            }\n        }\n\n        return tags;\n    }\n\n    EXIF.getData = function (img, callback) {\n        if ((img instanceof Image || img instanceof HTMLImageElement) && !img.complete) return false;\n\n        if (!imageHasData(img)) {\n            getImageData(img, callback);\n        } else {\n            if (callback) {\n                callback.call(img);\n            }\n        }\n        return true;\n    };\n\n    EXIF.getTag = function (img, tag) {\n        if (!imageHasData(img)) return;\n        return img.exifdata[tag];\n    };\n\n    EXIF.getIptcTag = function (img, tag) {\n        if (!imageHasData(img)) return;\n        return img.iptcdata[tag];\n    };\n\n    EXIF.getAllTags = function (img) {\n        if (!imageHasData(img)) return {};\n        var a,\n            data = img.exifdata,\n            tags = {};\n        for (a in data) {\n            if (data.hasOwnProperty(a)) {\n                tags[a] = data[a];\n            }\n        }\n        return tags;\n    };\n\n    EXIF.getAllIptcTags = function (img) {\n        if (!imageHasData(img)) return {};\n        var a,\n            data = img.iptcdata,\n            tags = {};\n        for (a in data) {\n            if (data.hasOwnProperty(a)) {\n                tags[a] = data[a];\n            }\n        }\n        return tags;\n    };\n\n    EXIF.pretty = function (img) {\n        if (!imageHasData(img)) return \"\";\n        var a,\n            data = img.exifdata,\n            strPretty = \"\";\n        for (a in data) {\n            if (data.hasOwnProperty(a)) {\n                if (_typeof(data[a]) == \"object\") {\n                    if (data[a] instanceof Number) {\n                        strPretty += a + \" : \" + data[a] + \" [\" + data[a].numerator + \"/\" + data[a].denominator + \"]\\r\\n\";\n                    } else {\n                        strPretty += a + \" : [\" + data[a].length + \" values]\\r\\n\";\n                    }\n                } else {\n                    strPretty += a + \" : \" + data[a] + \"\\r\\n\";\n                }\n            }\n        }\n        return strPretty;\n    };\n\n    EXIF.readFromBinaryFile = function (file) {\n        return findEXIFinJPEG(file);\n    };\n\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n            return EXIF;\n        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    }\n}).call(undefined);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nfunction ColorPicker(params) {\n  this.oBox = params.oBox; //最外层盒子\n  this.oBtnWrap = params.oBtnWrap; //按钮外层盒子\n  this.oCan = params.oCan; //画布\n  this.ctx = params.oCan.getContext('2d');\n\n  this.w = params.width; //画布的宽高\n  this.h = params.width;\n  this.lineW = 20; //外层颜色的厚度\n  this.r = this.w / 2; //外圆半径\n  this.r2 = this.r - this.lineW; //内圆半径\n  //内层颜色宽高,坐标\n  this.iW = (this.r2 - 5) / Math.cos(2 * Math.PI / 360 * 45);\n  this.iX = (this.w - this.iW) / 2;\n  //canvas的Left top值\n  this.where = ''; //点击时的位置\n  //属性\n  this.opts = {\n    insideX: 0,\n    insideY: 0\n  };\n  this.callback = params.callback;\n  this.bindMove = null;\n}\n\nColorPicker.prototype = {\n  init: function init() {\n    //初始化\n    this.oCan.width = this.w;\n    this.oCan.height = this.h;\n    //生成节点（内外层选择点）\n    this.oBtnWrap.innerHTML = '<div class=\"insideBtn\"></div><div class=\"outsideBtn\"></div>';\n    //两个颜色选择点\n    this.oInsideBtn = document.querySelector(\".insideBtn\");\n    this.oOutsideBtn = document.querySelector(\".outsideBtn\");\n    //按钮宽度\n    this.btnW = this.oInsideBtn.offsetWidth;\n\n    var x = this.w / 2,\n        y = this.h / 2,\n        _this = this,\n        r2 = this.r2;\n    //按钮位置初始化\n    this.transform(this.oInsideBtn, 'translate(' + (this.iW + this.iX - this.btnW) + 'px ,' + this.iX + 'px)');\n    this.transform(this.oOutsideBtn, 'translate(' + x + 'px ,' + 0 + 'px)');\n    this.opts.insideX = this.iW + this.iX - this.btnW;\n    this.opts.insideY = this.iX;\n    //生成外层颜色\n    this.createColorBg(x, y);\n\n    //生成内颜色\n    this.createInsideColor('red');\n    var move = _this.move.bind(this);\n    this.bindMove = this.move.bind(this);\n    //给予事件\n    //pc端\n    this.oBox.addEventListener('mousedown', this.addMove.bind(this), false);\n    this.oBox.addEventListener('mouseup', this.removeMove.bind(this), false);\n\n    //移动端\n    this.oCan.addEventListener('touchstart', this.addMove.bind(this), false);\n    this.oCan.addEventListener('touchend', this.removeMove.bind(this), false);\n  },\n  addMove: function addMove(e) {\n    //获取canvas的left ,top 位置\n    if (!this.oCan_left) {\n      var canPos = this.getElemPos(this.oCan);\n      this.oCan_left = canPos.x;\n      this.oCan_top = canPos.y;\n    }\n    //颜色初始化\n    this.move(e);\n    document.addEventListener('mousemove', this.bindMove, false);\n    document.addEventListener('touchmove', this.bindMove, false);\n  },\n  removeMove: function removeMove() {\n    console.log('out');\n    document.removeEventListener('mousemove', this.bindMove, false);\n    document.removeEventListener('touchmove', this.bindMove, false);\n  },\n  createColorBg: function createColorBg(x, y) {\n    //生成圆环颜色\n    var ctx = this.ctx;\n    for (var i = 0; i < 360; i += .1) {\n      //获取度数\n      var rad = i * (2 * Math.PI) / 360,\n          c_x = Math.cos(rad),\n          c_y = Math.sin(rad),\n          lineW = this.lineW;\n      ctx.strokeStyle = \"hsl(\" + i + \", 100%, 50%)\";\n      ctx.beginPath();\n      ctx.moveTo(x + (x - lineW) * c_x, y + (y - lineW) * c_y);\n      //求出另外两点坐标\n      ctx.lineTo(x + x * c_x, y + y * c_y);\n      ctx.stroke();\n      ctx.closePath();\n    }\n  },\n  createInsideColor: function createInsideColor(color) {\n    //生成内颜色\n    var ctx = this.ctx,\n        w = this.w,\n        h = this.h,\n        iW = this.iW,\n        iX = this.iX; //起点坐标\n    //清除指定区域\n    ctx.clearRect(iX, iX, iW, iW);\n    ctx.fillStyle = color;\n    ctx.fillRect(iX, iX, iW, iW);\n    //白色\n    var g = ctx.createLinearGradient(iX, (iX + iW) / 2, iX + iW, (iX + iW) / 2);\n    g.addColorStop(0, \"#FFFFFF\");\n    g.addColorStop(1, \"rgba(255,255,255,0)\");\n    ctx.fillStyle = g;\n    ctx.fillRect(iX, iX, iW, iW);\n\n    //黑色\n    var g = ctx.createLinearGradient(iX, iX + iW, iX, iX);\n    g.addColorStop(0, \"#000000\");\n    g.addColorStop(1, \"rgba(0,0,0,0)\");\n    ctx.fillStyle = g;\n    ctx.fillRect(iX, iX, iW, iW);\n  },\n  move: function move(e) {\n    //移动事件\n    var t = e.touches ? e.touches[0] : e,\n        x = t.pageX - this.oCan_left,\n        y = t.pageY - this.oCan_top;\n    var pos = this.btnPosition(x, y);\n    if (!pos) {\n      return false;\n    }\n\n    var where = this.where,\n        color = '';\n    this.transform(where === 'outside' ? this.oOutsideBtn : this.oInsideBtn, 'translate(' + pos.x + 'px ,' + pos.y + 'px)');\n    color = this.getColor(pos.x, pos.y);\n    if (where === 'outside') {\n      //如果是外层，改变内层颜色\n      this.createInsideColor(color);\n      color = this.getColor(this.opts.insideX, this.opts.insideY);\n    }\n    this.callback && this.callback(color);\n  },\n  btnPosition: function btnPosition(x, y) {\n    //判断外按钮位置\n    var w = this.w,\n        h = this.h,\n        iW = this.iW,\n        iX = this.iX;\n\n    //获取圆心到点的距离\n    var d = Math.sqrt(Math.pow(x - w / 2, 2) + Math.pow(y - h / 2, 2));\n    //判断在内层颜色内\n    if (x > iX && x < iX + iW && y > iX && y < iX + iW) {\n      this.where = 'inside';\n    } else if (d >= this.r2 && d <= this.r) {\n      //判断在外层颜色内\n      this.where = 'outside';\n    } else {\n      console.log('no');\n      return false;\n    }\n    var where = this.where,\n        btnW = this.btnW,\n        btnW2 = btnW / 2;\n    //计算是否有超出\n    if (where === 'outside') {\n      if (x < btnW2) {\n        x = 0;\n      } else if (x > w - btnW2) {\n        x = w - btnW;\n      }\n      if (y < btnW2) {\n        y = 0;\n      } else if (y > h - btnW2) {\n        y = h - btnW;\n      }\n    } else {\n      var x1 = iX - btnW2,\n          y1 = iW + iX - btnW2,\n          y2 = iW + iX - btnW;\n      if (x < x1) {\n        x = iX;\n      } else if (x > y1) {\n        x = y2;\n      }\n      if (y < x1) {\n        y = iX;\n      } else if (y > y1) {\n        y = y2;\n      }\n\n      this.opts.insideX = x;\n      this.opts.insideY = y;\n    }\n    return {\n      x: x,\n      y: y\n    };\n  },\n  transform: function transform(obj, data) {\n    obj.style.WebkitTransform = data;\n    obj.style.transform = data;\n  },\n  getColor: function getColor(x, y) {\n    var pixel = this.ctx.getImageData(x, y, 1, 1),\n        data = pixel.data,\n        rgb = 'rgb(' + data[0] + ',' + data[1] + ',' + data[2] + ')';\n    return rgb;\n  },\n  getElemPos: function getElemPos(obj) {\n    //获取目标，到最外层的offsetLeft和offsetTop\n    var pos = {\n      \"top\": 0,\n      \"left\": 0\n    };\n    if (obj.offsetParent) {\n      while (obj.offsetParent) {\n        pos.top += obj.offsetTop;\n        pos.left += obj.offsetLeft;\n        obj = obj.offsetParent;\n      }\n    } else if (obj.x) {\n      pos.left += obj.x;\n    } else if (obj.x) {\n      pos.top += obj.y;\n    }\n    return {\n      x: pos.left,\n      y: pos.top\n    };\n  }\n};\n\nexports.default = ColorPicker;\n\n//声明模块\n// if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n//   define(function() {\n//     return ColorPicker;\n//   });\n// } else if (typeof module !== 'undefined' && module.exports) {\n//   module.exports.ColorPicker = ColorPicker;\n// } else {\n//   window.ColorPicker = ColorPicker;\n// }\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar ImageFilters = {};\nImageFilters.utils = {\n    initSampleCanvas: function initSampleCanvas() {\n        var _canvas = document.createElement('canvas'),\n            _context = _canvas.getContext('2d');\n\n        _canvas.width = 0;\n        _canvas.height = 0;\n\n        this.getSampleCanvas = function () {\n            return _canvas;\n        };\n        this.getSampleContext = function () {\n            return _context;\n        };\n        this.createImageData = _context.createImageData ? function (w, h) {\n            return _context.createImageData(w, h);\n        } : function (w, h) {\n            return new ImageData(w, h);\n        };\n    },\n    getSampleCanvas: function getSampleCanvas() {\n        this.initSampleCanvas();\n        return this.getSampleCanvas();\n    },\n    getSampleContext: function getSampleContext() {\n        this.initSampleCanvas();\n        return this.getSampleContext();\n    },\n    createImageData: function createImageData(w, h) {\n        this.initSampleCanvas();\n        return this.createImageData(w, h);\n    },\n    clamp: function clamp(value) {\n        return value > 255 ? 255 : value < 0 ? 0 : value;\n    },\n    buildMap: function buildMap(f) {\n        for (var m = [], k = 0, v; k < 256; k += 1) {\n            m[k] = (v = f(k)) > 255 ? 255 : v < 0 ? 0 : v | 0;\n        }\n        return m;\n    },\n    applyMap: function applyMap(src, dst, map) {\n        for (var i = 0, l = src.length; i < l; i += 4) {\n            dst[i] = map[src[i]];\n            dst[i + 1] = map[src[i + 1]];\n            dst[i + 2] = map[src[i + 2]];\n            dst[i + 3] = src[i + 3];\n        }\n    },\n    mapRGB: function mapRGB(src, dst, func) {\n        this.applyMap(src, dst, this.buildMap(func));\n    },\n    getPixelIndex: function getPixelIndex(x, y, width, height, edge) {\n        if (x < 0 || x >= width || y < 0 || y >= height) {\n            switch (edge) {\n                case 1:\n                    // clamp\n                    x = x < 0 ? 0 : x >= width ? width - 1 : x;\n                    y = y < 0 ? 0 : y >= height ? height - 1 : y;\n                    break;\n                case 2:\n                    // wrap\n                    x = (x %= width) < 0 ? x + width : x;\n                    y = (y %= height) < 0 ? y + height : y;\n                    break;\n                default:\n                    // transparent\n                    return null;\n            }\n        }\n        return y * width + x << 2;\n    },\n    getPixel: function getPixel(src, x, y, width, height, edge) {\n        if (x < 0 || x >= width || y < 0 || y >= height) {\n            switch (edge) {\n                case 1:\n                    // clamp\n                    x = x < 0 ? 0 : x >= width ? width - 1 : x;\n                    y = y < 0 ? 0 : y >= height ? height - 1 : y;\n                    break;\n                case 2:\n                    // wrap\n                    x = (x %= width) < 0 ? x + width : x;\n                    y = (y %= height) < 0 ? y + height : y;\n                    break;\n                default:\n                    // transparent\n                    return 0;\n            }\n        }\n\n        var i = y * width + x << 2;\n\n        // ARGB\n        return src[i + 3] << 24 | src[i] << 16 | src[i + 1] << 8 | src[i + 2];\n    },\n    getPixelByIndex: function getPixelByIndex(src, i) {\n        return src[i + 3] << 24 | src[i] << 16 | src[i + 1] << 8 | src[i + 2];\n    },\n    /**\r\n     * one of the most important functions in this library.\r\n     * I want to make this as fast as possible.\r\n     */\n    copyBilinear: function copyBilinear(src, x, y, width, height, dst, dstIndex, edge) {\n        var fx = x < 0 ? x - 1 | 0 : x | 0,\n            // Math.floor(x)\n        fy = y < 0 ? y - 1 | 0 : y | 0,\n            // Math.floor(y)\n        wx = x - fx,\n            wy = y - fy,\n            i,\n            nw = 0,\n            ne = 0,\n            sw = 0,\n            se = 0,\n            cx,\n            cy,\n            r,\n            g,\n            b,\n            a;\n\n        if (fx >= 0 && fx < width - 1 && fy >= 0 && fy < height - 1) {\n            // in bounds, no edge actions required\n            i = fy * width + fx << 2;\n\n            if (wx || wy) {\n                nw = src[i + 3] << 24 | src[i] << 16 | src[i + 1] << 8 | src[i + 2];\n\n                i += 4;\n                ne = src[i + 3] << 24 | src[i] << 16 | src[i + 1] << 8 | src[i + 2];\n\n                i = i - 8 + (width << 2);\n                sw = src[i + 3] << 24 | src[i] << 16 | src[i + 1] << 8 | src[i + 2];\n\n                i += 4;\n                se = src[i + 3] << 24 | src[i] << 16 | src[i + 1] << 8 | src[i + 2];\n            } else {\n                // no interpolation required\n                dst[dstIndex] = src[i];\n                dst[dstIndex + 1] = src[i + 1];\n                dst[dstIndex + 2] = src[i + 2];\n                dst[dstIndex + 3] = src[i + 3];\n                return;\n            }\n        } else {\n            // edge actions required\n            nw = this.getPixel(src, fx, fy, width, height, edge);\n\n            if (wx || wy) {\n                ne = this.getPixel(src, fx + 1, fy, width, height, edge);\n                sw = this.getPixel(src, fx, fy + 1, width, height, edge);\n                se = this.getPixel(src, fx + 1, fy + 1, width, height, edge);\n            } else {\n                // no interpolation required\n                dst[dstIndex] = nw >> 16 & 0xFF;\n                dst[dstIndex + 1] = nw >> 8 & 0xFF;\n                dst[dstIndex + 2] = nw & 0xFF;\n                dst[dstIndex + 3] = nw >> 24 & 0xFF;\n                return;\n            }\n        }\n\n        cx = 1 - wx;\n        cy = 1 - wy;\n        r = ((nw >> 16 & 0xFF) * cx + (ne >> 16 & 0xFF) * wx) * cy + ((sw >> 16 & 0xFF) * cx + (se >> 16 & 0xFF) * wx) * wy;\n        g = ((nw >> 8 & 0xFF) * cx + (ne >> 8 & 0xFF) * wx) * cy + ((sw >> 8 & 0xFF) * cx + (se >> 8 & 0xFF) * wx) * wy;\n        b = ((nw & 0xFF) * cx + (ne & 0xFF) * wx) * cy + ((sw & 0xFF) * cx + (se & 0xFF) * wx) * wy;\n        a = ((nw >> 24 & 0xFF) * cx + (ne >> 24 & 0xFF) * wx) * cy + ((sw >> 24 & 0xFF) * cx + (se >> 24 & 0xFF) * wx) * wy;\n\n        dst[dstIndex] = r > 255 ? 255 : r < 0 ? 0 : r | 0;\n        dst[dstIndex + 1] = g > 255 ? 255 : g < 0 ? 0 : g | 0;\n        dst[dstIndex + 2] = b > 255 ? 255 : b < 0 ? 0 : b | 0;\n        dst[dstIndex + 3] = a > 255 ? 255 : a < 0 ? 0 : a | 0;\n    },\n    /**\r\n     * @param r 0 <= n <= 255\r\n     * @param g 0 <= n <= 255\r\n     * @param b 0 <= n <= 255\r\n     * @return Array(h, s, l)\r\n     */\n    rgbToHsl: function rgbToHsl(r, g, b) {\n        r /= 255;\n        g /= 255;\n        b /= 255;\n\n        //        var max = Math.max(r, g, b),\n        //            min = Math.min(r, g, b),\n        var max = r > g ? r > b ? r : b : g > b ? g : b,\n            min = r < g ? r < b ? r : b : g < b ? g : b,\n            chroma = max - min,\n            h = 0,\n            s = 0,\n\n        // Lightness\n        l = (min + max) / 2;\n\n        if (chroma !== 0) {\n            // Hue\n            if (r === max) {\n                h = (g - b) / chroma + (g < b ? 6 : 0);\n            } else if (g === max) {\n                h = (b - r) / chroma + 2;\n            } else {\n                h = (r - g) / chroma + 4;\n            }\n            h /= 6;\n\n            // Saturation\n            s = l > 0.5 ? chroma / (2 - max - min) : chroma / (max + min);\n        }\n\n        return [h, s, l];\n    },\n    /**\r\n     * @param h 0.0 <= n <= 1.0\r\n     * @param s 0.0 <= n <= 1.0\r\n     * @param l 0.0 <= n <= 1.0\r\n     * @return Array(r, g, b)\r\n     */\n    hslToRgb: function hslToRgb(h, s, l) {\n        var m1,\n            m2,\n            hue,\n            r,\n            g,\n            b,\n            rgb = [];\n\n        if (s === 0) {\n            r = g = b = l * 255 + 0.5 | 0;\n            rgb = [r, g, b];\n        } else {\n            if (l <= 0.5) {\n                m2 = l * (s + 1);\n            } else {\n                m2 = l + s - l * s;\n            }\n\n            m1 = l * 2 - m2;\n            hue = h + 1 / 3;\n\n            var tmp;\n            for (var i = 0; i < 3; i += 1) {\n                if (hue < 0) {\n                    hue += 1;\n                } else if (hue > 1) {\n                    hue -= 1;\n                }\n\n                if (6 * hue < 1) {\n                    tmp = m1 + (m2 - m1) * hue * 6;\n                } else if (2 * hue < 1) {\n                    tmp = m2;\n                } else if (3 * hue < 2) {\n                    tmp = m1 + (m2 - m1) * (2 / 3 - hue) * 6;\n                } else {\n                    tmp = m1;\n                }\n\n                rgb[i] = tmp * 255 + 0.5 | 0;\n\n                hue -= 1 / 3;\n            }\n        }\n\n        return rgb;\n    }\n};\n\n// TODO\nImageFilters.Translate = function (srcImageData, x, y, interpolation) {};\nImageFilters.Scale = function (srcImageData, scaleX, scaleY, interpolation) {};\nImageFilters.Rotate = function (srcImageData, originX, originY, angle, resize, interpolation) {};\nImageFilters.Affine = function (srcImageData, matrix, resize, interpolation) {};\nImageFilters.UnsharpMask = function (srcImageData, level) {};\n\nImageFilters.ConvolutionFilter = function (srcImageData, matrixX, matrixY, matrix, divisor, bias, preserveAlpha, clamp, color, alpha) {\n    var srcPixels = srcImageData.data,\n        srcWidth = srcImageData.width,\n        srcHeight = srcImageData.height,\n        srcLength = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels = dstImageData.data;\n\n    divisor = divisor || 1;\n    bias = bias || 0;\n\n    // default true\n    preserveAlpha !== false && (preserveAlpha = true);\n    clamp !== false && (clamp = true);\n\n    color = color || 0;\n    alpha = alpha || 0;\n\n    var index = 0,\n        rows = matrixX >> 1,\n        cols = matrixY >> 1,\n        clampR = color >> 16 & 0xFF,\n        clampG = color >> 8 & 0xFF,\n        clampB = color & 0xFF,\n        clampA = alpha * 0xFF;\n\n    for (var y = 0; y < srcHeight; y += 1) {\n        for (var x = 0; x < srcWidth; x += 1, index += 4) {\n            var r = 0,\n                g = 0,\n                b = 0,\n                a = 0,\n                replace = false,\n                mIndex = 0,\n                v;\n\n            for (var row = -rows; row <= rows; row += 1) {\n                var rowIndex = y + row,\n                    offset;\n\n                if (0 <= rowIndex && rowIndex < srcHeight) {\n                    offset = rowIndex * srcWidth;\n                } else if (clamp) {\n                    offset = y * srcWidth;\n                } else {\n                    replace = true;\n                }\n\n                for (var col = -cols; col <= cols; col += 1) {\n                    var m = matrix[mIndex++];\n\n                    if (m !== 0) {\n                        var colIndex = x + col;\n\n                        if (!(0 <= colIndex && colIndex < srcWidth)) {\n                            if (clamp) {\n                                colIndex = x;\n                            } else {\n                                replace = true;\n                            }\n                        }\n\n                        if (replace) {\n                            r += m * clampR;\n                            g += m * clampG;\n                            b += m * clampB;\n                            a += m * clampA;\n                        } else {\n                            var p = offset + colIndex << 2;\n                            r += m * srcPixels[p];\n                            g += m * srcPixels[p + 1];\n                            b += m * srcPixels[p + 2];\n                            a += m * srcPixels[p + 3];\n                        }\n                    }\n                }\n            }\n\n            dstPixels[index] = (v = r / divisor + bias) > 255 ? 255 : v < 0 ? 0 : v | 0;\n            dstPixels[index + 1] = (v = g / divisor + bias) > 255 ? 255 : v < 0 ? 0 : v | 0;\n            dstPixels[index + 2] = (v = b / divisor + bias) > 255 ? 255 : v < 0 ? 0 : v | 0;\n            dstPixels[index + 3] = preserveAlpha ? srcPixels[index + 3] : (v = a / divisor + bias) > 255 ? 255 : v < 0 ? 0 : v | 0;\n        }\n    }\n\n    return dstImageData;\n};\n\n/**\r\n * @param threshold 0.0 <= n <= 1.0\r\n */\nImageFilters.Binarize = function (srcImageData, threshold) {\n    var srcPixels = srcImageData.data,\n        srcWidth = srcImageData.width,\n        srcHeight = srcImageData.height,\n        srcLength = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels = dstImageData.data;\n\n    if (isNaN(threshold)) {\n        threshold = 0.5;\n    }\n\n    threshold *= 255;\n\n    for (var i = 0; i < srcLength; i += 4) {\n        var avg = srcPixels[i] + srcPixels[i + 1] + srcPixels[i + 2] / 3;\n\n        dstPixels[i] = dstPixels[i + 1] = dstPixels[i + 2] = avg <= threshold ? 0 : 255;\n        dstPixels[i + 3] = 255;\n    }\n\n    return dstImageData;\n};\n\nImageFilters.BlendAdd = function (srcImageData, blendImageData, dx, dy) {\n    var srcPixels = srcImageData.data,\n        srcWidth = srcImageData.width,\n        srcHeight = srcImageData.height,\n        srcLength = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels = dstImageData.data,\n        blendPixels = blendImageData.data;\n\n    var v;\n\n    for (var i = 0; i < srcLength; i += 4) {\n        dstPixels[i] = (v = srcPixels[i] + blendPixels[i]) > 255 ? 255 : v;\n        dstPixels[i + 1] = (v = srcPixels[i + 1] + blendPixels[i + 1]) > 255 ? 255 : v;\n        dstPixels[i + 2] = (v = srcPixels[i + 2] + blendPixels[i + 2]) > 255 ? 255 : v;\n        dstPixels[i + 3] = 255;\n    }\n\n    return dstImageData;\n};\n\nImageFilters.BlendSubtract = function (srcImageData, blendImageData, dx, dy) {\n    var srcPixels = srcImageData.data,\n        srcWidth = srcImageData.width,\n        srcHeight = srcImageData.height,\n        srcLength = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels = dstImageData.data,\n        blendPixels = blendImageData.data;\n\n    var v;\n\n    for (var i = 0; i < srcLength; i += 4) {\n        dstPixels[i] = (v = srcPixels[i] - blendPixels[i]) < 0 ? 0 : v;\n        dstPixels[i + 1] = (v = srcPixels[i + 1] - blendPixels[i + 1]) < 0 ? 0 : v;\n        dstPixels[i + 2] = (v = srcPixels[i + 2] - blendPixels[i + 2]) < 0 ? 0 : v;\n        dstPixels[i + 3] = 255;\n    }\n\n    return dstImageData;\n};\n\n/**\r\n * Algorithm based on BoxBlurFilter.java by Huxtable.com\r\n * @see http://www.jhlabs.com/ip/blurring.html\r\n * Copyright 2005 Huxtable.com. All rights reserved.\r\n */\nImageFilters.BoxBlur = function () {\n    var blur = function blur(src, dst, width, height, radius) {\n        var tableSize = radius * 2 + 1;\n        var radiusPlus1 = radius + 1;\n        var widthMinus1 = width - 1;\n\n        var r, g, b, a;\n\n        var srcIndex = 0;\n        var dstIndex;\n        var p, next, prev;\n        var i, l, x, y, nextIndex, prevIndex;\n\n        var sumTable = [];\n        for (i = 0, l = 256 * tableSize; i < l; i += 1) {\n            sumTable[i] = i / tableSize | 0;\n        }\n\n        for (y = 0; y < height; y += 1) {\n            r = g = b = a = 0;\n            dstIndex = y;\n\n            p = srcIndex << 2;\n            r += radiusPlus1 * src[p];\n            g += radiusPlus1 * src[p + 1];\n            b += radiusPlus1 * src[p + 2];\n            a += radiusPlus1 * src[p + 3];\n\n            for (i = 1; i <= radius; i += 1) {\n                p = srcIndex + (i < width ? i : widthMinus1) << 2;\n                r += src[p];\n                g += src[p + 1];\n                b += src[p + 2];\n                a += src[p + 3];\n            }\n\n            for (x = 0; x < width; x += 1) {\n                p = dstIndex << 2;\n                dst[p] = sumTable[r];\n                dst[p + 1] = sumTable[g];\n                dst[p + 2] = sumTable[b];\n                dst[p + 3] = sumTable[a];\n\n                nextIndex = x + radiusPlus1;\n                if (nextIndex > widthMinus1) {\n                    nextIndex = widthMinus1;\n                }\n\n                prevIndex = x - radius;\n                if (prevIndex < 0) {\n                    prevIndex = 0;\n                }\n\n                next = srcIndex + nextIndex << 2;\n                prev = srcIndex + prevIndex << 2;\n\n                r += src[next] - src[prev];\n                g += src[next + 1] - src[prev + 1];\n                b += src[next + 2] - src[prev + 2];\n                a += src[next + 3] - src[prev + 3];\n\n                dstIndex += height;\n            }\n            srcIndex += width;\n        }\n    };\n\n    return function (srcImageData, hRadius, vRadius, quality) {\n        var srcPixels = srcImageData.data,\n            srcWidth = srcImageData.width,\n            srcHeight = srcImageData.height,\n            srcLength = srcPixels.length,\n            dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n            dstPixels = dstImageData.data,\n            tmpImageData = this.utils.createImageData(srcWidth, srcHeight),\n            tmpPixels = tmpImageData.data;\n\n        for (var i = 0; i < quality; i += 1) {\n            // only use the srcPixels on the first loop\n            blur(i ? dstPixels : srcPixels, tmpPixels, srcWidth, srcHeight, hRadius);\n            blur(tmpPixels, dstPixels, srcHeight, srcWidth, vRadius);\n        }\n\n        return dstImageData;\n    };\n}();\n\n/**\r\n * @ param strength 1 <= n <= 4\r\n */\nImageFilters.GaussianBlur = function (srcImageData, strength) {\n    var size, matrix, divisor;\n\n    switch (strength) {\n        case 2:\n            size = 5;\n            matrix = [1, 1, 2, 1, 1, 1, 2, 4, 2, 1, 2, 4, 8, 4, 2, 1, 2, 4, 2, 1, 1, 1, 2, 1, 1];\n            divisor = 52;\n            break;\n        case 3:\n            size = 7;\n            matrix = [1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 4, 2, 2, 1, 2, 2, 4, 8, 4, 2, 2, 2, 4, 8, 16, 8, 4, 2, 2, 2, 4, 8, 4, 2, 2, 1, 2, 2, 4, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1];\n            divisor = 140;\n            break;\n        case 4:\n            size = 15;\n            matrix = [2, 2, 3, 4, 5, 5, 6, 6, 6, 5, 5, 4, 3, 2, 2, 2, 3, 4, 5, 7, 7, 8, 8, 8, 7, 7, 5, 4, 3, 2, 3, 4, 6, 7, 9, 10, 10, 11, 10, 10, 9, 7, 6, 4, 3, 4, 5, 7, 9, 10, 12, 13, 13, 13, 12, 10, 9, 7, 5, 4, 5, 7, 9, 11, 13, 14, 15, 16, 15, 14, 13, 11, 9, 7, 5, 5, 7, 10, 12, 14, 16, 17, 18, 17, 16, 14, 12, 10, 7, 5, 6, 8, 10, 13, 15, 17, 19, 19, 19, 17, 15, 13, 10, 8, 6, 6, 8, 11, 13, 16, 18, 19, 20, 19, 18, 16, 13, 11, 8, 6, 6, 8, 10, 13, 15, 17, 19, 19, 19, 17, 15, 13, 10, 8, 6, 5, 7, 10, 12, 14, 16, 17, 18, 17, 16, 14, 12, 10, 7, 5, 5, 7, 9, 11, 13, 14, 15, 16, 15, 14, 13, 11, 9, 7, 5, 4, 5, 7, 9, 10, 12, 13, 13, 13, 12, 10, 9, 7, 5, 4, 3, 4, 6, 7, 9, 10, 10, 11, 10, 10, 9, 7, 6, 4, 3, 2, 3, 4, 5, 7, 7, 8, 8, 8, 7, 7, 5, 4, 3, 2, 2, 2, 3, 4, 5, 5, 6, 6, 6, 5, 5, 4, 3, 2, 2];\n            divisor = 2044;\n            break;\n        default:\n            size = 3;\n            matrix = [1, 2, 1, 2, 4, 2, 1, 2, 1];\n            divisor = 16;\n            break;\n    }\n    return this.ConvolutionFilter(srcImageData, size, size, matrix, divisor, 0, false);\n};\n\n/**\r\n * Stack Blur Algorithm by Mario Klingemann <mario@quasimondo.com>\r\n * @see http://incubator.quasimondo.com/processing/fast_blur_deluxe.php\r\n */\n/*\r\nCopyright (c) 2010 Mario Klingemann\r\n\r\nPermission is hereby granted, free of charge, to any person\r\nobtaining a copy of this software and associated documentation\r\nfiles (the \"Software\"), to deal in the Software without\r\nrestriction, including without limitation the rights to use,\r\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the\r\nSoftware is furnished to do so, subject to the following\r\nconditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\r\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\r\nOTHER DEALINGS IN THE SOFTWARE.\r\n*/\nImageFilters.StackBlur = function () {\n    var mul_table = [512, 512, 456, 512, 328, 456, 335, 512, 405, 328, 271, 456, 388, 335, 292, 512, 454, 405, 364, 328, 298, 271, 496, 456, 420, 388, 360, 335, 312, 292, 273, 512, 482, 454, 428, 405, 383, 364, 345, 328, 312, 298, 284, 271, 259, 496, 475, 456, 437, 420, 404, 388, 374, 360, 347, 335, 323, 312, 302, 292, 282, 273, 265, 512, 497, 482, 468, 454, 441, 428, 417, 405, 394, 383, 373, 364, 354, 345, 337, 328, 320, 312, 305, 298, 291, 284, 278, 271, 265, 259, 507, 496, 485, 475, 465, 456, 446, 437, 428, 420, 412, 404, 396, 388, 381, 374, 367, 360, 354, 347, 341, 335, 329, 323, 318, 312, 307, 302, 297, 292, 287, 282, 278, 273, 269, 265, 261, 512, 505, 497, 489, 482, 475, 468, 461, 454, 447, 441, 435, 428, 422, 417, 411, 405, 399, 394, 389, 383, 378, 373, 368, 364, 359, 354, 350, 345, 341, 337, 332, 328, 324, 320, 316, 312, 309, 305, 301, 298, 294, 291, 287, 284, 281, 278, 274, 271, 268, 265, 262, 259, 257, 507, 501, 496, 491, 485, 480, 475, 470, 465, 460, 456, 451, 446, 442, 437, 433, 428, 424, 420, 416, 412, 408, 404, 400, 396, 392, 388, 385, 381, 377, 374, 370, 367, 363, 360, 357, 354, 350, 347, 344, 341, 338, 335, 332, 329, 326, 323, 320, 318, 315, 312, 310, 307, 304, 302, 299, 297, 294, 292, 289, 287, 285, 282, 280, 278, 275, 273, 271, 269, 267, 265, 263, 261, 259];\n\n    var shg_table = [9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24];\n\n    function BlurStack() {\n        this.r = 0;\n        this.g = 0;\n        this.b = 0;\n        this.a = 0;\n        this.next = null;\n    }\n\n    return function (srcImageData, radius) {\n        var srcPixels = srcImageData.data,\n            srcWidth = srcImageData.width,\n            srcHeight = srcImageData.height,\n            srcLength = srcPixels.length,\n            dstImageData = this.Clone(srcImageData),\n            dstPixels = dstImageData.data;\n\n        var x,\n            y,\n            i,\n            p,\n            yp,\n            yi,\n            yw,\n            r_sum,\n            g_sum,\n            b_sum,\n            a_sum,\n            r_out_sum,\n            g_out_sum,\n            b_out_sum,\n            a_out_sum,\n            r_in_sum,\n            g_in_sum,\n            b_in_sum,\n            a_in_sum,\n            pr,\n            pg,\n            pb,\n            pa,\n            rbs,\n            div = radius + radius + 1,\n            w4 = srcWidth << 2,\n            widthMinus1 = srcWidth - 1,\n            heightMinus1 = srcHeight - 1,\n            radiusPlus1 = radius + 1,\n            sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2,\n            stackStart = new BlurStack(),\n            stack = stackStart,\n            stackIn,\n            stackOut,\n            stackEnd,\n            mul_sum = mul_table[radius],\n            shg_sum = shg_table[radius];\n\n        for (i = 1; i < div; i += 1) {\n            stack = stack.next = new BlurStack();\n            if (i == radiusPlus1) {\n                stackEnd = stack;\n            }\n        }\n\n        stack.next = stackStart;\n        yw = yi = 0;\n\n        for (y = 0; y < srcHeight; y += 1) {\n            r_in_sum = g_in_sum = b_in_sum = a_in_sum = r_sum = g_sum = b_sum = a_sum = 0;\n\n            r_out_sum = radiusPlus1 * (pr = dstPixels[yi]);\n            g_out_sum = radiusPlus1 * (pg = dstPixels[yi + 1]);\n            b_out_sum = radiusPlus1 * (pb = dstPixels[yi + 2]);\n            a_out_sum = radiusPlus1 * (pa = dstPixels[yi + 3]);\n\n            r_sum += sumFactor * pr;\n            g_sum += sumFactor * pg;\n            b_sum += sumFactor * pb;\n            a_sum += sumFactor * pa;\n\n            stack = stackStart;\n\n            for (i = 0; i < radiusPlus1; i += 1) {\n                stack.r = pr;\n                stack.g = pg;\n                stack.b = pb;\n                stack.a = pa;\n                stack = stack.next;\n            }\n\n            for (i = 1; i < radiusPlus1; i += 1) {\n                p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);\n                r_sum += (stack.r = pr = dstPixels[p]) * (rbs = radiusPlus1 - i);\n                g_sum += (stack.g = pg = dstPixels[p + 1]) * rbs;\n                b_sum += (stack.b = pb = dstPixels[p + 2]) * rbs;\n                a_sum += (stack.a = pa = dstPixels[p + 3]) * rbs;\n\n                r_in_sum += pr;\n                g_in_sum += pg;\n                b_in_sum += pb;\n                a_in_sum += pa;\n\n                stack = stack.next;\n            }\n\n            stackIn = stackStart;\n            stackOut = stackEnd;\n\n            for (x = 0; x < srcWidth; x += 1) {\n                dstPixels[yi] = r_sum * mul_sum >> shg_sum;\n                dstPixels[yi + 1] = g_sum * mul_sum >> shg_sum;\n                dstPixels[yi + 2] = b_sum * mul_sum >> shg_sum;\n                dstPixels[yi + 3] = a_sum * mul_sum >> shg_sum;\n\n                r_sum -= r_out_sum;\n                g_sum -= g_out_sum;\n                b_sum -= b_out_sum;\n                a_sum -= a_out_sum;\n\n                r_out_sum -= stackIn.r;\n                g_out_sum -= stackIn.g;\n                b_out_sum -= stackIn.b;\n                a_out_sum -= stackIn.a;\n\n                p = yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1) << 2;\n\n                r_in_sum += stackIn.r = dstPixels[p];\n                g_in_sum += stackIn.g = dstPixels[p + 1];\n                b_in_sum += stackIn.b = dstPixels[p + 2];\n                a_in_sum += stackIn.a = dstPixels[p + 3];\n\n                r_sum += r_in_sum;\n                g_sum += g_in_sum;\n                b_sum += b_in_sum;\n                a_sum += a_in_sum;\n\n                stackIn = stackIn.next;\n\n                r_out_sum += pr = stackOut.r;\n                g_out_sum += pg = stackOut.g;\n                b_out_sum += pb = stackOut.b;\n                a_out_sum += pa = stackOut.a;\n\n                r_in_sum -= pr;\n                g_in_sum -= pg;\n                b_in_sum -= pb;\n                a_in_sum -= pa;\n\n                stackOut = stackOut.next;\n\n                yi += 4;\n            }\n\n            yw += srcWidth;\n        }\n\n        for (x = 0; x < srcWidth; x += 1) {\n            g_in_sum = b_in_sum = a_in_sum = r_in_sum = g_sum = b_sum = a_sum = r_sum = 0;\n\n            yi = x << 2;\n            r_out_sum = radiusPlus1 * (pr = dstPixels[yi]);\n            g_out_sum = radiusPlus1 * (pg = dstPixels[yi + 1]);\n            b_out_sum = radiusPlus1 * (pb = dstPixels[yi + 2]);\n            a_out_sum = radiusPlus1 * (pa = dstPixels[yi + 3]);\n\n            r_sum += sumFactor * pr;\n            g_sum += sumFactor * pg;\n            b_sum += sumFactor * pb;\n            a_sum += sumFactor * pa;\n\n            stack = stackStart;\n\n            for (i = 0; i < radiusPlus1; i += 1) {\n                stack.r = pr;\n                stack.g = pg;\n                stack.b = pb;\n                stack.a = pa;\n                stack = stack.next;\n            }\n\n            yp = srcWidth;\n\n            for (i = 1; i <= radius; i += 1) {\n                yi = yp + x << 2;\n\n                r_sum += (stack.r = pr = dstPixels[yi]) * (rbs = radiusPlus1 - i);\n                g_sum += (stack.g = pg = dstPixels[yi + 1]) * rbs;\n                b_sum += (stack.b = pb = dstPixels[yi + 2]) * rbs;\n                a_sum += (stack.a = pa = dstPixels[yi + 3]) * rbs;\n\n                r_in_sum += pr;\n                g_in_sum += pg;\n                b_in_sum += pb;\n                a_in_sum += pa;\n\n                stack = stack.next;\n\n                if (i < heightMinus1) {\n                    yp += srcWidth;\n                }\n            }\n\n            yi = x;\n            stackIn = stackStart;\n            stackOut = stackEnd;\n\n            for (y = 0; y < srcHeight; y += 1) {\n                p = yi << 2;\n                dstPixels[p] = r_sum * mul_sum >> shg_sum;\n                dstPixels[p + 1] = g_sum * mul_sum >> shg_sum;\n                dstPixels[p + 2] = b_sum * mul_sum >> shg_sum;\n                dstPixels[p + 3] = a_sum * mul_sum >> shg_sum;\n\n                r_sum -= r_out_sum;\n                g_sum -= g_out_sum;\n                b_sum -= b_out_sum;\n                a_sum -= a_out_sum;\n\n                r_out_sum -= stackIn.r;\n                g_out_sum -= stackIn.g;\n                b_out_sum -= stackIn.b;\n                a_out_sum -= stackIn.a;\n\n                p = x + ((p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1) * srcWidth << 2;\n\n                r_sum += r_in_sum += stackIn.r = dstPixels[p];\n                g_sum += g_in_sum += stackIn.g = dstPixels[p + 1];\n                b_sum += b_in_sum += stackIn.b = dstPixels[p + 2];\n                a_sum += a_in_sum += stackIn.a = dstPixels[p + 3];\n\n                stackIn = stackIn.next;\n\n                r_out_sum += pr = stackOut.r;\n                g_out_sum += pg = stackOut.g;\n                b_out_sum += pb = stackOut.b;\n                a_out_sum += pa = stackOut.a;\n\n                r_in_sum -= pr;\n                g_in_sum -= pg;\n                b_in_sum -= pb;\n                a_in_sum -= pa;\n\n                stackOut = stackOut.next;\n\n                yi += srcWidth;\n            }\n        }\n\n        return dstImageData;\n    };\n}();\n\n/**\r\n * TV based algorithm\r\n */\nImageFilters.Brightness = function (srcImageData, brightness) {\n    var srcPixels = srcImageData.data,\n        srcWidth = srcImageData.width,\n        srcHeight = srcImageData.height,\n        srcLength = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels = dstImageData.data;\n\n    this.utils.mapRGB(srcPixels, dstPixels, function (value) {\n        value += brightness;\n        return value > 255 ? 255 : value;\n    });\n\n    return dstImageData;\n};\n\n/**\r\n * GIMP algorithm modified. pretty close to fireworks\r\n * @param brightness -100 <= n <= 100\r\n * @param contrast -100 <= n <= 100\r\n */\nImageFilters.BrightnessContrastGimp = function (srcImageData, brightness, contrast) {\n    var srcPixels = srcImageData.data,\n        srcWidth = srcImageData.width,\n        srcHeight = srcImageData.height,\n        srcLength = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels = dstImageData.data,\n        p4 = Math.PI / 4;\n\n    // fix to -1 <= n <= 1\n    brightness /= 100;\n\n    // fix to -99 <= n <= 99\n    contrast *= 0.99;\n    // fix to -1 < n < 1\n    contrast /= 100;\n    // apply GIMP formula\n    contrast = Math.tan((contrast + 1) * p4);\n\n    // get the average color\n    for (var avg = 0, i = 0; i < srcLength; i += 4) {\n        avg += srcPixels[i] * 19595 + srcPixels[i + 1] * 38470 + srcPixels[i + 2] * 7471 >> 16;\n    }\n    avg = avg / (srcLength / 4);\n\n    this.utils.mapRGB(srcPixels, dstPixels, function (value) {\n        if (brightness < 0) {\n            value = value * (1 + brightness);\n        } else if (brightness > 0) {\n            value = value + (255 - value) * brightness;\n        }\n        //value += brightness;\n\n        if (contrast !== 0) {\n            value = (value - avg) * contrast + avg;\n        }\n        return value + 0.5 | 0;\n    });\n    return dstImageData;\n};\n\n/**\r\n * more like the new photoshop algorithm\r\n * @param brightness -100 <= n <= 100\r\n * @param contrast -100 <= n <= 100\r\n */\nImageFilters.BrightnessContrastPhotoshop = function (srcImageData, brightness, contrast) {\n    var srcPixels = srcImageData.data,\n        srcWidth = srcImageData.width,\n        srcHeight = srcImageData.height,\n        srcLength = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels = dstImageData.data;\n\n    // fix to 0 <= n <= 2;\n    brightness = (brightness + 100) / 100;\n    contrast = (contrast + 100) / 100;\n\n    this.utils.mapRGB(srcPixels, dstPixels, function (value) {\n        value *= brightness;\n        value = (value - 127.5) * contrast + 127.5;\n        return value + 0.5 | 0;\n    });\n    return dstImageData;\n};\n\nImageFilters.Channels = function (srcImageData, channel) {\n    var matrix;\n\n    switch (channel) {\n        case 2:\n            // green\n            matrix = [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0];\n            break;\n        case 3:\n            // blue\n            matrix = [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0];\n            break;\n        default:\n            // red\n            matrix = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0];\n            break;\n\n    }\n\n    return this.ColorMatrixFilter(srcImageData, matrix);\n};\n\nImageFilters.Clone = function (srcImageData) {\n    return this.Copy(srcImageData, this.utils.createImageData(srcImageData.width, srcImageData.height));\n};\n\n/**\r\n * slower\r\n */\nImageFilters.CloneBuiltin = function (srcImageData) {\n    var srcWidth = srcImageData.width,\n        srcHeight = srcImageData.height,\n        canvas = this.utils.getSampleCanvas(),\n        context = this.utils.getSampleContext(),\n        dstImageData;\n\n    canvas.width = srcWidth;\n    canvas.height = srcHeight;\n\n    context.putImageData(srcImageData, 0, 0);\n    dstImageData = context.getImageData(0, 0, srcWidth, srcHeight);\n\n    canvas.width = 0;\n    canvas.height = 0;\n\n    return dstImageData;\n};\n\nImageFilters.ColorMatrixFilter = function (srcImageData, matrix) {\n    var srcPixels = srcImageData.data,\n        srcWidth = srcImageData.width,\n        srcHeight = srcImageData.height,\n        srcLength = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels = dstImageData.data;\n\n    var m0 = matrix[0],\n        m1 = matrix[1],\n        m2 = matrix[2],\n        m3 = matrix[3],\n        m4 = matrix[4],\n        m5 = matrix[5],\n        m6 = matrix[6],\n        m7 = matrix[7],\n        m8 = matrix[8],\n        m9 = matrix[9],\n        m10 = matrix[10],\n        m11 = matrix[11],\n        m12 = matrix[12],\n        m13 = matrix[13],\n        m14 = matrix[14],\n        m15 = matrix[15],\n        m16 = matrix[16],\n        m17 = matrix[17],\n        m18 = matrix[18],\n        m19 = matrix[19];\n\n    var value, i, r, g, b, a;\n    for (i = 0; i < srcLength; i += 4) {\n        r = srcPixels[i];\n        g = srcPixels[i + 1];\n        b = srcPixels[i + 2];\n        a = srcPixels[i + 3];\n\n        dstPixels[i] = (value = r * m0 + g * m1 + b * m2 + a * m3 + m4) > 255 ? 255 : value < 0 ? 0 : value | 0;\n        dstPixels[i + 1] = (value = r * m5 + g * m6 + b * m7 + a * m8 + m9) > 255 ? 255 : value < 0 ? 0 : value | 0;\n        dstPixels[i + 2] = (value = r * m10 + g * m11 + b * m12 + a * m13 + m14) > 255 ? 255 : value < 0 ? 0 : value | 0;\n        dstPixels[i + 3] = (value = r * m15 + g * m16 + b * m17 + a * m18 + m19) > 255 ? 255 : value < 0 ? 0 : value | 0;\n    }\n\n    return dstImageData;\n};\n\nImageFilters.ColorTransformFilter = function (srcImageData, redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier, redOffset, greenOffset, blueOffset, alphaOffset) {\n    var srcPixels = srcImageData.data,\n        srcWidth = srcImageData.width,\n        srcHeight = srcImageData.height,\n        srcLength = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels = dstImageData.data;\n\n    var i, v;\n    for (i = 0; i < srcLength; i += 4) {\n        dstPixels[i] = (v = srcPixels[i] * redMultiplier + redOffset) > 255 ? 255 : v < 0 ? 0 : v;\n        dstPixels[i + 1] = (v = srcPixels[i + 1] * greenMultiplier + greenOffset) > 255 ? 255 : v < 0 ? 0 : v;\n        dstPixels[i + 2] = (v = srcPixels[i + 2] * blueMultiplier + blueOffset) > 255 ? 255 : v < 0 ? 0 : v;\n        dstPixels[i + 3] = (v = srcPixels[i + 3] * alphaMultiplier + alphaOffset) > 255 ? 255 : v < 0 ? 0 : v;\n    }\n\n    return dstImageData;\n};\n\nImageFilters.Copy = function (srcImageData, dstImageData) {\n    var srcPixels = srcImageData.data,\n        srcLength = srcPixels.length,\n        dstPixels = dstImageData.data;\n\n    while (srcLength--) {\n        dstPixels[srcLength] = srcPixels[srcLength];\n    }\n\n    return dstImageData;\n};\n\nImageFilters.Crop = function (srcImageData, x, y, width, height) {\n    var srcPixels = srcImageData.data,\n        srcWidth = srcImageData.width,\n        srcHeight = srcImageData.height,\n        srcLength = srcPixels.length,\n        dstImageData = this.utils.createImageData(width, height),\n        dstPixels = dstImageData.data;\n\n    var srcLeft = Math.max(x, 0),\n        srcTop = Math.max(y, 0),\n        srcRight = Math.min(x + width, srcWidth),\n        srcBottom = Math.min(y + height, srcHeight),\n        dstLeft = srcLeft - x,\n        dstTop = srcTop - y,\n        srcRow,\n        srcCol,\n        srcIndex,\n        dstIndex;\n\n    for (srcRow = srcTop, dstRow = dstTop; srcRow < srcBottom; srcRow += 1, dstRow += 1) {\n        for (srcCol = srcLeft, dstCol = dstLeft; srcCol < srcRight; srcCol += 1, dstCol += 1) {\n            srcIndex = srcRow * srcWidth + srcCol << 2;\n            dstIndex = dstRow * width + dstCol << 2;\n            dstPixels[dstIndex] = srcPixels[srcIndex];\n            dstPixels[dstIndex + 1] = srcPixels[srcIndex + 1];\n            dstPixels[dstIndex + 2] = srcPixels[srcIndex + 2];\n            dstPixels[dstIndex + 3] = srcPixels[srcIndex + 3];\n        }\n    }\n\n    return dstImageData;\n};\n\nImageFilters.CropBuiltin = function (srcImageData, x, y, width, height) {\n    var srcWidth = srcImageData.width,\n        srcHeight = srcImageData.height,\n        canvas = this.utils.getSampleCanvas(),\n        context = this.utils.getSampleContext();\n\n    canvas.width = srcWidth;\n    canvas.height = srcHeight;\n    context.putImageData(srcImageData, 0, 0);\n    var result = context.getImageData(x, y, width, height);\n\n    canvas.width = 0;\n    canvas.height = 0;\n\n    return result;\n};\n\n/**\r\n * sets to the average of the highest and lowest contrast\r\n */\nImageFilters.Desaturate = function (srcImageData) {\n    var srcPixels = srcImageData.data,\n        srcWidth = srcImageData.width,\n        srcHeight = srcImageData.height,\n        srcLength = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels = dstImageData.data;\n\n    for (var i = 0; i < srcLength; i += 4) {\n        var r = srcPixels[i],\n            g = srcPixels[i + 1],\n            b = srcPixels[i + 2],\n            max = r > g ? r > b ? r : b : g > b ? g : b,\n            min = r < g ? r < b ? r : b : g < b ? g : b,\n            avg = (max + min) / 2 + 0.5 | 0;\n\n        dstPixels[i] = dstPixels[i + 1] = dstPixels[i + 2] = avg;\n        dstPixels[i + 3] = srcPixels[i + 3];\n    }\n\n    return dstImageData;\n};\n\n/**\r\n * TODO: use bilinear\r\n */\nImageFilters.DisplacementMapFilter = function (srcImageData, mapImageData, mapX, mapY, componentX, componentY, scaleX, scaleY, mode) {\n    var srcPixels = srcImageData.data,\n        srcWidth = srcImageData.width,\n        srcHeight = srcImageData.height,\n        srcLength = srcPixels.length,\n\n    //        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n    dstImageData = ImageFilters.Clone(srcImageData),\n        dstPixels = dstImageData.data;\n\n    mapX || (mapX = 0);\n    mapY || (mapY = 0);\n    componentX || (componentX = 0); // red?\n    componentY || (componentY = 0);\n    scaleX || (scaleX = 0);\n    scaleY || (scaleY = 0);\n    mode || (mode = 2); // wrap\n\n    var mapWidth = mapImageData.width,\n        mapHeight = mapImageData.height,\n        mapPixels = mapImageData.data,\n        mapRight = mapWidth + mapX,\n        mapBottom = mapHeight + mapY,\n        dstIndex,\n        srcIndex,\n        mapIndex,\n        cx,\n        cy,\n        tx,\n        ty,\n        x,\n        y;\n\n    for (x = 0; x < srcWidth; x += 1) {\n        for (y = 0; y < srcHeight; y += 1) {\n\n            dstIndex = y * srcWidth + x << 2;\n\n            if (x < mapX || y < mapY || x >= mapRight || y >= mapBottom) {\n                // out of the map bounds\n                // copy src to dst\n                srcIndex = dstIndex;\n            } else {\n                // apply map\n                mapIndex = (y - mapY) * mapWidth + (x - mapX) << 2;\n\n                // tx = x + ((componentX(x, y) - 128) * scaleX) / 256\n                cx = mapPixels[mapIndex + componentX];\n                tx = x + ((cx - 128) * scaleX >> 8);\n\n                // tx = y + ((componentY(x, y) - 128) * scaleY) / 256\n                cy = mapPixels[mapIndex + componentY];\n                ty = y + ((cy - 128) * scaleY >> 8);\n\n                srcIndex = ImageFilters.utils.getPixelIndex(tx + 0.5 | 0, ty + 0.5 | 0, srcWidth, srcHeight, mode);\n                if (srcIndex === null) {\n                    // if mode == ignore and (tx,ty) is out of src bounds\n                    // then copy (x,y) to dst\n                    srcIndex = dstIndex;\n                }\n            }\n\n            dstPixels[dstIndex] = srcPixels[srcIndex];\n            dstPixels[dstIndex + 1] = srcPixels[srcIndex + 1];\n            dstPixels[dstIndex + 2] = srcPixels[srcIndex + 2];\n            dstPixels[dstIndex + 3] = srcPixels[srcIndex + 3];\n        }\n    }\n\n    return dstImageData;\n};\n\n/**\r\n * Floyd-Steinberg algorithm\r\n * @param levels 2 <= n <= 255\r\n */\nImageFilters.Dither = function (srcImageData, levels) {\n    var srcWidth = srcImageData.width,\n        srcHeight = srcImageData.height,\n        dstImageData = this.Clone(srcImageData),\n        dstPixels = dstImageData.data;\n\n    levels = levels < 2 ? 2 : levels > 255 ? 255 : levels;\n\n    // Build a color map using the same algorithm as the posterize filter.\n    var posterize,\n        levelMap = [],\n        levelsMinus1 = levels - 1,\n        j = 0,\n        k = 0,\n        i;\n\n    for (i = 0; i < levels; i += 1) {\n        levelMap[i] = 255 * i / levelsMinus1;\n    }\n\n    posterize = this.utils.buildMap(function (value) {\n        var ret = levelMap[j];\n\n        k += levels;\n\n        if (k > 255) {\n            k -= 255;\n            j += 1;\n        }\n\n        return ret;\n    });\n\n    // Apply the dithering algorithm to each pixel\n    var x,\n        y,\n        index,\n        old_r,\n        old_g,\n        old_b,\n        new_r,\n        new_g,\n        new_b,\n        err_r,\n        err_g,\n        err_b,\n        nbr_r,\n        nbr_g,\n        nbr_b,\n        srcWidthMinus1 = srcWidth - 1,\n        srcHeightMinus1 = srcHeight - 1,\n        A = 7 / 16,\n        B = 3 / 16,\n        C = 5 / 16,\n        D = 1 / 16;\n\n    for (y = 0; y < srcHeight; y += 1) {\n        for (x = 0; x < srcWidth; x += 1) {\n            // Get the current pixel.\n            index = y * srcWidth + x << 2;\n\n            old_r = dstPixels[index];\n            old_g = dstPixels[index + 1];\n            old_b = dstPixels[index + 2];\n\n            // Quantize using the color map\n            new_r = posterize[old_r];\n            new_g = posterize[old_g];\n            new_b = posterize[old_b];\n\n            // Set the current pixel.\n            dstPixels[index] = new_r;\n            dstPixels[index + 1] = new_g;\n            dstPixels[index + 2] = new_b;\n\n            // Quantization errors\n            err_r = old_r - new_r;\n            err_g = old_g - new_g;\n            err_b = old_b - new_b;\n\n            // Apply the matrix.\n            // x + 1, y\n            index += 1 << 2;\n            if (x < srcWidthMinus1) {\n                nbr_r = dstPixels[index] + A * err_r;\n                nbr_g = dstPixels[index + 1] + A * err_g;\n                nbr_b = dstPixels[index + 2] + A * err_b;\n\n                dstPixels[index] = nbr_r > 255 ? 255 : nbr_r < 0 ? 0 : nbr_r | 0;\n                dstPixels[index + 1] = nbr_g > 255 ? 255 : nbr_g < 0 ? 0 : nbr_g | 0;\n                dstPixels[index + 2] = nbr_b > 255 ? 255 : nbr_b < 0 ? 0 : nbr_b | 0;\n            }\n\n            // x - 1, y + 1\n            index += srcWidth - 2 << 2;\n            if (x > 0 && y < srcHeightMinus1) {\n                nbr_r = dstPixels[index] + B * err_r;\n                nbr_g = dstPixels[index + 1] + B * err_g;\n                nbr_b = dstPixels[index + 2] + B * err_b;\n\n                dstPixels[index] = nbr_r > 255 ? 255 : nbr_r < 0 ? 0 : nbr_r | 0;\n                dstPixels[index + 1] = nbr_g > 255 ? 255 : nbr_g < 0 ? 0 : nbr_g | 0;\n                dstPixels[index + 2] = nbr_b > 255 ? 255 : nbr_b < 0 ? 0 : nbr_b | 0;\n            }\n\n            // x, y + 1\n            index += 1 << 2;\n            if (y < srcHeightMinus1) {\n                nbr_r = dstPixels[index] + C * err_r;\n                nbr_g = dstPixels[index + 1] + C * err_g;\n                nbr_b = dstPixels[index + 2] + C * err_b;\n\n                dstPixels[index] = nbr_r > 255 ? 255 : nbr_r < 0 ? 0 : nbr_r | 0;\n                dstPixels[index + 1] = nbr_g > 255 ? 255 : nbr_g < 0 ? 0 : nbr_g | 0;\n                dstPixels[index + 2] = nbr_b > 255 ? 255 : nbr_b < 0 ? 0 : nbr_b | 0;\n            }\n\n            // x + 1, y + 1\n            index += 1 << 2;\n            if (x < srcWidthMinus1 && y < srcHeightMinus1) {\n                nbr_r = dstPixels[index] + D * err_r;\n                nbr_g = dstPixels[index + 1] + D * err_g;\n                nbr_b = dstPixels[index + 2] + D * err_b;\n\n                dstPixels[index] = nbr_r > 255 ? 255 : nbr_r < 0 ? 0 : nbr_r | 0;\n                dstPixels[index + 1] = nbr_g > 255 ? 255 : nbr_g < 0 ? 0 : nbr_g | 0;\n                dstPixels[index + 2] = nbr_b > 255 ? 255 : nbr_b < 0 ? 0 : nbr_b | 0;\n            }\n        }\n    }\n\n    return dstImageData;\n};\n\nImageFilters.Edge = function (srcImageData) {\n    //pretty close to Fireworks 'Find Edges' effect\n    return this.ConvolutionFilter(srcImageData, 3, 3, [-1, -1, -1, -1, 8, -1, -1, -1, -1]);\n};\n\nImageFilters.Emboss = function (srcImageData) {\n    return this.ConvolutionFilter(srcImageData, 3, 3, [-2, -1, 0, -1, 1, 1, 0, 1, 2]);\n};\n\nImageFilters.Enrich = function (srcImageData) {\n    return this.ConvolutionFilter(srcImageData, 3, 3, [0, -2, 0, -2, 20, -2, 0, -2, 0], 10, -40);\n};\n\nImageFilters.Flip = function (srcImageData, vertical) {\n    var srcPixels = srcImageData.data,\n        srcWidth = srcImageData.width,\n        srcHeight = srcImageData.height,\n        srcLength = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels = dstImageData.data;\n\n    var x, y, srcIndex, dstIndex, i;\n\n    for (y = 0; y < srcHeight; y += 1) {\n        for (x = 0; x < srcWidth; x += 1) {\n            srcIndex = y * srcWidth + x << 2;\n            if (vertical) {\n                dstIndex = (srcHeight - y - 1) * srcWidth + x << 2;\n            } else {\n                dstIndex = y * srcWidth + (srcWidth - x - 1) << 2;\n            }\n\n            dstPixels[dstIndex] = srcPixels[srcIndex];\n            dstPixels[dstIndex + 1] = srcPixels[srcIndex + 1];\n            dstPixels[dstIndex + 2] = srcPixels[srcIndex + 2];\n            dstPixels[dstIndex + 3] = srcPixels[srcIndex + 3];\n        }\n    }\n\n    return dstImageData;\n};\n\nImageFilters.Gamma = function (srcImageData, gamma) {\n    var srcPixels = srcImageData.data,\n        srcWidth = srcImageData.width,\n        srcHeight = srcImageData.height,\n        srcLength = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels = dstImageData.data;\n\n    this.utils.mapRGB(srcPixels, dstPixels, function (value) {\n        value = 255 * Math.pow(value / 255, 1 / gamma) + 0.5;\n        return value > 255 ? 255 : value + 0.5 | 0;\n    });\n\n    return dstImageData;\n};\n\nImageFilters.GrayScale = function (srcImageData) {\n    var srcPixels = srcImageData.data,\n        srcWidth = srcImageData.width,\n        srcHeight = srcImageData.height,\n        srcLength = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels = dstImageData.data;\n\n    for (var i = 0; i < srcLength; i += 4) {\n        var intensity = srcPixels[i] * 19595 + srcPixels[i + 1] * 38470 + srcPixels[i + 2] * 7471 >> 16;\n        //var intensity = (srcPixels[i] * 0.3086 + srcPixels[i + 1] * 0.6094 + srcPixels[i + 2] * 0.0820) | 0;\n        dstPixels[i] = dstPixels[i + 1] = dstPixels[i + 2] = intensity;\n        dstPixels[i + 3] = srcPixels[i + 3];\n    }\n\n    return dstImageData;\n};\n\n/**\r\n * @param hueDelta  -180 <= n <= 180\r\n * @param satDelta  -100 <= n <= 100\r\n * @param lightness -100 <= n <= 100\r\n */\nImageFilters.HSLAdjustment = function (srcImageData, hueDelta, satDelta, lightness) {\n    var srcPixels = srcImageData.data,\n        srcWidth = srcImageData.width,\n        srcHeight = srcImageData.height,\n        srcLength = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels = dstImageData.data;\n\n    hueDelta /= 360;\n    satDelta /= 100;\n    lightness /= 100;\n\n    var rgbToHsl = this.utils.rgbToHsl;\n    var hslToRgb = this.utils.hslToRgb;\n    var h, s, l, hsl, rgb, i;\n\n    for (i = 0; i < srcLength; i += 4) {\n        // convert to HSL\n        hsl = rgbToHsl(srcPixels[i], srcPixels[i + 1], srcPixels[i + 2]);\n\n        // hue\n        h = hsl[0] + hueDelta;\n        while (h < 0) {\n            h += 1;\n        }\n        while (h > 1) {\n            h -= 1;\n        }\n\n        // saturation\n        s = hsl[1] + hsl[1] * satDelta;\n        if (s < 0) {\n            s = 0;\n        } else if (s > 1) {\n            s = 1;\n        }\n\n        // lightness\n        l = hsl[2];\n        if (lightness > 0) {\n            l += (1 - l) * lightness;\n        } else if (lightness < 0) {\n            l += l * lightness;\n        }\n\n        // convert back to rgb\n        rgb = hslToRgb(h, s, l);\n\n        dstPixels[i] = rgb[0];\n        dstPixels[i + 1] = rgb[1];\n        dstPixels[i + 2] = rgb[2];\n        dstPixels[i + 3] = srcPixels[i + 3];\n    }\n\n    return dstImageData;\n};\n\nImageFilters.Invert = function (srcImageData) {\n    var srcPixels = srcImageData.data,\n        srcWidth = srcImageData.width,\n        srcHeight = srcImageData.height,\n        srcLength = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels = dstImageData.data;\n\n    this.utils.mapRGB(srcPixels, dstPixels, function (value) {\n        return 255 - value;\n    });\n\n    return dstImageData;\n};\n\nImageFilters.Mosaic = function (srcImageData, blockSize) {\n    var srcPixels = srcImageData.data,\n        srcWidth = srcImageData.width,\n        srcHeight = srcImageData.height,\n        srcLength = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels = dstImageData.data;\n\n    var cols = Math.ceil(srcWidth / blockSize),\n        rows = Math.ceil(srcHeight / blockSize),\n        row,\n        col,\n        x_start,\n        x_end,\n        y_start,\n        y_end,\n        x,\n        y,\n        yIndex,\n        index,\n        size,\n        r,\n        g,\n        b,\n        a;\n\n    for (row = 0; row < rows; row += 1) {\n        y_start = row * blockSize;\n        y_end = y_start + blockSize;\n\n        if (y_end > srcHeight) {\n            y_end = srcHeight;\n        }\n\n        for (col = 0; col < cols; col += 1) {\n            x_start = col * blockSize;\n            x_end = x_start + blockSize;\n\n            if (x_end > srcWidth) {\n                x_end = srcWidth;\n            }\n\n            // get the average color from the src\n            r = g = b = a = 0;\n            size = (x_end - x_start) * (y_end - y_start);\n\n            for (y = y_start; y < y_end; y += 1) {\n                yIndex = y * srcWidth;\n\n                for (x = x_start; x < x_end; x += 1) {\n                    index = yIndex + x << 2;\n                    r += srcPixels[index];\n                    g += srcPixels[index + 1];\n                    b += srcPixels[index + 2];\n                    a += srcPixels[index + 3];\n                }\n            }\n\n            r = r / size + 0.5 | 0;\n            g = g / size + 0.5 | 0;\n            b = b / size + 0.5 | 0;\n            a = a / size + 0.5 | 0;\n\n            // fill the dst with that color\n            for (y = y_start; y < y_end; y += 1) {\n                yIndex = y * srcWidth;\n\n                for (x = x_start; x < x_end; x += 1) {\n                    index = yIndex + x << 2;\n                    dstPixels[index] = r;\n                    dstPixels[index + 1] = g;\n                    dstPixels[index + 2] = b;\n                    dstPixels[index + 3] = a;\n                }\n            }\n        }\n    }\n\n    return dstImageData;\n};\n\n/**\r\n * @param range  1 <= n <= 5\r\n * @param levels 1 <= n <= 256\r\n */\nImageFilters.Oil = function (srcImageData, range, levels) {\n    var srcPixels = srcImageData.data,\n        srcWidth = srcImageData.width,\n        srcHeight = srcImageData.height,\n        srcLength = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels = dstImageData.data;\n\n    var index = 0,\n        rh = [],\n        gh = [],\n        bh = [],\n        rt = [],\n        gt = [],\n        bt = [],\n        x,\n        y,\n        i,\n        row,\n        col,\n        rowIndex,\n        colIndex,\n        offset,\n        srcIndex,\n        sr,\n        sg,\n        sb,\n        ri,\n        gi,\n        bi,\n        r,\n        g,\n        b;\n\n    for (y = 0; y < srcHeight; y += 1) {\n        for (x = 0; x < srcWidth; x += 1) {\n            for (i = 0; i < levels; i += 1) {\n                rh[i] = gh[i] = bh[i] = rt[i] = gt[i] = bt[i] = 0;\n            }\n\n            for (row = -range; row <= range; row += 1) {\n                rowIndex = y + row;\n\n                if (rowIndex < 0 || rowIndex >= srcHeight) {\n                    continue;\n                }\n\n                offset = rowIndex * srcWidth;\n\n                for (col = -range; col <= range; col += 1) {\n                    colIndex = x + col;\n                    if (colIndex < 0 || colIndex >= srcWidth) {\n                        continue;\n                    }\n\n                    srcIndex = offset + colIndex << 2;\n                    sr = srcPixels[srcIndex];\n                    sg = srcPixels[srcIndex + 1];\n                    sb = srcPixels[srcIndex + 2];\n                    ri = sr * levels >> 8;\n                    gi = sg * levels >> 8;\n                    bi = sb * levels >> 8;\n                    rt[ri] += sr;\n                    gt[gi] += sg;\n                    bt[bi] += sb;\n                    rh[ri] += 1;\n                    gh[gi] += 1;\n                    bh[bi] += 1;\n                }\n            }\n\n            r = g = b = 0;\n            for (i = 1; i < levels; i += 1) {\n                if (rh[i] > rh[r]) {\n                    r = i;\n                }\n                if (gh[i] > gh[g]) {\n                    g = i;\n                }\n                if (bh[i] > bh[b]) {\n                    b = i;\n                }\n            }\n\n            dstPixels[index] = rt[r] / rh[r] | 0;\n            dstPixels[index + 1] = gt[g] / gh[g] | 0;\n            dstPixels[index + 2] = bt[b] / bh[b] | 0;\n            dstPixels[index + 3] = srcPixels[index + 3];\n            index += 4;\n        }\n    }\n\n    return dstImageData;\n};\n\nImageFilters.OpacityFilter = function (srcImageData, opacity) {\n    var srcPixels = srcImageData.data,\n        srcWidth = srcImageData.width,\n        srcHeight = srcImageData.height,\n        srcLength = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels = dstImageData.data;\n\n    for (var i = 0; i < srcLength; i += 4) {\n        dstPixels[i] = srcPixels[i];\n        dstPixels[i + 1] = srcPixels[i + 1];\n        dstPixels[i + 2] = srcPixels[i + 2];\n        dstPixels[i + 3] = opacity;\n    }\n\n    return dstImageData;\n};\n\n/**\r\n * @param levels 2 <= n <= 255\r\n */\nImageFilters.Posterize = function (srcImageData, levels) {\n    var srcPixels = srcImageData.data,\n        srcWidth = srcImageData.width,\n        srcHeight = srcImageData.height,\n        srcLength = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels = dstImageData.data;\n\n    levels = levels < 2 ? 2 : levels > 255 ? 255 : levels;\n\n    var levelMap = [],\n        levelsMinus1 = levels - 1,\n        j = 0,\n        k = 0,\n        i;\n\n    for (i = 0; i < levels; i += 1) {\n        levelMap[i] = 255 * i / levelsMinus1;\n    }\n\n    this.utils.mapRGB(srcPixels, dstPixels, function (value) {\n        var ret = levelMap[j];\n\n        k += levels;\n\n        if (k > 255) {\n            k -= 255;\n            j += 1;\n        }\n\n        return ret;\n    });\n\n    return dstImageData;\n};\n\n/**\r\n * @param scale 0.0 <= n <= 5.0\r\n */\nImageFilters.Rescale = function (srcImageData, scale) {\n    var srcPixels = srcImageData.data,\n        srcWidth = srcImageData.width,\n        srcHeight = srcImageData.height,\n        srcLength = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels = dstImageData.data;\n\n    this.utils.mapRGB(srcPixels, dstPixels, function (value) {\n        value *= scale;\n        return value > 255 ? 255 : value + 0.5 | 0;\n    });\n\n    return dstImageData;\n};\n\n/**\r\n * Nearest neighbor\r\n */\nImageFilters.ResizeNearestNeighbor = function (srcImageData, width, height) {\n    var srcPixels = srcImageData.data,\n        srcWidth = srcImageData.width,\n        srcHeight = srcImageData.height,\n        srcLength = srcPixels.length,\n        dstImageData = this.utils.createImageData(width, height),\n        dstPixels = dstImageData.data;\n\n    var xFactor = srcWidth / width,\n        yFactor = srcHeight / height,\n        dstIndex = 0,\n        srcIndex,\n        x,\n        y,\n        offset;\n\n    for (y = 0; y < height; y += 1) {\n        offset = (y * yFactor | 0) * srcWidth;\n\n        for (x = 0; x < width; x += 1) {\n            srcIndex = offset + x * xFactor << 2;\n\n            dstPixels[dstIndex] = srcPixels[srcIndex];\n            dstPixels[dstIndex + 1] = srcPixels[srcIndex + 1];\n            dstPixels[dstIndex + 2] = srcPixels[srcIndex + 2];\n            dstPixels[dstIndex + 3] = srcPixels[srcIndex + 3];\n            dstIndex += 4;\n        }\n    }\n\n    return dstImageData;\n};\n\n/**\r\n * Bilinear\r\n */\nImageFilters.Resize = function (srcImageData, width, height) {\n    var srcPixels = srcImageData.data,\n        srcWidth = srcImageData.width,\n        srcHeight = srcImageData.height,\n        srcLength = srcPixels.length,\n        dstImageData = this.utils.createImageData(width, height),\n        dstPixels = dstImageData.data;\n\n    var xFactor = srcWidth / width,\n        yFactor = srcHeight / height,\n        dstIndex = 0,\n        x,\n        y;\n\n    for (y = 0; y < height; y += 1) {\n        for (x = 0; x < width; x += 1) {\n            this.utils.copyBilinear(srcPixels, x * xFactor, y * yFactor, srcWidth, srcHeight, dstPixels, dstIndex, 0);\n            dstIndex += 4;\n        }\n    }\n\n    return dstImageData;\n};\n\n/**\r\n * faster resizing using the builtin context.scale()\r\n * the resizing algorithm may be different between browsers\r\n * this might not work if the image is transparent.\r\n * to fix that we probably need two contexts\r\n */\nImageFilters.ResizeBuiltin = function (srcImageData, width, height) {\n    var srcWidth = srcImageData.width,\n        srcHeight = srcImageData.height,\n        canvas = this.utils.getSampleCanvas(),\n        context = this.utils.getSampleContext(),\n        dstImageData;\n\n    canvas.width = Math.max(srcWidth, width);\n    canvas.height = Math.max(srcHeight, height);\n    context.save();\n\n    context.putImageData(srcImageData, 0, 0);\n    context.scale(width / srcWidth, height / srcHeight);\n    context.drawImage(canvas, 0, 0);\n\n    dstImageData = context.getImageData(0, 0, width, height);\n\n    context.restore();\n    canvas.width = 0;\n    canvas.height = 0;\n\n    return dstImageData;\n};\n\nImageFilters.Sepia = function (srcImageData) {\n    var srcPixels = srcImageData.data,\n        srcWidth = srcImageData.width,\n        srcHeight = srcImageData.height,\n        srcLength = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels = dstImageData.data;\n\n    var r, g, b, i, value;\n\n    for (i = 0; i < srcLength; i += 4) {\n        r = srcPixels[i];\n        g = srcPixels[i + 1];\n        b = srcPixels[i + 2];\n\n        dstPixels[i] = (value = r * 0.393 + g * 0.769 + b * 0.189) > 255 ? 255 : value < 0 ? 0 : value + 0.5 | 0;\n        dstPixels[i + 1] = (value = r * 0.349 + g * 0.686 + b * 0.168) > 255 ? 255 : value < 0 ? 0 : value + 0.5 | 0;\n        dstPixels[i + 2] = (value = r * 0.272 + g * 0.534 + b * 0.131) > 255 ? 255 : value < 0 ? 0 : value + 0.5 | 0;\n        dstPixels[i + 3] = srcPixels[i + 3];\n    }\n\n    return dstImageData;\n};\n\n/**\r\n * @param factor 1 <= n\r\n */\nImageFilters.Sharpen = function (srcImageData, factor) {\n    //Convolution formula from VIGRA\n    return this.ConvolutionFilter(srcImageData, 3, 3, [-factor / 16, -factor / 8, -factor / 16, -factor / 8, factor * 0.75 + 1, -factor / 8, -factor / 16, -factor / 8, -factor / 16]);\n};\n\nImageFilters.Solarize = function (srcImageData) {\n    var srcPixels = srcImageData.data,\n        srcWidth = srcImageData.width,\n        srcHeight = srcImageData.height,\n        srcLength = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels = dstImageData.data;\n\n    this.utils.mapRGB(srcPixels, dstPixels, function (value) {\n        return value > 127 ? (value - 127.5) * 2 : (127.5 - value) * 2;\n    });\n\n    return dstImageData;\n};\n\nImageFilters.Transpose = function (srcImageData) {\n    var srcPixels = srcImageData.data,\n        srcWidth = srcImageData.width,\n        srcHeight = srcImageData.height,\n        srcLength = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcHeight, srcWidth),\n        dstPixels = dstImageData.data;\n\n    var srcIndex, dstIndex;\n\n    for (y = 0; y < srcHeight; y += 1) {\n        for (x = 0; x < srcWidth; x += 1) {\n            srcIndex = y * srcWidth + x << 2;\n            dstIndex = x * srcHeight + y << 2;\n\n            dstPixels[dstIndex] = srcPixels[srcIndex];\n            dstPixels[dstIndex + 1] = srcPixels[srcIndex + 1];\n            dstPixels[dstIndex + 2] = srcPixels[srcIndex + 2];\n            dstPixels[dstIndex + 3] = srcPixels[srcIndex + 3];\n        }\n    }\n\n    return dstImageData;\n};\n\n/**\r\n * @param centerX 0.0 <= n <= 1.0\r\n * @param centerY 0.0 <= n <= 1.0\r\n * @param radius\r\n * @param angle(degree)\r\n * @param smooth\r\n */\nImageFilters.Twril = function (srcImageData, centerX, centerY, radius, angle, edge, smooth) {\n    var srcPixels = srcImageData.data,\n        srcWidth = srcImageData.width,\n        srcHeight = srcImageData.height,\n        srcLength = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels = dstImageData.data;\n\n    //convert position to px\n    centerX = srcWidth * centerX;\n    centerY = srcHeight * centerY;\n\n    // degree to radian\n    angle *= Math.PI / 180;\n\n    var radius2 = radius * radius,\n        max_y = srcHeight - 1,\n        max_x = srcWidth - 1,\n        dstIndex = 0,\n        x,\n        y,\n        dx,\n        dy,\n        distance,\n        a,\n        tx,\n        ty,\n        srcIndex,\n        pixel,\n        i;\n\n    for (y = 0; y < srcHeight; y += 1) {\n        for (x = 0; x < srcWidth; x += 1) {\n            dx = x - centerX;\n            dy = y - centerY;\n            distance = dx * dx + dy * dy;\n\n            if (distance > radius2) {\n                // out of the effected area. just copy the pixel\n                dstPixels[dstIndex] = srcPixels[dstIndex];\n                dstPixels[dstIndex + 1] = srcPixels[dstIndex + 1];\n                dstPixels[dstIndex + 2] = srcPixels[dstIndex + 2];\n                dstPixels[dstIndex + 3] = srcPixels[dstIndex + 3];\n            } else {\n                // main formula\n                distance = Math.sqrt(distance);\n                a = Math.atan2(dy, dx) + angle * (radius - distance) / radius;\n                tx = centerX + distance * Math.cos(a);\n                ty = centerY + distance * Math.sin(a);\n\n                // copy target pixel\n                if (smooth) {\n                    // bilinear\n                    this.utils.copyBilinear(srcPixels, tx, ty, srcWidth, srcHeight, dstPixels, dstIndex, edge);\n                } else {\n                    // nearest neighbor\n                    // round tx, ty\n                    // TODO edge actions!!\n                    srcIndex = (ty + 0.5 | 0) * srcWidth + (tx + 0.5 | 0) << 2;\n                    dstPixels[dstIndex] = srcPixels[srcIndex];\n                    dstPixels[dstIndex + 1] = srcPixels[srcIndex + 1];\n                    dstPixels[dstIndex + 2] = srcPixels[srcIndex + 2];\n                    dstPixels[dstIndex + 3] = srcPixels[srcIndex + 3];\n                }\n            }\n\n            dstIndex += 4;\n        }\n    }\n\n    return dstImageData;\n};\n\nexports.default = ImageFilters;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2lucy9pbWFnZWZpbHRlcnMuanM/M2E2OSJdLCJuYW1lcyI6WyJJbWFnZUZpbHRlcnMiLCJ1dGlscyIsImluaXRTYW1wbGVDYW52YXMiLCJfY2FudmFzIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiX2NvbnRleHQiLCJnZXRDb250ZXh0Iiwid2lkdGgiLCJoZWlnaHQiLCJnZXRTYW1wbGVDYW52YXMiLCJnZXRTYW1wbGVDb250ZXh0IiwiY3JlYXRlSW1hZ2VEYXRhIiwidyIsImgiLCJJbWFnZURhdGEiLCJjbGFtcCIsInZhbHVlIiwiYnVpbGRNYXAiLCJmIiwibSIsImsiLCJ2IiwiYXBwbHlNYXAiLCJzcmMiLCJkc3QiLCJtYXAiLCJpIiwibCIsImxlbmd0aCIsIm1hcFJHQiIsImZ1bmMiLCJnZXRQaXhlbEluZGV4IiwieCIsInkiLCJlZGdlIiwiZ2V0UGl4ZWwiLCJnZXRQaXhlbEJ5SW5kZXgiLCJjb3B5QmlsaW5lYXIiLCJkc3RJbmRleCIsImZ4IiwiZnkiLCJ3eCIsInd5IiwibnciLCJuZSIsInN3Iiwic2UiLCJjeCIsImN5IiwiciIsImciLCJiIiwiYSIsInJnYlRvSHNsIiwibWF4IiwibWluIiwiY2hyb21hIiwicyIsImhzbFRvUmdiIiwibTEiLCJtMiIsImh1ZSIsInJnYiIsInRtcCIsIlRyYW5zbGF0ZSIsInNyY0ltYWdlRGF0YSIsImludGVycG9sYXRpb24iLCJTY2FsZSIsInNjYWxlWCIsInNjYWxlWSIsIlJvdGF0ZSIsIm9yaWdpblgiLCJvcmlnaW5ZIiwiYW5nbGUiLCJyZXNpemUiLCJBZmZpbmUiLCJtYXRyaXgiLCJVbnNoYXJwTWFzayIsImxldmVsIiwiQ29udm9sdXRpb25GaWx0ZXIiLCJtYXRyaXhYIiwibWF0cml4WSIsImRpdmlzb3IiLCJiaWFzIiwicHJlc2VydmVBbHBoYSIsImNvbG9yIiwiYWxwaGEiLCJzcmNQaXhlbHMiLCJkYXRhIiwic3JjV2lkdGgiLCJzcmNIZWlnaHQiLCJzcmNMZW5ndGgiLCJkc3RJbWFnZURhdGEiLCJkc3RQaXhlbHMiLCJpbmRleCIsInJvd3MiLCJjb2xzIiwiY2xhbXBSIiwiY2xhbXBHIiwiY2xhbXBCIiwiY2xhbXBBIiwicmVwbGFjZSIsIm1JbmRleCIsInJvdyIsInJvd0luZGV4Iiwib2Zmc2V0IiwiY29sIiwiY29sSW5kZXgiLCJwIiwiQmluYXJpemUiLCJ0aHJlc2hvbGQiLCJpc05hTiIsImF2ZyIsIkJsZW5kQWRkIiwiYmxlbmRJbWFnZURhdGEiLCJkeCIsImR5IiwiYmxlbmRQaXhlbHMiLCJCbGVuZFN1YnRyYWN0IiwiQm94Qmx1ciIsImJsdXIiLCJyYWRpdXMiLCJ0YWJsZVNpemUiLCJyYWRpdXNQbHVzMSIsIndpZHRoTWludXMxIiwic3JjSW5kZXgiLCJuZXh0IiwicHJldiIsIm5leHRJbmRleCIsInByZXZJbmRleCIsInN1bVRhYmxlIiwiaFJhZGl1cyIsInZSYWRpdXMiLCJxdWFsaXR5IiwidG1wSW1hZ2VEYXRhIiwidG1wUGl4ZWxzIiwiR2F1c3NpYW5CbHVyIiwic3RyZW5ndGgiLCJzaXplIiwiU3RhY2tCbHVyIiwibXVsX3RhYmxlIiwic2hnX3RhYmxlIiwiQmx1clN0YWNrIiwiQ2xvbmUiLCJ5cCIsInlpIiwieXciLCJyX3N1bSIsImdfc3VtIiwiYl9zdW0iLCJhX3N1bSIsInJfb3V0X3N1bSIsImdfb3V0X3N1bSIsImJfb3V0X3N1bSIsImFfb3V0X3N1bSIsInJfaW5fc3VtIiwiZ19pbl9zdW0iLCJiX2luX3N1bSIsImFfaW5fc3VtIiwicHIiLCJwZyIsInBiIiwicGEiLCJyYnMiLCJkaXYiLCJ3NCIsImhlaWdodE1pbnVzMSIsInN1bUZhY3RvciIsInN0YWNrU3RhcnQiLCJzdGFjayIsInN0YWNrSW4iLCJzdGFja091dCIsInN0YWNrRW5kIiwibXVsX3N1bSIsInNoZ19zdW0iLCJCcmlnaHRuZXNzIiwiYnJpZ2h0bmVzcyIsIkJyaWdodG5lc3NDb250cmFzdEdpbXAiLCJjb250cmFzdCIsInA0IiwiTWF0aCIsIlBJIiwidGFuIiwiQnJpZ2h0bmVzc0NvbnRyYXN0UGhvdG9zaG9wIiwiQ2hhbm5lbHMiLCJjaGFubmVsIiwiQ29sb3JNYXRyaXhGaWx0ZXIiLCJDb3B5IiwiQ2xvbmVCdWlsdGluIiwiY2FudmFzIiwiY29udGV4dCIsInB1dEltYWdlRGF0YSIsImdldEltYWdlRGF0YSIsIm0wIiwibTMiLCJtNCIsIm01IiwibTYiLCJtNyIsIm04IiwibTkiLCJtMTAiLCJtMTEiLCJtMTIiLCJtMTMiLCJtMTQiLCJtMTUiLCJtMTYiLCJtMTciLCJtMTgiLCJtMTkiLCJDb2xvclRyYW5zZm9ybUZpbHRlciIsInJlZE11bHRpcGxpZXIiLCJncmVlbk11bHRpcGxpZXIiLCJibHVlTXVsdGlwbGllciIsImFscGhhTXVsdGlwbGllciIsInJlZE9mZnNldCIsImdyZWVuT2Zmc2V0IiwiYmx1ZU9mZnNldCIsImFscGhhT2Zmc2V0IiwiQ3JvcCIsInNyY0xlZnQiLCJzcmNUb3AiLCJzcmNSaWdodCIsInNyY0JvdHRvbSIsImRzdExlZnQiLCJkc3RUb3AiLCJzcmNSb3ciLCJzcmNDb2wiLCJkc3RSb3ciLCJkc3RDb2wiLCJDcm9wQnVpbHRpbiIsInJlc3VsdCIsIkRlc2F0dXJhdGUiLCJEaXNwbGFjZW1lbnRNYXBGaWx0ZXIiLCJtYXBJbWFnZURhdGEiLCJtYXBYIiwibWFwWSIsImNvbXBvbmVudFgiLCJjb21wb25lbnRZIiwibW9kZSIsIm1hcFdpZHRoIiwibWFwSGVpZ2h0IiwibWFwUGl4ZWxzIiwibWFwUmlnaHQiLCJtYXBCb3R0b20iLCJtYXBJbmRleCIsInR4IiwidHkiLCJEaXRoZXIiLCJsZXZlbHMiLCJwb3N0ZXJpemUiLCJsZXZlbE1hcCIsImxldmVsc01pbnVzMSIsImoiLCJyZXQiLCJvbGRfciIsIm9sZF9nIiwib2xkX2IiLCJuZXdfciIsIm5ld19nIiwibmV3X2IiLCJlcnJfciIsImVycl9nIiwiZXJyX2IiLCJuYnJfciIsIm5icl9nIiwibmJyX2IiLCJzcmNXaWR0aE1pbnVzMSIsInNyY0hlaWdodE1pbnVzMSIsIkEiLCJCIiwiQyIsIkQiLCJFZGdlIiwiRW1ib3NzIiwiRW5yaWNoIiwiRmxpcCIsInZlcnRpY2FsIiwiR2FtbWEiLCJnYW1tYSIsInBvdyIsIkdyYXlTY2FsZSIsImludGVuc2l0eSIsIkhTTEFkanVzdG1lbnQiLCJodWVEZWx0YSIsInNhdERlbHRhIiwibGlnaHRuZXNzIiwiaHNsIiwiSW52ZXJ0IiwiTW9zYWljIiwiYmxvY2tTaXplIiwiY2VpbCIsInhfc3RhcnQiLCJ4X2VuZCIsInlfc3RhcnQiLCJ5X2VuZCIsInlJbmRleCIsIk9pbCIsInJhbmdlIiwicmgiLCJnaCIsImJoIiwicnQiLCJndCIsImJ0Iiwic3IiLCJzZyIsInNiIiwicmkiLCJnaSIsImJpIiwiT3BhY2l0eUZpbHRlciIsIm9wYWNpdHkiLCJQb3N0ZXJpemUiLCJSZXNjYWxlIiwic2NhbGUiLCJSZXNpemVOZWFyZXN0TmVpZ2hib3IiLCJ4RmFjdG9yIiwieUZhY3RvciIsIlJlc2l6ZSIsIlJlc2l6ZUJ1aWx0aW4iLCJzYXZlIiwiZHJhd0ltYWdlIiwicmVzdG9yZSIsIlNlcGlhIiwiU2hhcnBlbiIsImZhY3RvciIsIlNvbGFyaXplIiwiVHJhbnNwb3NlIiwiVHdyaWwiLCJjZW50ZXJYIiwiY2VudGVyWSIsInNtb290aCIsInJhZGl1czIiLCJtYXhfeSIsIm1heF94IiwiZGlzdGFuY2UiLCJwaXhlbCIsInNxcnQiLCJhdGFuMiIsImNvcyIsInNpbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFJQSxlQUFlLEVBQW5CO0FBQ0FBLGFBQWFDLEtBQWIsR0FBcUI7QUFDakJDLHNCQUFrQiw0QkFBWTtBQUMxQixZQUFJQyxVQUFVQyxTQUFTQyxhQUFULENBQXVCLFFBQXZCLENBQWQ7QUFBQSxZQUNJQyxXQUFXSCxRQUFRSSxVQUFSLENBQW1CLElBQW5CLENBRGY7O0FBR0FKLGdCQUFRSyxLQUFSLEdBQWdCLENBQWhCO0FBQ0FMLGdCQUFRTSxNQUFSLEdBQWlCLENBQWpCOztBQUVBLGFBQUtDLGVBQUwsR0FBdUIsWUFBWTtBQUMvQixtQkFBT1AsT0FBUDtBQUNI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LEVBSVMsRUFKVCxFQUlhLEVBSmIsRUFJaUIsRUFKakIsRUFJcUIsRUFKckIsRUFJeUIsRUFKekIsRUFJNkIsRUFKN0IsRUFJaUMsRUFKakMsRUFJc0MsQ0FKdEMsRUFJMEMsQ0FKMUMsRUFJNkMsQ0FKN0MsRUFJZ0QsQ0FKaEQsRUFLTCxDQUxLLEVBS0YsQ0FMRSxFQUtFLENBTEYsRUFLSyxFQUxMLEVBS1MsRUFMVCxFQUthLEVBTGIsRUFLaUIsRUFMakIsRUFLcUIsRUFMckIsRUFLeUIsRUFMekIsRUFLNkIsRUFMN0IsRUFLaUMsRUFMakMsRUFLcUMsRUFMckMsRUFLMEMsQ0FMMUMsRUFLNkMsQ0FMN0MsRUFLZ0QsQ0FMaEQsRUFNTCxDQU5LLEVBTUYsQ0FORSxFQU1DLEVBTkQsRUFNSyxFQU5MLEVBTVMsRUFOVCxFQU1hLEVBTmIsRUFNaUIsRUFOakIsRUFNcUIsRUFOckIsRUFNeUIsRUFOekIsRUFNNkIsRUFON0IsRUFNaUMsRUFOakMsRUFNcUMsRUFOckMsRUFNeUMsRUFOekMsRUFNNkMsQ0FON0MsRUFNZ0QsQ0FOaEQsRUFPTCxDQVBLLEVBT0YsQ0FQRSxFQU9DLEVBUEQsRUFPSyxFQVBMLEVBT1MsRUFQVCxFQU9hLEVBUGIsRUFPaUIsRUFQakIsRUFPcUIsRUFQckIsRUFPeUIsRUFQekIsRUFPNkIsRUFQN0IsRUFPaUMsRUFQakMsRUFPcUMsRUFQckMsRUFPeUMsRUFQekMsRUFPNkMsQ0FQN0MsRUFPZ0QsQ0FQaEQsRUFRTCxDQVJLLEVBUUYsQ0FSRSxFQVFDLEVBUkQsRUFRSyxFQVJMLEVBUVMsRUFSVCxFQVFhLEVBUmIsRUFRaUIsRUFSakIsRUFRcUIsRUFSckIsRUFReUIsRUFSekIsRUFRNkIsRUFSN0IsRUFRaUMsRUFSakMsRUFRcUMsRUFSckMsRUFReUMsRUFSekMsRUFRNkMsQ0FSN0MsRUFRZ0QsQ0FSaEQsRUFTTCxDQVRLLEVBU0YsQ0FURSxFQVNDLEVBVEQsRUFTSyxFQVRMLEVBU1MsRUFUVCxFQVNhLEVBVGIsRUFTaUIsRUFUakIsRUFTcUIsRUFUckIsRUFTeUIsRUFUekIsRUFTNkIsRUFUN0IsRUFTaUMsRUFUakMsRUFTcUMsRUFUckMsRUFTeUMsRUFUekMsRUFTNkMsQ0FUN0MsRUFTZ0QsQ0FUaEQsRUFVTCxDQVZLLEVBVUYsQ0FWRSxFQVVDLEVBVkQsRUFVSyxFQVZMLEVBVVMsRUFWVCxFQVVhLEVBVmIsRUFVaUIsRUFWakIsRUFVcUIsRUFWckIsRUFVeUIsRUFWekIsRUFVNkIsRUFWN0IsRUFVaUMsRUFWakMsRUFVcUMsRUFWckMsRUFVeUMsRUFWekMsRUFVNkMsQ0FWN0MsRUFVZ0QsQ0FWaEQsRUFXTCxDQVhLLEVBV0YsQ0FYRSxFQVdFLENBWEYsRUFXSyxFQVhMLEVBV1MsRUFYVCxFQVdhLEVBWGIsRUFXaUIsRUFYakIsRUFXcUIsRUFYckIsRUFXeUIsRUFYekIsRUFXNkIsRUFYN0IsRUFXaUMsRUFYakMsRUFXcUMsRUFYckMsRUFXMEMsQ0FYMUMsRUFXNkMsQ0FYN0MsRUFXZ0QsQ0FYaEQsRUFZTCxDQVpLLEVBWUYsQ0FaRSxFQVlFLENBWkYsRUFZTSxDQVpOLEVBWVMsRUFaVCxFQVlhLEVBWmIsRUFZaUIsRUFaakIsRUFZcUIsRUFackIsRUFZeUIsRUFaekIsRUFZNkIsRUFaN0IsRUFZaUMsRUFaakMsRUFZc0MsQ0FadEMsRUFZMEMsQ0FaMUMsRUFZNkMsQ0FaN0MsRUFZZ0QsQ0FaaEQsRUFhTCxDQWJLLEVBYUYsQ0FiRSxFQWFFLENBYkYsRUFhTSxDQWJOLEVBYVUsQ0FiVixFQWFhLEVBYmIsRUFhaUIsRUFiakIsRUFhcUIsRUFickIsRUFheUIsRUFiekIsRUFhNkIsRUFiN0IsRUFha0MsQ0FibEMsRUFhc0MsQ0FidEMsRUFhMEMsQ0FiMUMsRUFhNkMsQ0FiN0MsRUFhZ0QsQ0FiaEQsRUFjTCxDQWRLLEVBY0YsQ0FkRSxFQWNFLENBZEYsRUFjTSxDQWROLEVBY1UsQ0FkVixFQWNjLENBZGQsRUFja0IsQ0FkbEIsRUFjc0IsQ0FkdEIsRUFjMEIsQ0FkMUIsRUFjOEIsQ0FkOUIsRUFja0MsQ0FkbEMsRUFjc0MsQ0FkdEMsRUFjMEMsQ0FkMUMsRUFjNkMsQ0FkN0MsRUFj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QUFXLENBQXJCLElBQTBCaUQsVUFBVXNDLFdBQVcsQ0FBckIsQ0FBMUI7QUFDSDtBQUNKOztBQUVEdkYsd0JBQVksQ0FBWjtBQUNIO0FBQ0o7O0FBRUQsV0FBT3NELFlBQVA7QUFDSCxDQS9ERDs7a0JBaUVlN0YsWSIsImZpbGUiOiIxMS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBJbWFnZUZpbHRlcnMgPSB7fTtcclxuSW1hZ2VGaWx0ZXJzLnV0aWxzID0ge1xyXG4gICAgaW5pdFNhbXBsZUNhbnZhczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyksXHJcbiAgICAgICAgICAgIF9jb250ZXh0ID0gX2NhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIF9jYW52YXMud2lkdGggPSAwO1xyXG4gICAgICAgIF9jYW52YXMuaGVpZ2h0ID0gMDtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmdldFNhbXBsZUNhbnZhcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9jYW52YXM7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmdldFNhbXBsZUNvbnRleHQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuY3JlYXRlSW1hZ2VEYXRhID0gKF9jb250ZXh0LmNyZWF0ZUltYWdlRGF0YSkgPyBmdW5jdGlvbiAodywgaCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmNyZWF0ZUltYWdlRGF0YSh3LCBoKTtcclxuICAgICAgICAgICAgfSA6IGZ1bmN0aW9uICh3LCBoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEltYWdlRGF0YSh3LCBoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBnZXRTYW1wbGVDYW52YXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmluaXRTYW1wbGVDYW52YXMoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRTYW1wbGVDYW52YXMoKTtcclxuICAgIH0sXHJcbiAgICBnZXRTYW1wbGVDb250ZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5pbml0U2FtcGxlQ2FudmFzKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2FtcGxlQ29udGV4dCgpO1xyXG4gICAgfSxcclxuICAgIGNyZWF0ZUltYWdlRGF0YTogZnVuY3Rpb24gKHcsIGgpIHtcclxuICAgICAgICB0aGlzLmluaXRTYW1wbGVDYW52YXMoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVJbWFnZURhdGEodywgaCk7XHJcbiAgICB9LFxyXG4gICAgY2xhbXA6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZSA+IDI1NSA/IDI1NSA6IHZhbHVlIDwgMCA/IDAgOiB2YWx1ZTtcclxuICAgIH0sXHJcbiAgICBidWlsZE1hcDogZnVuY3Rpb24gKGYpIHtcclxuICAgICAgICBmb3IgKHZhciBtID0gW10sIGsgPSAwLCB2OyBrIDwgMjU2OyBrICs9IDEpIHtcclxuICAgICAgICAgICAgbVtrXSA9ICh2ID0gZihrKSkgPiAyNTUgPyAyNTUgOiB2IDwgMCA/IDAgOiB2IHwgMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG07XHJcbiAgICB9LFxyXG4gICAgYXBwbHlNYXA6IGZ1bmN0aW9uIChzcmMsIGRzdCwgbWFwKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBzcmMubGVuZ3RoOyBpIDwgbDsgaSArPSA0KSB7XHJcbiAgICAgICAgICAgIGRzdFtpXSAgICAgPSBtYXBbc3JjW2ldXTtcclxuICAgICAgICAgICAgZHN0W2kgKyAxXSA9IG1hcFtzcmNbaSArIDFdXTtcclxuICAgICAgICAgICAgZHN0W2kgKyAyXSA9IG1hcFtzcmNbaSArIDJdXTtcclxuICAgICAgICAgICAgZHN0W2kgKyAzXSA9IHNyY1tpICsgM107XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIG1hcFJHQjogZnVuY3Rpb24gKHNyYywgZHN0LCBmdW5jKSB7XHJcbiAgICAgICAgdGhpcy5hcHBseU1hcChzcmMsIGRzdCwgdGhpcy5idWlsZE1hcChmdW5jKSk7XHJcbiAgICB9LFxyXG4gICAgZ2V0UGl4ZWxJbmRleDogZnVuY3Rpb24gKHgsIHksIHdpZHRoLCBoZWlnaHQsIGVkZ2UpIHtcclxuICAgICAgICBpZiAoeCA8IDAgfHwgeCA+PSB3aWR0aCB8fCB5IDwgMCB8fCB5ID49IGhlaWdodCkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGVkZ2UpIHtcclxuICAgICAgICAgICAgY2FzZSAxOiAvLyBjbGFtcFxyXG4gICAgICAgICAgICAgICAgeCA9IHggPCAwID8gMCA6IHggPj0gd2lkdGggPyB3aWR0aCAtIDEgOiB4O1xyXG4gICAgICAgICAgICAgICAgeSA9IHkgPCAwID8gMCA6IHkgPj0gaGVpZ2h0ID8gaGVpZ2h0IC0gMSA6IHk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAyOiAvLyB3cmFwXHJcbiAgICAgICAgICAgICAgICB4ID0gKHggJT0gd2lkdGgpIDwgMCA/IHggKyB3aWR0aCA6IHg7XHJcbiAgICAgICAgICAgICAgICB5ID0gKHkgJT0gaGVpZ2h0KSA8IDAgPyB5ICsgaGVpZ2h0IDogeTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OiAvLyB0cmFuc3BhcmVudFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuICh5ICogd2lkdGggKyB4KSA8PCAyO1xyXG4gICAgfSxcclxuICAgIGdldFBpeGVsOiBmdW5jdGlvbiAoc3JjLCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCBlZGdlKSB7XHJcbiAgICAgICAgaWYgKHggPCAwIHx8IHggPj0gd2lkdGggfHwgeSA8IDAgfHwgeSA+PSBoZWlnaHQpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChlZGdlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMTogLy8gY2xhbXBcclxuICAgICAgICAgICAgICAgIHggPSB4IDwgMCA/IDAgOiB4ID49IHdpZHRoID8gd2lkdGggLSAxIDogeDtcclxuICAgICAgICAgICAgICAgIHkgPSB5IDwgMCA/IDAgOiB5ID49IGhlaWdodCA/IGhlaWdodCAtIDEgOiB5O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMjogLy8gd3JhcFxyXG4gICAgICAgICAgICAgICAgeCA9ICh4ICU9IHdpZHRoKSA8IDAgPyB4ICsgd2lkdGggOiB4O1xyXG4gICAgICAgICAgICAgICAgeSA9ICh5ICU9IGhlaWdodCkgPCAwID8geSArIGhlaWdodCA6IHk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDogLy8gdHJhbnNwYXJlbnRcclxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciBpID0gKHkgKiB3aWR0aCArIHgpIDw8IDI7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gQVJHQlxyXG4gICAgICAgIHJldHVybiBzcmNbaSArIDNdIDw8IDI0IHwgc3JjW2ldIDw8IDE2IHwgc3JjW2kgKyAxXSA8PCA4IHwgc3JjW2kgKyAyXTtcclxuICAgIH0sXHJcbiAgICBnZXRQaXhlbEJ5SW5kZXg6IGZ1bmN0aW9uIChzcmMsIGkpIHtcclxuICAgICAgICByZXR1cm4gc3JjW2kgKyAzXSA8PCAyNCB8IHNyY1tpXSA8PCAxNiB8IHNyY1tpICsgMV0gPDwgOCB8IHNyY1tpICsgMl07XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBvbmUgb2YgdGhlIG1vc3QgaW1wb3J0YW50IGZ1bmN0aW9ucyBpbiB0aGlzIGxpYnJhcnkuXHJcbiAgICAgKiBJIHdhbnQgdG8gbWFrZSB0aGlzIGFzIGZhc3QgYXMgcG9zc2libGUuXHJcbiAgICAgKi9cclxuICAgIGNvcHlCaWxpbmVhcjogZnVuY3Rpb24gKHNyYywgeCwgeSwgd2lkdGgsIGhlaWdodCwgZHN0LCBkc3RJbmRleCwgZWRnZSkge1xyXG4gICAgICAgIHZhciBmeCA9IHggPCAwID8geCAtIDEgfCAwIDogeCB8IDAsIC8vIE1hdGguZmxvb3IoeClcclxuICAgICAgICAgICAgZnkgPSB5IDwgMCA/IHkgLSAxIHwgMCA6IHkgfCAwLCAvLyBNYXRoLmZsb29yKHkpXHJcbiAgICAgICAgICAgIHd4ID0geCAtIGZ4LFxyXG4gICAgICAgICAgICB3eSA9IHkgLSBmeSxcclxuICAgICAgICAgICAgaSxcclxuICAgICAgICAgICAgbncgPSAwLCBuZSA9IDAsIHN3ID0gMCwgc2UgPSAwLFxyXG4gICAgICAgICAgICBjeCwgY3ksXHJcbiAgICAgICAgICAgIHIsIGcsIGIsIGE7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGZ4ID49IDAgJiYgZnggPCAod2lkdGggLSAxKSAmJiBmeSA+PSAwICYmIGZ5IDwgKGhlaWdodCAtIDEpKSB7XHJcbiAgICAgICAgICAgIC8vIGluIGJvdW5kcywgbm8gZWRnZSBhY3Rpb25zIHJlcXVpcmVkXHJcbiAgICAgICAgICAgIGkgPSAoZnkgKiB3aWR0aCArIGZ4KSA8PCAyO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKHd4IHx8IHd5KSB7XHJcbiAgICAgICAgICAgICAgICBudyA9IHNyY1tpICsgM10gPDwgMjQgfCBzcmNbaV0gPDwgMTYgfCBzcmNbaSArIDFdIDw8IDggfCBzcmNbaSArIDJdO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpICs9IDQ7XHJcbiAgICAgICAgICAgICAgICBuZSA9IHNyY1tpICsgM10gPDwgMjQgfCBzcmNbaV0gPDwgMTYgfCBzcmNbaSArIDFdIDw8IDggfCBzcmNbaSArIDJdO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpID0gKGkgLSA4KSArICh3aWR0aCA8PCAyKTtcclxuICAgICAgICAgICAgICAgIHN3ID0gc3JjW2kgKyAzXSA8PCAyNCB8IHNyY1tpXSA8PCAxNiB8IHNyY1tpICsgMV0gPDwgOCB8IHNyY1tpICsgMl07XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGkgKz0gNDtcclxuICAgICAgICAgICAgICAgIHNlID0gc3JjW2kgKyAzXSA8PCAyNCB8IHNyY1tpXSA8PCAxNiB8IHNyY1tpICsgMV0gPDwgOCB8IHNyY1tpICsgMl07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBubyBpbnRlcnBvbGF0aW9uIHJlcXVpcmVkXHJcbiAgICAgICAgICAgICAgICBkc3RbZHN0SW5kZXhdICAgICA9IHNyY1tpXTtcclxuICAgICAgICAgICAgICAgIGRzdFtkc3RJbmRleCArIDFdID0gc3JjW2kgKyAxXTtcclxuICAgICAgICAgICAgICAgIGRzdFtkc3RJbmRleCArIDJdID0gc3JjW2kgKyAyXTtcclxuICAgICAgICAgICAgICAgIGRzdFtkc3RJbmRleCArIDNdID0gc3JjW2kgKyAzXTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gZWRnZSBhY3Rpb25zIHJlcXVpcmVkXHJcbiAgICAgICAgICAgIG53ID0gdGhpcy5nZXRQaXhlbChzcmMsIGZ4LCBmeSwgd2lkdGgsIGhlaWdodCwgZWRnZSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAod3ggfHwgd3kpIHtcclxuICAgICAgICAgICAgICAgIG5lID0gdGhpcy5nZXRQaXhlbChzcmMsIGZ4ICsgMSwgZnksIHdpZHRoLCBoZWlnaHQsIGVkZ2UpO1xyXG4gICAgICAgICAgICAgICAgc3cgPSB0aGlzLmdldFBpeGVsKHNyYywgZngsIGZ5ICsgMSwgd2lkdGgsIGhlaWdodCwgZWRnZSk7XHJcbiAgICAgICAgICAgICAgICBzZSA9IHRoaXMuZ2V0UGl4ZWwoc3JjLCBmeCArIDEsIGZ5ICsgMSwgd2lkdGgsIGhlaWdodCwgZWRnZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBubyBpbnRlcnBvbGF0aW9uIHJlcXVpcmVkXHJcbiAgICAgICAgICAgICAgICBkc3RbZHN0SW5kZXhdICAgICA9IG53ID4+IDE2ICYgMHhGRjtcclxuICAgICAgICAgICAgICAgIGRzdFtkc3RJbmRleCArIDFdID0gbncgPj4gOCAgJiAweEZGO1xyXG4gICAgICAgICAgICAgICAgZHN0W2RzdEluZGV4ICsgMl0gPSBudyAgICAgICAmIDB4RkY7XHJcbiAgICAgICAgICAgICAgICBkc3RbZHN0SW5kZXggKyAzXSA9IG53ID4+IDI0ICYgMHhGRjtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBjeCA9IDEgLSB3eDtcclxuICAgICAgICBjeSA9IDEgLSB3eTtcclxuICAgICAgICByID0gKChudyA+PiAxNiAmIDB4RkYpICogY3ggKyAobmUgPj4gMTYgJiAweEZGKSAqIHd4KSAqIGN5ICsgKChzdyA+PiAxNiAmIDB4RkYpICogY3ggKyAoc2UgPj4gMTYgJiAweEZGKSAqIHd4KSAqIHd5O1xyXG4gICAgICAgIGcgPSAoKG53ID4+IDggICYgMHhGRikgKiBjeCArIChuZSA+PiA4ICAmIDB4RkYpICogd3gpICogY3kgKyAoKHN3ID4+IDggICYgMHhGRikgKiBjeCArIChzZSA+PiA4ICAmIDB4RkYpICogd3gpICogd3k7XHJcbiAgICAgICAgYiA9ICgobncgICAgICAgJiAweEZGKSAqIGN4ICsgKG5lICAgICAgICYgMHhGRikgKiB3eCkgKiBjeSArICgoc3cgICAgICAgJiAweEZGKSAqIGN4ICsgKHNlICAgICAgICYgMHhGRikgKiB3eCkgKiB3eTtcclxuICAgICAgICBhID0gKChudyA+PiAyNCAmIDB4RkYpICogY3ggKyAobmUgPj4gMjQgJiAweEZGKSAqIHd4KSAqIGN5ICsgKChzdyA+PiAyNCAmIDB4RkYpICogY3ggKyAoc2UgPj4gMjQgJiAweEZGKSAqIHd4KSAqIHd5O1xyXG4gICAgICAgIFxyXG4gICAgICAgIGRzdFtkc3RJbmRleF0gICAgID0gciA+IDI1NSA/IDI1NSA6IHIgPCAwID8gMCA6IHIgfCAwO1xyXG4gICAgICAgIGRzdFtkc3RJbmRleCArIDFdID0gZyA+IDI1NSA/IDI1NSA6IGcgPCAwID8gMCA6IGcgfCAwO1xyXG4gICAgICAgIGRzdFtkc3RJbmRleCArIDJdID0gYiA+IDI1NSA/IDI1NSA6IGIgPCAwID8gMCA6IGIgfCAwO1xyXG4gICAgICAgIGRzdFtkc3RJbmRleCArIDNdID0gYSA+IDI1NSA/IDI1NSA6IGEgPCAwID8gMCA6IGEgfCAwO1xyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHIgMCA8PSBuIDw9IDI1NVxyXG4gICAgICogQHBhcmFtIGcgMCA8PSBuIDw9IDI1NVxyXG4gICAgICogQHBhcmFtIGIgMCA8PSBuIDw9IDI1NVxyXG4gICAgICogQHJldHVybiBBcnJheShoLCBzLCBsKVxyXG4gICAgICovXHJcbiAgICByZ2JUb0hzbDogZnVuY3Rpb24gKHIsIGcsIGIpIHtcclxuICAgICAgICByIC89IDI1NTtcclxuICAgICAgICBnIC89IDI1NTtcclxuICAgICAgICBiIC89IDI1NTtcclxuXHJcbi8vICAgICAgICB2YXIgbWF4ID0gTWF0aC5tYXgociwgZywgYiksXHJcbi8vICAgICAgICAgICAgbWluID0gTWF0aC5taW4ociwgZywgYiksXHJcbiAgICAgICAgdmFyIG1heCA9IChyID4gZykgPyAociA+IGIpID8gciA6IGIgOiAoZyA+IGIpID8gZyA6IGIsXHJcbiAgICAgICAgICAgIG1pbiA9IChyIDwgZykgPyAociA8IGIpID8gciA6IGIgOiAoZyA8IGIpID8gZyA6IGIsXHJcbiAgICAgICAgICAgIGNocm9tYSA9IG1heCAtIG1pbixcclxuICAgICAgICAgICAgaCA9IDAsXHJcbiAgICAgICAgICAgIHMgPSAwLFxyXG4gICAgICAgICAgICAvLyBMaWdodG5lc3NcclxuICAgICAgICAgICAgbCA9IChtaW4gKyBtYXgpIC8gMjtcclxuXHJcbiAgICAgICAgaWYgKGNocm9tYSAhPT0gMCkge1xyXG4gICAgICAgICAgICAvLyBIdWVcclxuICAgICAgICAgICAgaWYgKHIgPT09IG1heCkge1xyXG4gICAgICAgICAgICAgICAgaCA9IChnIC0gYikgLyBjaHJvbWEgKyAoKGcgPCBiKSA/IDYgOiAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChnID09PSBtYXgpIHtcclxuICAgICAgICAgICAgICAgIGggPSAoYiAtIHIpIC8gY2hyb21hICsgMjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGggPSAociAtIGcpIC8gY2hyb21hICsgNDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBoIC89IDY7XHJcblxyXG4gICAgICAgICAgICAvLyBTYXR1cmF0aW9uXHJcbiAgICAgICAgICAgIHMgPSAobCA+IDAuNSkgPyBjaHJvbWEgLyAoMiAtIG1heCAtIG1pbikgOiBjaHJvbWEgLyAobWF4ICsgbWluKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBbaCwgcywgbF07XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gaCAwLjAgPD0gbiA8PSAxLjBcclxuICAgICAqIEBwYXJhbSBzIDAuMCA8PSBuIDw9IDEuMFxyXG4gICAgICogQHBhcmFtIGwgMC4wIDw9IG4gPD0gMS4wXHJcbiAgICAgKiBAcmV0dXJuIEFycmF5KHIsIGcsIGIpXHJcbiAgICAgKi9cclxuICAgIGhzbFRvUmdiOiBmdW5jdGlvbiAoaCwgcywgbCkge1xyXG4gICAgICAgIHZhciBtMSwgbTIsIGh1ZSxcclxuICAgICAgICAgICAgciwgZywgYixcclxuICAgICAgICAgICAgcmdiID0gW107XHJcblxyXG4gICAgICAgIGlmIChzID09PSAwKSB7XHJcbiAgICAgICAgICAgIHIgPSBnID0gYiA9IGwgKiAyNTUgKyAwLjUgfCAwO1xyXG4gICAgICAgICAgICByZ2IgPSBbciwgZywgYl07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAobCA8PSAwLjUpIHtcclxuICAgICAgICAgICAgICAgIG0yID0gbCAqIChzICsgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBtMiA9IGwgKyBzIC0gbCAqIHM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG0xID0gbCAqIDIgLSBtMjtcclxuICAgICAgICAgICAgaHVlID0gaCArIDEgLyAzO1xyXG5cclxuICAgICAgICAgICAgdmFyIHRtcDtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcclxuICAgICAgICAgICAgICAgIGlmIChodWUgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaHVlICs9IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChodWUgPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaHVlIC09IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKDYgKiBodWUgPCAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wID0gbTEgKyAobTIgLSBtMSkgKiBodWUgKiA2O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoMiAqIGh1ZSA8IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0bXAgPSBtMjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKDMgKiBodWUgPCAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wID0gbTEgKyAobTIgLSBtMSkgKiAoMiAvIDMgLSBodWUpICogNjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcCA9IG0xO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJnYltpXSA9IHRtcCAqIDI1NSArIDAuNSB8IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgaHVlIC09IDEgLyAzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmdiO1xyXG4gICAgfVxyXG59O1xyXG5cclxuXHJcbi8vIFRPRE9cclxuSW1hZ2VGaWx0ZXJzLlRyYW5zbGF0ZSA9IGZ1bmN0aW9uIChzcmNJbWFnZURhdGEsIHgsIHksIGludGVycG9sYXRpb24pIHtcclxuXHJcbn07XHJcbkltYWdlRmlsdGVycy5TY2FsZSA9IGZ1bmN0aW9uIChzcmNJbWFnZURhdGEsIHNjYWxlWCwgc2NhbGVZLCBpbnRlcnBvbGF0aW9uKSB7XHJcblxyXG59O1xyXG5JbWFnZUZpbHRlcnMuUm90YXRlID0gZnVuY3Rpb24gKHNyY0ltYWdlRGF0YSwgb3JpZ2luWCwgb3JpZ2luWSwgYW5nbGUsIHJlc2l6ZSwgaW50ZXJwb2xhdGlvbikge1xyXG5cclxufTtcclxuSW1hZ2VGaWx0ZXJzLkFmZmluZSA9IGZ1bmN0aW9uIChzcmNJbWFnZURhdGEsIG1hdHJpeCwgcmVzaXplLCBpbnRlcnBvbGF0aW9uKSB7XHJcblxyXG59O1xyXG5JbWFnZUZpbHRlcnMuVW5zaGFycE1hc2sgPSBmdW5jdGlvbiAoc3JjSW1hZ2VEYXRhLCBsZXZlbCkge1xyXG5cclxufTtcclxuXHJcbkltYWdlRmlsdGVycy5Db252b2x1dGlvbkZpbHRlciA9IGZ1bmN0aW9uIChzcmNJbWFnZURhdGEsIG1hdHJpeFgsIG1hdHJpeFksIG1hdHJpeCwgZGl2aXNvciwgYmlhcywgcHJlc2VydmVBbHBoYSwgY2xhbXAsIGNvbG9yLCBhbHBoYSkge1xyXG4gICAgdmFyIHNyY1BpeGVscyAgICA9IHNyY0ltYWdlRGF0YS5kYXRhLFxyXG4gICAgICAgIHNyY1dpZHRoICAgICA9IHNyY0ltYWdlRGF0YS53aWR0aCxcclxuICAgICAgICBzcmNIZWlnaHQgICAgPSBzcmNJbWFnZURhdGEuaGVpZ2h0LFxyXG4gICAgICAgIHNyY0xlbmd0aCAgICA9IHNyY1BpeGVscy5sZW5ndGgsXHJcbiAgICAgICAgZHN0SW1hZ2VEYXRhID0gdGhpcy51dGlscy5jcmVhdGVJbWFnZURhdGEoc3JjV2lkdGgsIHNyY0hlaWdodCksXHJcbiAgICAgICAgZHN0UGl4ZWxzICAgID0gZHN0SW1hZ2VEYXRhLmRhdGE7XHJcblxyXG4gICAgZGl2aXNvciA9IGRpdmlzb3IgfHwgMTtcclxuICAgIGJpYXMgPSBiaWFzIHx8IDA7XHJcblxyXG4gICAgLy8gZGVmYXVsdCB0cnVlXHJcbiAgICAocHJlc2VydmVBbHBoYSAhPT0gZmFsc2UpICYmIChwcmVzZXJ2ZUFscGhhID0gdHJ1ZSk7XHJcbiAgICAoY2xhbXAgIT09IGZhbHNlKSAmJiAoY2xhbXAgPSB0cnVlKTtcclxuXHJcbiAgICBjb2xvciA9IGNvbG9yIHx8IDA7XHJcbiAgICBhbHBoYSA9IGFscGhhIHx8IDA7XHJcblxyXG4gICAgdmFyIGluZGV4ID0gMCxcclxuICAgICAgICByb3dzID0gbWF0cml4WCA+PiAxLFxyXG4gICAgICAgIGNvbHMgPSBtYXRyaXhZID4+IDEsXHJcbiAgICAgICAgY2xhbXBSID0gY29sb3IgPj4gMTYgJiAweEZGLFxyXG4gICAgICAgIGNsYW1wRyA9IGNvbG9yID4+ICA4ICYgMHhGRixcclxuICAgICAgICBjbGFtcEIgPSBjb2xvciAgICAgICAmIDB4RkYsXHJcbiAgICAgICAgY2xhbXBBID0gYWxwaGEgKiAweEZGO1xyXG5cclxuICAgIGZvciAodmFyIHkgPSAwOyB5IDwgc3JjSGVpZ2h0OyB5ICs9IDEpIHtcclxuICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHNyY1dpZHRoOyB4ICs9IDEsIGluZGV4ICs9IDQpIHtcclxuICAgICAgICAgICAgdmFyIHIgPSAwLFxyXG4gICAgICAgICAgICAgICAgZyA9IDAsXHJcbiAgICAgICAgICAgICAgICBiID0gMCxcclxuICAgICAgICAgICAgICAgIGEgPSAwLFxyXG4gICAgICAgICAgICAgICAgcmVwbGFjZSA9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgbUluZGV4ID0gMCxcclxuICAgICAgICAgICAgICAgIHY7XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciByb3cgPSAtcm93czsgcm93IDw9IHJvd3M7IHJvdyArPSAxKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcm93SW5kZXggPSB5ICsgcm93LFxyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoMCA8PSByb3dJbmRleCAmJiByb3dJbmRleCA8IHNyY0hlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IHJvd0luZGV4ICogc3JjV2lkdGg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjbGFtcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IHkgKiBzcmNXaWR0aDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcGxhY2UgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGNvbCA9IC1jb2xzOyBjb2wgPD0gY29sczsgY29sICs9IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbSA9IG1hdHJpeFttSW5kZXgrK107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb2xJbmRleCA9IHggKyBjb2w7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISgwIDw9IGNvbEluZGV4ICYmIGNvbEluZGV4IDwgc3JjV2lkdGgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2xhbXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xJbmRleCA9IHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcGxhY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgKz0gbSAqIGNsYW1wUjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGcgKz0gbSAqIGNsYW1wRztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIgKz0gbSAqIGNsYW1wQjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgKz0gbSAqIGNsYW1wQTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwID0gKG9mZnNldCArIGNvbEluZGV4KSA8PCAyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgciArPSBtICogc3JjUGl4ZWxzW3BdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZyArPSBtICogc3JjUGl4ZWxzW3AgKyAxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIgKz0gbSAqIHNyY1BpeGVsc1twICsgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhICs9IG0gKiBzcmNQaXhlbHNbcCArIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkc3RQaXhlbHNbaW5kZXhdICAgICA9ICh2ID0gciAvIGRpdmlzb3IgKyBiaWFzKSA+IDI1NSA/IDI1NSA6IHYgPCAwID8gMCA6IHYgfCAwO1xyXG4gICAgICAgICAgICBkc3RQaXhlbHNbaW5kZXggKyAxXSA9ICh2ID0gZyAvIGRpdmlzb3IgKyBiaWFzKSA+IDI1NSA/IDI1NSA6IHYgPCAwID8gMCA6IHYgfCAwO1xyXG4gICAgICAgICAgICBkc3RQaXhlbHNbaW5kZXggKyAyXSA9ICh2ID0gYiAvIGRpdmlzb3IgKyBiaWFzKSA+IDI1NSA/IDI1NSA6IHYgPCAwID8gMCA6IHYgfCAwO1xyXG4gICAgICAgICAgICBkc3RQaXhlbHNbaW5kZXggKyAzXSA9IHByZXNlcnZlQWxwaGEgPyBzcmNQaXhlbHNbaW5kZXggKyAzXSA6ICh2ID0gYSAvIGRpdmlzb3IgKyBiaWFzKSA+IDI1NSA/IDI1NSA6IHYgPCAwID8gMCA6IHYgfCAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZHN0SW1hZ2VEYXRhO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB0aHJlc2hvbGQgMC4wIDw9IG4gPD0gMS4wXHJcbiAqL1xyXG5JbWFnZUZpbHRlcnMuQmluYXJpemUgPSBmdW5jdGlvbiAoc3JjSW1hZ2VEYXRhLCB0aHJlc2hvbGQpIHtcclxuICAgIHZhciBzcmNQaXhlbHMgICAgPSBzcmNJbWFnZURhdGEuZGF0YSxcclxuICAgICAgICBzcmNXaWR0aCAgICAgPSBzcmNJbWFnZURhdGEud2lkdGgsXHJcbiAgICAgICAgc3JjSGVpZ2h0ICAgID0gc3JjSW1hZ2VEYXRhLmhlaWdodCxcclxuICAgICAgICBzcmNMZW5ndGggICAgPSBzcmNQaXhlbHMubGVuZ3RoLFxyXG4gICAgICAgIGRzdEltYWdlRGF0YSA9IHRoaXMudXRpbHMuY3JlYXRlSW1hZ2VEYXRhKHNyY1dpZHRoLCBzcmNIZWlnaHQpLFxyXG4gICAgICAgIGRzdFBpeGVscyAgICA9IGRzdEltYWdlRGF0YS5kYXRhO1xyXG5cclxuICAgIGlmIChpc05hTih0aHJlc2hvbGQpKSB7XHJcbiAgICAgICAgdGhyZXNob2xkID0gMC41O1xyXG4gICAgfVxyXG5cclxuICAgIHRocmVzaG9sZCAqPSAyNTU7XHJcblxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzcmNMZW5ndGg7IGkgKz0gNCkge1xyXG4gICAgICAgIHZhciBhdmcgPSBzcmNQaXhlbHNbaV0gKyBzcmNQaXhlbHNbaSArIDFdICsgc3JjUGl4ZWxzW2kgKyAyXSAvIDM7XHJcblxyXG4gICAgICAgIGRzdFBpeGVsc1tpXSA9IGRzdFBpeGVsc1tpICsgMV0gPSBkc3RQaXhlbHNbaSArIDJdID0gYXZnIDw9IHRocmVzaG9sZCA/IDAgOiAyNTU7XHJcbiAgICAgICAgZHN0UGl4ZWxzW2kgKyAzXSA9IDI1NTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZHN0SW1hZ2VEYXRhO1xyXG59O1xyXG5cclxuSW1hZ2VGaWx0ZXJzLkJsZW5kQWRkID0gZnVuY3Rpb24gKHNyY0ltYWdlRGF0YSwgYmxlbmRJbWFnZURhdGEsIGR4LCBkeSkge1xyXG4gICAgdmFyIHNyY1BpeGVscyAgICA9IHNyY0ltYWdlRGF0YS5kYXRhLFxyXG4gICAgICAgIHNyY1dpZHRoICAgICA9IHNyY0ltYWdlRGF0YS53aWR0aCxcclxuICAgICAgICBzcmNIZWlnaHQgICAgPSBzcmNJbWFnZURhdGEuaGVpZ2h0LFxyXG4gICAgICAgIHNyY0xlbmd0aCAgICA9IHNyY1BpeGVscy5sZW5ndGgsXHJcbiAgICAgICAgZHN0SW1hZ2VEYXRhID0gdGhpcy51dGlscy5jcmVhdGVJbWFnZURhdGEoc3JjV2lkdGgsIHNyY0hlaWdodCksXHJcbiAgICAgICAgZHN0UGl4ZWxzICAgID0gZHN0SW1hZ2VEYXRhLmRhdGEsXHJcbiAgICAgICAgYmxlbmRQaXhlbHMgID0gYmxlbmRJbWFnZURhdGEuZGF0YTtcclxuXHJcbiAgICB2YXIgdjtcclxuXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNyY0xlbmd0aDsgaSArPSA0KSB7XHJcbiAgICAgICAgZHN0UGl4ZWxzW2ldICAgICA9ICgodiA9IHNyY1BpeGVsc1tpXSAgICAgKyBibGVuZFBpeGVsc1tpXSkgICAgID4gMjU1KSA/IDI1NSA6IHY7XHJcbiAgICAgICAgZHN0UGl4ZWxzW2kgKyAxXSA9ICgodiA9IHNyY1BpeGVsc1tpICsgMV0gKyBibGVuZFBpeGVsc1tpICsgMV0pID4gMjU1KSA/IDI1NSA6IHY7XHJcbiAgICAgICAgZHN0UGl4ZWxzW2kgKyAyXSA9ICgodiA9IHNyY1BpeGVsc1tpICsgMl0gKyBibGVuZFBpeGVsc1tpICsgMl0pID4gMjU1KSA/IDI1NSA6IHY7XHJcbiAgICAgICAgZHN0UGl4ZWxzW2kgKyAzXSA9IDI1NTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZHN0SW1hZ2VEYXRhO1xyXG59O1xyXG5cclxuSW1hZ2VGaWx0ZXJzLkJsZW5kU3VidHJhY3QgPSBmdW5jdGlvbiAoc3JjSW1hZ2VEYXRhLCBibGVuZEltYWdlRGF0YSwgZHgsIGR5KSB7XHJcbiAgICB2YXIgc3JjUGl4ZWxzICAgID0gc3JjSW1hZ2VEYXRhLmRhdGEsXHJcbiAgICAgICAgc3JjV2lkdGggICAgID0gc3JjSW1hZ2VEYXRhLndpZHRoLFxyXG4gICAgICAgIHNyY0hlaWdodCAgICA9IHNyY0ltYWdlRGF0YS5oZWlnaHQsXHJcbiAgICAgICAgc3JjTGVuZ3RoICAgID0gc3JjUGl4ZWxzLmxlbmd0aCxcclxuICAgICAgICBkc3RJbWFnZURhdGEgPSB0aGlzLnV0aWxzLmNyZWF0ZUltYWdlRGF0YShzcmNXaWR0aCwgc3JjSGVpZ2h0KSxcclxuICAgICAgICBkc3RQaXhlbHMgICAgPSBkc3RJbWFnZURhdGEuZGF0YSxcclxuICAgICAgICBibGVuZFBpeGVscyAgPSBibGVuZEltYWdlRGF0YS5kYXRhO1xyXG5cclxuICAgIHZhciB2O1xyXG5cclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3JjTGVuZ3RoOyBpICs9IDQpIHtcclxuICAgICAgICBkc3RQaXhlbHNbaV0gICAgID0gKCh2ID0gc3JjUGl4ZWxzW2ldICAgICAtIGJsZW5kUGl4ZWxzW2ldKSAgICAgPCAwKSA/IDAgOiB2O1xyXG4gICAgICAgIGRzdFBpeGVsc1tpICsgMV0gPSAoKHYgPSBzcmNQaXhlbHNbaSArIDFdIC0gYmxlbmRQaXhlbHNbaSArIDFdKSA8IDApID8gMCA6IHY7XHJcbiAgICAgICAgZHN0UGl4ZWxzW2kgKyAyXSA9ICgodiA9IHNyY1BpeGVsc1tpICsgMl0gLSBibGVuZFBpeGVsc1tpICsgMl0pIDwgMCkgPyAwIDogdjtcclxuICAgICAgICBkc3RQaXhlbHNbaSArIDNdID0gMjU1O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBkc3RJbWFnZURhdGE7XHJcbn07XHJcblxyXG4vKipcclxuICogQWxnb3JpdGhtIGJhc2VkIG9uIEJveEJsdXJGaWx0ZXIuamF2YSBieSBIdXh0YWJsZS5jb21cclxuICogQHNlZSBodHRwOi8vd3d3LmpobGFicy5jb20vaXAvYmx1cnJpbmcuaHRtbFxyXG4gKiBDb3B5cmlnaHQgMjAwNSBIdXh0YWJsZS5jb20uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqL1xyXG5JbWFnZUZpbHRlcnMuQm94Qmx1ciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgYmx1ciA9IGZ1bmN0aW9uKHNyYywgZHN0LCB3aWR0aCwgaGVpZ2h0LCByYWRpdXMpIHtcclxuICAgICAgICB2YXIgdGFibGVTaXplID0gcmFkaXVzICogMiArIDE7XHJcbiAgICAgICAgdmFyIHJhZGl1c1BsdXMxID0gcmFkaXVzICsgMTtcclxuICAgICAgICB2YXIgd2lkdGhNaW51czEgPSB3aWR0aCAtIDE7XHJcblxyXG4gICAgICAgIHZhciByLCBnLCBiLCBhO1xyXG5cclxuICAgICAgICB2YXIgc3JjSW5kZXggPSAwO1xyXG4gICAgICAgIHZhciBkc3RJbmRleDtcclxuICAgICAgICB2YXIgcCwgbmV4dCwgcHJldjtcclxuICAgICAgICB2YXIgaSwgbCwgeCwgeSxcclxuICAgICAgICAgICAgbmV4dEluZGV4LCBwcmV2SW5kZXg7XHJcblxyXG4gICAgICAgIHZhciBzdW1UYWJsZSA9IFtdO1xyXG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSAyNTYgKiB0YWJsZVNpemU7IGkgPCBsOyBpICs9IDEpIHtcclxuICAgICAgICAgICAgc3VtVGFibGVbaV0gPSBpIC8gdGFibGVTaXplIHwgMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAoeSA9IDA7IHkgPCBoZWlnaHQ7IHkgKz0gMSkge1xyXG4gICAgICAgICAgICByID0gZyA9IGIgPSBhID0gMDtcclxuICAgICAgICAgICAgZHN0SW5kZXggPSB5O1xyXG5cclxuICAgICAgICAgICAgcCA9IHNyY0luZGV4IDw8IDI7XHJcbiAgICAgICAgICAgIHIgKz0gcmFkaXVzUGx1czEgKiBzcmNbcF07XHJcbiAgICAgICAgICAgIGcgKz0gcmFkaXVzUGx1czEgKiBzcmNbcCArIDFdO1xyXG4gICAgICAgICAgICBiICs9IHJhZGl1c1BsdXMxICogc3JjW3AgKyAyXTtcclxuICAgICAgICAgICAgYSArPSByYWRpdXNQbHVzMSAqIHNyY1twICsgM107XHJcblxyXG4gICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDw9IHJhZGl1czsgaSArPSAxKSB7XHJcbiAgICAgICAgICAgICAgICBwID0gKHNyY0luZGV4ICsgKGkgPCB3aWR0aCA/IGkgOiB3aWR0aE1pbnVzMSkpIDw8IDI7XHJcbiAgICAgICAgICAgICAgICByICs9IHNyY1twXTtcclxuICAgICAgICAgICAgICAgIGcgKz0gc3JjW3AgKyAxXTtcclxuICAgICAgICAgICAgICAgIGIgKz0gc3JjW3AgKyAyXTtcclxuICAgICAgICAgICAgICAgIGEgKz0gc3JjW3AgKyAzXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yICh4ID0gMDsgeCA8IHdpZHRoOyB4ICs9IDEpIHtcclxuICAgICAgICAgICAgICAgIHAgPSBkc3RJbmRleCA8PCAyO1xyXG4gICAgICAgICAgICAgICAgZHN0W3BdICAgICA9IHN1bVRhYmxlW3JdO1xyXG4gICAgICAgICAgICAgICAgZHN0W3AgKyAxXSA9IHN1bVRhYmxlW2ddO1xyXG4gICAgICAgICAgICAgICAgZHN0W3AgKyAyXSA9IHN1bVRhYmxlW2JdO1xyXG4gICAgICAgICAgICAgICAgZHN0W3AgKyAzXSA9IHN1bVRhYmxlW2FdO1xyXG5cclxuICAgICAgICAgICAgICAgIG5leHRJbmRleCA9IHggKyByYWRpdXNQbHVzMTtcclxuICAgICAgICAgICAgICAgIGlmIChuZXh0SW5kZXggPiB3aWR0aE1pbnVzMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHRJbmRleCA9IHdpZHRoTWludXMxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHByZXZJbmRleCA9IHggLSByYWRpdXM7XHJcbiAgICAgICAgICAgICAgICBpZiAocHJldkluZGV4IDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByZXZJbmRleCA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbmV4dCA9IChzcmNJbmRleCArIG5leHRJbmRleCkgPDwgMjtcclxuICAgICAgICAgICAgICAgIHByZXYgPSAoc3JjSW5kZXggKyBwcmV2SW5kZXgpIDw8IDI7XHJcblxyXG4gICAgICAgICAgICAgICAgciArPSBzcmNbbmV4dF0gICAgIC0gc3JjW3ByZXZdO1xyXG4gICAgICAgICAgICAgICAgZyArPSBzcmNbbmV4dCArIDFdIC0gc3JjW3ByZXYgKyAxXTtcclxuICAgICAgICAgICAgICAgIGIgKz0gc3JjW25leHQgKyAyXSAtIHNyY1twcmV2ICsgMl07XHJcbiAgICAgICAgICAgICAgICBhICs9IHNyY1tuZXh0ICsgM10gLSBzcmNbcHJldiArIDNdO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBkc3RJbmRleCArPSBoZWlnaHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc3JjSW5kZXggKz0gd2lkdGg7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzcmNJbWFnZURhdGEsIGhSYWRpdXMsIHZSYWRpdXMsIHF1YWxpdHkpIHtcclxuICAgICAgICB2YXIgc3JjUGl4ZWxzICAgID0gc3JjSW1hZ2VEYXRhLmRhdGEsXHJcbiAgICAgICAgICAgIHNyY1dpZHRoICAgICA9IHNyY0ltYWdlRGF0YS53aWR0aCxcclxuICAgICAgICAgICAgc3JjSGVpZ2h0ICAgID0gc3JjSW1hZ2VEYXRhLmhlaWdodCxcclxuICAgICAgICAgICAgc3JjTGVuZ3RoICAgID0gc3JjUGl4ZWxzLmxlbmd0aCxcclxuICAgICAgICAgICAgZHN0SW1hZ2VEYXRhID0gdGhpcy51dGlscy5jcmVhdGVJbWFnZURhdGEoc3JjV2lkdGgsIHNyY0hlaWdodCksXHJcbiAgICAgICAgICAgIGRzdFBpeGVscyAgICA9IGRzdEltYWdlRGF0YS5kYXRhLFxyXG4gICAgICAgICAgICB0bXBJbWFnZURhdGEgPSB0aGlzLnV0aWxzLmNyZWF0ZUltYWdlRGF0YShzcmNXaWR0aCwgc3JjSGVpZ2h0KSxcclxuICAgICAgICAgICAgdG1wUGl4ZWxzICAgID0gdG1wSW1hZ2VEYXRhLmRhdGE7XHJcblxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVhbGl0eTsgaSArPSAxKSB7XHJcbiAgICAgICAgICAgIC8vIG9ubHkgdXNlIHRoZSBzcmNQaXhlbHMgb24gdGhlIGZpcnN0IGxvb3BcclxuICAgICAgICAgICAgYmx1cihpID8gZHN0UGl4ZWxzIDogc3JjUGl4ZWxzLCB0bXBQaXhlbHMsIHNyY1dpZHRoLCBzcmNIZWlnaHQsIGhSYWRpdXMpO1xyXG4gICAgICAgICAgICBibHVyKHRtcFBpeGVscywgZHN0UGl4ZWxzLCBzcmNIZWlnaHQsIHNyY1dpZHRoLCB2UmFkaXVzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBkc3RJbWFnZURhdGE7XHJcbiAgICB9O1xyXG59KCkpO1xyXG5cclxuLyoqXHJcbiAqIEAgcGFyYW0gc3RyZW5ndGggMSA8PSBuIDw9IDRcclxuICovXHJcbkltYWdlRmlsdGVycy5HYXVzc2lhbkJsdXIgPSBmdW5jdGlvbiAoc3JjSW1hZ2VEYXRhLCBzdHJlbmd0aCkge1xyXG4gICAgdmFyIHNpemUsIG1hdHJpeCwgZGl2aXNvcjtcclxuXHJcbiAgICBzd2l0Y2ggKHN0cmVuZ3RoKSB7XHJcbiAgICBjYXNlIDI6XHJcbiAgICAgICAgc2l6ZSA9IDU7XHJcbiAgICAgICAgbWF0cml4ID0gW1xyXG4gICAgICAgICAgICAxLCAxLCAyLCAxLCAxLFxyXG4gICAgICAgICAgICAxLCAyLCA0LCAyLCAxLFxyXG4gICAgICAgICAgICAyLCA0LCA4LCA0LCAyLFxyXG4gICAgICAgICAgICAxLCAyLCA0LCAyLCAxLFxyXG4gICAgICAgICAgICAxLCAxLCAyLCAxLCAxXHJcbiAgICAgICAgXTtcclxuICAgICAgICBkaXZpc29yID0gNTI7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDM6XHJcbiAgICAgICAgc2l6ZSA9IDc7XHJcbiAgICAgICAgbWF0cml4ID0gW1xyXG4gICAgICAgICAgICAxLCAxLCAyLCAgMiwgMiwgMSwgMSxcclxuICAgICAgICAgICAgMSwgMiwgMiwgIDQsIDIsIDIsIDEsXHJcbiAgICAgICAgICAgIDIsIDIsIDQsICA4LCA0LCAyLCAyLFxyXG4gICAgICAgICAgICAyLCA0LCA4LCAxNiwgOCwgNCwgMixcclxuICAgICAgICAgICAgMiwgMiwgNCwgIDgsIDQsIDIsIDIsXHJcbiAgICAgICAgICAgIDEsIDIsIDIsICA0LCAyLCAyLCAxLFxyXG4gICAgICAgICAgICAxLCAxLCAyLCAgMiwgMiwgMSwgMVxyXG4gICAgICAgIF07XHJcbiAgICAgICAgZGl2aXNvciA9IDE0MDtcclxuICAgICAgICBicmVhaztcclxuICAgIGNhc2UgNDpcclxuICAgICAgICBzaXplID0gMTU7XHJcbiAgICAgICAgbWF0cml4ID0gW1xyXG4gICAgICAgICAgICAyICwyICwgMyAsIDQgLCA1ICwgNSAsIDYgLCA2ICwgNiAsIDUgLCA1ICwgNCAsIDMgLDIgLDIsXHJcbiAgICAgICAgICAgIDIgLDMgLCA0ICwgNSAsIDcgLCA3ICwgOCAsIDggLCA4ICwgNyAsIDcgLCA1ICwgNCAsMyAsMixcclxuICAgICAgICAgICAgMyAsNCAsIDYgLCA3ICwgOSAsMTAgLDEwICwxMSAsMTAgLDEwICwgOSAsIDcgLCA2ICw0ICwzLFxyXG4gICAgICAgICAgICA0ICw1ICwgNyAsIDkgLDEwICwxMiAsMTMgLDEzICwxMyAsMTIgLDEwICwgOSAsIDcgLDUgLDQsXHJcbiAgICAgICAgICAgIDUgLDcgLCA5ICwxMSAsMTMgLDE0ICwxNSAsMTYgLDE1ICwxNCAsMTMgLDExICwgOSAsNyAsNSxcclxuICAgICAgICAgICAgNSAsNyAsMTAgLDEyICwxNCAsMTYgLDE3ICwxOCAsMTcgLDE2ICwxNCAsMTIgLDEwICw3ICw1LFxyXG4gICAgICAgICAgICA2ICw4ICwxMCAsMTMgLDE1ICwxNyAsMTkgLDE5ICwxOSAsMTcgLDE1ICwxMyAsMTAgLDggLDYsXHJcbiAgICAgICAgICAgIDYgLDggLDExICwxMyAsMTYgLDE4ICwxOSAsMjAgLDE5ICwxOCAsMTYgLDEzICwxMSAsOCAsNixcclxuICAgICAgICAgICAgNiAsOCAsMTAgLDEzICwxNSAsMTcgLDE5ICwxOSAsMTkgLDE3ICwxNSAsMTMgLDEwICw4ICw2LFxyXG4gICAgICAgICAgICA1ICw3ICwxMCAsMTIgLDE0ICwxNiAsMTcgLDE4ICwxNyAsMTYgLDE0ICwxMiAsMTAgLDcgLDUsXHJcbiAgICAgICAgICAgIDUgLDcgLCA5ICwxMSAsMTMgLDE0ICwxNSAsMTYgLDE1ICwxNCAsMTMgLDExICwgOSAsNyAsNSxcclxuICAgICAgICAgICAgNCAsNSAsIDcgLCA5ICwxMCAsMTIgLDEzICwxMyAsMTMgLDEyICwxMCAsIDkgLCA3ICw1ICw0LFxyXG4gICAgICAgICAgICAzICw0ICwgNiAsIDcgLCA5ICwxMCAsMTAgLDExICwxMCAsMTAgLCA5ICwgNyAsIDYgLDQgLDMsXHJcbiAgICAgICAgICAgIDIgLDMgLCA0ICwgNSAsIDcgLCA3ICwgOCAsIDggLCA4ICwgNyAsIDcgLCA1ICwgNCAsMyAsMixcclxuICAgICAgICAgICAgMiAsMiAsIDMgLCA0ICwgNSAsIDUgLCA2ICwgNiAsIDYgLCA1ICwgNSAsIDQgLCAzICwyICwyXHJcbiAgICAgICAgXTtcclxuICAgICAgICBkaXZpc29yID0gMjA0NDtcclxuICAgICAgICBicmVhaztcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgc2l6ZSA9IDM7XHJcbiAgICAgICAgbWF0cml4ID0gW1xyXG4gICAgICAgICAgICAxLCAyLCAxLFxyXG4gICAgICAgICAgICAyLCA0LCAyLFxyXG4gICAgICAgICAgICAxLCAyLCAxXHJcbiAgICAgICAgXTtcclxuICAgICAgICBkaXZpc29yID0gMTY7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5Db252b2x1dGlvbkZpbHRlcihzcmNJbWFnZURhdGEsIHNpemUsIHNpemUsIG1hdHJpeCwgZGl2aXNvciwgMCwgZmFsc2UpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFN0YWNrIEJsdXIgQWxnb3JpdGhtIGJ5IE1hcmlvIEtsaW5nZW1hbm4gPG1hcmlvQHF1YXNpbW9uZG8uY29tPlxyXG4gKiBAc2VlIGh0dHA6Ly9pbmN1YmF0b3IucXVhc2ltb25kby5jb20vcHJvY2Vzc2luZy9mYXN0X2JsdXJfZGVsdXhlLnBocFxyXG4gKi9cclxuLypcclxuQ29weXJpZ2h0IChjKSAyMDEwIE1hcmlvIEtsaW5nZW1hbm5cclxuXHJcblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uXHJcbm9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uXHJcbmZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dFxyXG5yZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSxcclxuY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcclxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlXHJcblNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nXHJcbmNvbmRpdGlvbnM6XHJcblxyXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxyXG5pbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXHJcbkVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFU1xyXG5PRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORFxyXG5OT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVFxyXG5IT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSxcclxuV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HXHJcbkZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1JcclxuT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxyXG4qL1xyXG5JbWFnZUZpbHRlcnMuU3RhY2tCbHVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBtdWxfdGFibGUgPSBbXHJcbiAgICAgICAgNTEyLDUxMiw0NTYsNTEyLDMyOCw0NTYsMzM1LDUxMiw0MDUsMzI4LDI3MSw0NTYsMzg4LDMzNSwyOTIsNTEyLFxyXG4gICAgICAgIDQ1NCw0MDUsMzY0LDMyOCwyOTgsMjcxLDQ5Niw0NTYsNDIwLDM4OCwzNjAsMzM1LDMxMiwyOTIsMjczLDUxMixcclxuICAgICAgICA0ODIsNDU0LDQyOCw0MDUsMzgzLDM2NCwzNDUsMzI4LDMxMiwyOTgsMjg0LDI3MSwyNTksNDk2LDQ3NSw0NTYsXHJcbiAgICAgICAgNDM3LDQyMCw0MDQsMzg4LDM3NCwzNjAsMzQ3LDMzNSwzMjMsMzEyLDMwMiwyOTIsMjgyLDI3MywyNjUsNTEyLFxyXG4gICAgICAgIDQ5Nyw0ODIsNDY4LDQ1NCw0NDEsNDI4LDQxNyw0MDUsMzk0LDM4MywzNzMsMzY0LDM1NCwzNDUsMzM3LDMyOCxcclxuICAgICAgICAzMjAsMzEyLDMwNSwyOTgsMjkxLDI4NCwyNzgsMjcxLDI2NSwyNTksNTA3LDQ5Niw0ODUsNDc1LDQ2NSw0NTYsXHJcbiAgICAgICAgNDQ2LDQzNyw0MjgsNDIwLDQxMiw0MDQsMzk2LDM4OCwzODEsMzc0LDM2NywzNjAsMzU0LDM0NywzNDEsMzM1LFxyXG4gICAgICAgIDMyOSwzMjMsMzE4LDMxMiwzMDcsMzAyLDI5NywyOTIsMjg3LDI4MiwyNzgsMjczLDI2OSwyNjUsMjYxLDUxMixcclxuICAgICAgICA1MDUsNDk3LDQ4OSw0ODIsNDc1LDQ2OCw0NjEsNDU0LDQ0Nyw0NDEsNDM1LDQyOCw0MjIsNDE3LDQxMSw0MDUsXHJcbiAgICAgICAgMzk5LDM5NCwzODksMzgzLDM3OCwzNzMsMzY4LDM2NCwzNTksMzU0LDM1MCwzNDUsMzQxLDMzNywzMzIsMzI4LFxyXG4gICAgICAgIDMyNCwzMjAsMzE2LDMxMiwzMDksMzA1LDMwMSwyOTgsMjk0LDI5MSwyODcsMjg0LDI4MSwyNzgsMjc0LDI3MSxcclxuICAgICAgICAyNjgsMjY1LDI2MiwyNTksMjU3LDUwNyw1MDEsNDk2LDQ5MSw0ODUsNDgwLDQ3NSw0NzAsNDY1LDQ2MCw0NTYsXHJcbiAgICAgICAgNDUxLDQ0Niw0NDIsNDM3LDQzMyw0MjgsNDI0LDQyMCw0MTYsNDEyLDQwOCw0MDQsNDAwLDM5NiwzOTIsMzg4LFxyXG4gICAgICAgIDM4NSwzODEsMzc3LDM3NCwzNzAsMzY3LDM2MywzNjAsMzU3LDM1NCwzNTAsMzQ3LDM0NCwzNDEsMzM4LDMzNSxcclxuICAgICAgICAzMzIsMzI5LDMyNiwzMjMsMzIwLDMxOCwzMTUsMzEyLDMxMCwzMDcsMzA0LDMwMiwyOTksMjk3LDI5NCwyOTIsXHJcbiAgICAgICAgMjg5LDI4NywyODUsMjgyLDI4MCwyNzgsMjc1LDI3MywyNzEsMjY5LDI2NywyNjUsMjYzLDI2MSwyNTldO1xyXG4gICAgICAgIFxyXG4gICBcclxuICAgIHZhciBzaGdfdGFibGUgPSBbXHJcbiAgICAgICAgIDksIDExLCAxMiwgMTMsIDEzLCAxNCwgMTQsIDE1LCAxNSwgMTUsIDE1LCAxNiwgMTYsIDE2LCAxNiwgMTcsIFxyXG4gICAgICAgIDE3LCAxNywgMTcsIDE3LCAxNywgMTcsIDE4LCAxOCwgMTgsIDE4LCAxOCwgMTgsIDE4LCAxOCwgMTgsIDE5LCBcclxuICAgICAgICAxOSwgMTksIDE5LCAxOSwgMTksIDE5LCAxOSwgMTksIDE5LCAxOSwgMTksIDE5LCAxOSwgMjAsIDIwLCAyMCxcclxuICAgICAgICAyMCwgMjAsIDIwLCAyMCwgMjAsIDIwLCAyMCwgMjAsIDIwLCAyMCwgMjAsIDIwLCAyMCwgMjAsIDIwLCAyMSxcclxuICAgICAgICAyMSwgMjEsIDIxLCAyMSwgMjEsIDIxLCAyMSwgMjEsIDIxLCAyMSwgMjEsIDIxLCAyMSwgMjEsIDIxLCAyMSxcclxuICAgICAgICAyMSwgMjEsIDIxLCAyMSwgMjEsIDIxLCAyMSwgMjEsIDIxLCAyMSwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgXHJcbiAgICAgICAgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsXHJcbiAgICAgICAgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjMsIFxyXG4gICAgICAgIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLFxyXG4gICAgICAgIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLFxyXG4gICAgICAgIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCBcclxuICAgICAgICAyMywgMjMsIDIzLCAyMywgMjMsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgXHJcbiAgICAgICAgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsXHJcbiAgICAgICAgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsXHJcbiAgICAgICAgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsXHJcbiAgICAgICAgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCBdO1xyXG4gICAgXHJcbiAgICBmdW5jdGlvbiBCbHVyU3RhY2soKSB7XHJcbiAgICAgICAgdGhpcy5yID0gMDtcclxuICAgICAgICB0aGlzLmcgPSAwO1xyXG4gICAgICAgIHRoaXMuYiA9IDA7XHJcbiAgICAgICAgdGhpcy5hID0gMDtcclxuICAgICAgICB0aGlzLm5leHQgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNyY0ltYWdlRGF0YSwgcmFkaXVzKSB7XHJcbiAgICAgICAgdmFyIHNyY1BpeGVscyAgICA9IHNyY0ltYWdlRGF0YS5kYXRhLFxyXG4gICAgICAgICAgICBzcmNXaWR0aCAgICAgPSBzcmNJbWFnZURhdGEud2lkdGgsXHJcbiAgICAgICAgICAgIHNyY0hlaWdodCAgICA9IHNyY0ltYWdlRGF0YS5oZWlnaHQsXHJcbiAgICAgICAgICAgIHNyY0xlbmd0aCAgICA9IHNyY1BpeGVscy5sZW5ndGgsXHJcbiAgICAgICAgICAgIGRzdEltYWdlRGF0YSA9IHRoaXMuQ2xvbmUoc3JjSW1hZ2VEYXRhKSxcclxuICAgICAgICAgICAgZHN0UGl4ZWxzICAgID0gZHN0SW1hZ2VEYXRhLmRhdGE7XHJcblxyXG4gICAgICAgIHZhciB4LCB5LCBpLCBwLCB5cCwgeWksIHl3LFxyXG4gICAgICAgICAgICByX3N1bSwgZ19zdW0sIGJfc3VtLCBhX3N1bSwgXHJcbiAgICAgICAgICAgIHJfb3V0X3N1bSwgZ19vdXRfc3VtLCBiX291dF9zdW0sIGFfb3V0X3N1bSxcclxuICAgICAgICAgICAgcl9pbl9zdW0sIGdfaW5fc3VtLCBiX2luX3N1bSwgYV9pbl9zdW0sIFxyXG4gICAgICAgICAgICBwciwgcGcsIHBiLCBwYSwgcmJzLFxyXG4gICAgICAgICAgICBkaXYgPSByYWRpdXMgKyByYWRpdXMgKyAxLFxyXG4gICAgICAgICAgICB3NCA9IHNyY1dpZHRoIDw8IDIsXHJcbiAgICAgICAgICAgIHdpZHRoTWludXMxICA9IHNyY1dpZHRoIC0gMSxcclxuICAgICAgICAgICAgaGVpZ2h0TWludXMxID0gc3JjSGVpZ2h0IC0gMSxcclxuICAgICAgICAgICAgcmFkaXVzUGx1czEgID0gcmFkaXVzICsgMSxcclxuICAgICAgICAgICAgc3VtRmFjdG9yID0gcmFkaXVzUGx1czEgKiAoIHJhZGl1c1BsdXMxICsgMSApIC8gMixcclxuICAgICAgICAgICAgc3RhY2tTdGFydCA9IG5ldyBCbHVyU3RhY2soKSxcclxuICAgICAgICAgICAgc3RhY2sgPSBzdGFja1N0YXJ0LFxyXG4gICAgICAgICAgICBzdGFja0luLCBzdGFja091dCwgc3RhY2tFbmQsXHJcbiAgICAgICAgICAgIG11bF9zdW0gPSBtdWxfdGFibGVbcmFkaXVzXSxcclxuICAgICAgICAgICAgc2hnX3N1bSA9IHNoZ190YWJsZVtyYWRpdXNdO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBkaXY7IGkgKz0gMSkge1xyXG4gICAgICAgICAgICBzdGFjayA9IHN0YWNrLm5leHQgPSBuZXcgQmx1clN0YWNrKCk7XHJcbiAgICAgICAgICAgIGlmIChpID09IHJhZGl1c1BsdXMxKSB7XHJcbiAgICAgICAgICAgICAgICBzdGFja0VuZCA9IHN0YWNrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHN0YWNrLm5leHQgPSBzdGFja1N0YXJ0O1xyXG4gICAgICAgIHl3ID0geWkgPSAwO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGZvciAoeSA9IDA7IHkgPCBzcmNIZWlnaHQ7IHkgKz0gMSkge1xyXG4gICAgICAgICAgICByX2luX3N1bSA9IGdfaW5fc3VtID0gYl9pbl9zdW0gPSBhX2luX3N1bSA9IHJfc3VtID0gZ19zdW0gPSBiX3N1bSA9IGFfc3VtID0gMDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHJfb3V0X3N1bSA9IHJhZGl1c1BsdXMxICogKHByID0gZHN0UGl4ZWxzW3lpXSk7XHJcbiAgICAgICAgICAgIGdfb3V0X3N1bSA9IHJhZGl1c1BsdXMxICogKHBnID0gZHN0UGl4ZWxzW3lpICsgMV0pO1xyXG4gICAgICAgICAgICBiX291dF9zdW0gPSByYWRpdXNQbHVzMSAqIChwYiA9IGRzdFBpeGVsc1t5aSArIDJdKTtcclxuICAgICAgICAgICAgYV9vdXRfc3VtID0gcmFkaXVzUGx1czEgKiAocGEgPSBkc3RQaXhlbHNbeWkgKyAzXSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICByX3N1bSArPSBzdW1GYWN0b3IgKiBwcjtcclxuICAgICAgICAgICAgZ19zdW0gKz0gc3VtRmFjdG9yICogcGc7XHJcbiAgICAgICAgICAgIGJfc3VtICs9IHN1bUZhY3RvciAqIHBiO1xyXG4gICAgICAgICAgICBhX3N1bSArPSBzdW1GYWN0b3IgKiBwYTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHN0YWNrID0gc3RhY2tTdGFydDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCByYWRpdXNQbHVzMTsgaSArPSAxKSB7XHJcbiAgICAgICAgICAgICAgICBzdGFjay5yID0gcHI7XHJcbiAgICAgICAgICAgICAgICBzdGFjay5nID0gcGc7XHJcbiAgICAgICAgICAgICAgICBzdGFjay5iID0gcGI7XHJcbiAgICAgICAgICAgICAgICBzdGFjay5hID0gcGE7XHJcbiAgICAgICAgICAgICAgICBzdGFjayA9IHN0YWNrLm5leHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGZvciAoaSA9IDE7IGkgPCByYWRpdXNQbHVzMTsgaSArPSAxKSB7XHJcbiAgICAgICAgICAgICAgICBwID0geWkgKyAoKHdpZHRoTWludXMxIDwgaSA/IHdpZHRoTWludXMxIDogaSkgPDwgMik7XHJcbiAgICAgICAgICAgICAgICByX3N1bSArPSAoc3RhY2suciA9IChwciA9IGRzdFBpeGVsc1twXSkpICogKHJicyA9IHJhZGl1c1BsdXMxIC0gaSk7XHJcbiAgICAgICAgICAgICAgICBnX3N1bSArPSAoc3RhY2suZyA9IChwZyA9IGRzdFBpeGVsc1twICsgMV0pKSAqIHJicztcclxuICAgICAgICAgICAgICAgIGJfc3VtICs9IChzdGFjay5iID0gKHBiID0gZHN0UGl4ZWxzW3AgKyAyXSkpICogcmJzO1xyXG4gICAgICAgICAgICAgICAgYV9zdW0gKz0gKHN0YWNrLmEgPSAocGEgPSBkc3RQaXhlbHNbcCArIDNdKSkgKiByYnM7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHJfaW5fc3VtICs9IHByO1xyXG4gICAgICAgICAgICAgICAgZ19pbl9zdW0gKz0gcGc7XHJcbiAgICAgICAgICAgICAgICBiX2luX3N1bSArPSBwYjtcclxuICAgICAgICAgICAgICAgIGFfaW5fc3VtICs9IHBhO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBzdGFjayA9IHN0YWNrLm5leHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHN0YWNrSW4gPSBzdGFja1N0YXJ0O1xyXG4gICAgICAgICAgICBzdGFja091dCA9IHN0YWNrRW5kO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZm9yICh4ID0gMDsgeCA8IHNyY1dpZHRoOyB4ICs9IDEpIHtcclxuICAgICAgICAgICAgICAgIGRzdFBpeGVsc1t5aV0gICAgID0gKHJfc3VtICogbXVsX3N1bSkgPj4gc2hnX3N1bTtcclxuICAgICAgICAgICAgICAgIGRzdFBpeGVsc1t5aSArIDFdID0gKGdfc3VtICogbXVsX3N1bSkgPj4gc2hnX3N1bTtcclxuICAgICAgICAgICAgICAgIGRzdFBpeGVsc1t5aSArIDJdID0gKGJfc3VtICogbXVsX3N1bSkgPj4gc2hnX3N1bTtcclxuICAgICAgICAgICAgICAgIGRzdFBpeGVsc1t5aSArIDNdID0gKGFfc3VtICogbXVsX3N1bSkgPj4gc2hnX3N1bTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgcl9zdW0gLT0gcl9vdXRfc3VtO1xyXG4gICAgICAgICAgICAgICAgZ19zdW0gLT0gZ19vdXRfc3VtO1xyXG4gICAgICAgICAgICAgICAgYl9zdW0gLT0gYl9vdXRfc3VtO1xyXG4gICAgICAgICAgICAgICAgYV9zdW0gLT0gYV9vdXRfc3VtO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICByX291dF9zdW0gLT0gc3RhY2tJbi5yO1xyXG4gICAgICAgICAgICAgICAgZ19vdXRfc3VtIC09IHN0YWNrSW4uZztcclxuICAgICAgICAgICAgICAgIGJfb3V0X3N1bSAtPSBzdGFja0luLmI7XHJcbiAgICAgICAgICAgICAgICBhX291dF9zdW0gLT0gc3RhY2tJbi5hO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBwID0gICh5dyArICgocCA9IHggKyByYWRpdXMgKyAxKSA8IHdpZHRoTWludXMxID8gcCA6IHdpZHRoTWludXMxKSkgPDwgMjtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgcl9pbl9zdW0gKz0gKHN0YWNrSW4uciA9IGRzdFBpeGVsc1twXSk7XHJcbiAgICAgICAgICAgICAgICBnX2luX3N1bSArPSAoc3RhY2tJbi5nID0gZHN0UGl4ZWxzW3AgKyAxXSk7XHJcbiAgICAgICAgICAgICAgICBiX2luX3N1bSArPSAoc3RhY2tJbi5iID0gZHN0UGl4ZWxzW3AgKyAyXSk7XHJcbiAgICAgICAgICAgICAgICBhX2luX3N1bSArPSAoc3RhY2tJbi5hID0gZHN0UGl4ZWxzW3AgKyAzXSk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHJfc3VtICs9IHJfaW5fc3VtO1xyXG4gICAgICAgICAgICAgICAgZ19zdW0gKz0gZ19pbl9zdW07XHJcbiAgICAgICAgICAgICAgICBiX3N1bSArPSBiX2luX3N1bTtcclxuICAgICAgICAgICAgICAgIGFfc3VtICs9IGFfaW5fc3VtO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBzdGFja0luID0gc3RhY2tJbi5uZXh0O1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICByX291dF9zdW0gKz0gKHByID0gc3RhY2tPdXQucik7XHJcbiAgICAgICAgICAgICAgICBnX291dF9zdW0gKz0gKHBnID0gc3RhY2tPdXQuZyk7XHJcbiAgICAgICAgICAgICAgICBiX291dF9zdW0gKz0gKHBiID0gc3RhY2tPdXQuYik7XHJcbiAgICAgICAgICAgICAgICBhX291dF9zdW0gKz0gKHBhID0gc3RhY2tPdXQuYSk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHJfaW5fc3VtIC09IHByO1xyXG4gICAgICAgICAgICAgICAgZ19pbl9zdW0gLT0gcGc7XHJcbiAgICAgICAgICAgICAgICBiX2luX3N1bSAtPSBwYjtcclxuICAgICAgICAgICAgICAgIGFfaW5fc3VtIC09IHBhO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBzdGFja091dCA9IHN0YWNrT3V0Lm5leHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgeWkgKz0gNDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgeXcgKz0gc3JjV2lkdGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGZvciAoeCA9IDA7IHggPCBzcmNXaWR0aDsgeCArPSAxKSB7XHJcbiAgICAgICAgICAgIGdfaW5fc3VtID0gYl9pbl9zdW0gPSBhX2luX3N1bSA9IHJfaW5fc3VtID0gZ19zdW0gPSBiX3N1bSA9IGFfc3VtID0gcl9zdW0gPSAwO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgeWkgPSB4IDw8IDI7XHJcbiAgICAgICAgICAgIHJfb3V0X3N1bSA9IHJhZGl1c1BsdXMxICogKHByID0gZHN0UGl4ZWxzW3lpXSk7XHJcbiAgICAgICAgICAgIGdfb3V0X3N1bSA9IHJhZGl1c1BsdXMxICogKHBnID0gZHN0UGl4ZWxzW3lpICsgMV0pO1xyXG4gICAgICAgICAgICBiX291dF9zdW0gPSByYWRpdXNQbHVzMSAqIChwYiA9IGRzdFBpeGVsc1t5aSArIDJdKTtcclxuICAgICAgICAgICAgYV9vdXRfc3VtID0gcmFkaXVzUGx1czEgKiAocGEgPSBkc3RQaXhlbHNbeWkgKyAzXSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICByX3N1bSArPSBzdW1GYWN0b3IgKiBwcjtcclxuICAgICAgICAgICAgZ19zdW0gKz0gc3VtRmFjdG9yICogcGc7XHJcbiAgICAgICAgICAgIGJfc3VtICs9IHN1bUZhY3RvciAqIHBiO1xyXG4gICAgICAgICAgICBhX3N1bSArPSBzdW1GYWN0b3IgKiBwYTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHN0YWNrID0gc3RhY2tTdGFydDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCByYWRpdXNQbHVzMTsgaSArPSAxKSB7XHJcbiAgICAgICAgICAgICAgICBzdGFjay5yID0gcHI7XHJcbiAgICAgICAgICAgICAgICBzdGFjay5nID0gcGc7XHJcbiAgICAgICAgICAgICAgICBzdGFjay5iID0gcGI7XHJcbiAgICAgICAgICAgICAgICBzdGFjay5hID0gcGE7XHJcbiAgICAgICAgICAgICAgICBzdGFjayA9IHN0YWNrLm5leHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHlwID0gc3JjV2lkdGg7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDw9IHJhZGl1czsgaSArPSAxKSB7XHJcbiAgICAgICAgICAgICAgICB5aSA9ICh5cCArIHgpIDw8IDI7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHJfc3VtICs9IChzdGFjay5yID0gKHByID0gZHN0UGl4ZWxzW3lpXSkpICogKHJicyA9IHJhZGl1c1BsdXMxIC0gaSk7XHJcbiAgICAgICAgICAgICAgICBnX3N1bSArPSAoc3RhY2suZyA9IChwZyA9IGRzdFBpeGVsc1t5aSArIDFdKSkgKiByYnM7XHJcbiAgICAgICAgICAgICAgICBiX3N1bSArPSAoc3RhY2suYiA9IChwYiA9IGRzdFBpeGVsc1t5aSArIDJdKSkgKiByYnM7XHJcbiAgICAgICAgICAgICAgICBhX3N1bSArPSAoc3RhY2suYSA9IChwYSA9IGRzdFBpeGVsc1t5aSArIDNdKSkgKiByYnM7XHJcbiAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgcl9pbl9zdW0gKz0gcHI7XHJcbiAgICAgICAgICAgICAgICBnX2luX3N1bSArPSBwZztcclxuICAgICAgICAgICAgICAgIGJfaW5fc3VtICs9IHBiO1xyXG4gICAgICAgICAgICAgICAgYV9pbl9zdW0gKz0gcGE7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHN0YWNrID0gc3RhY2submV4dDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZiAoaSA8IGhlaWdodE1pbnVzMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHlwICs9IHNyY1dpZHRoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB5aSA9IHg7XHJcbiAgICAgICAgICAgIHN0YWNrSW4gPSBzdGFja1N0YXJ0O1xyXG4gICAgICAgICAgICBzdGFja091dCA9IHN0YWNrRW5kO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZm9yICh5ID0gMDsgeSA8IHNyY0hlaWdodDsgeSArPSAxKSB7XHJcbiAgICAgICAgICAgICAgICBwID0geWkgPDwgMjtcclxuICAgICAgICAgICAgICAgIGRzdFBpeGVsc1twXSAgICAgPSAocl9zdW0gKiBtdWxfc3VtKSA+PiBzaGdfc3VtO1xyXG4gICAgICAgICAgICAgICAgZHN0UGl4ZWxzW3AgKyAxXSA9IChnX3N1bSAqIG11bF9zdW0pID4+IHNoZ19zdW07XHJcbiAgICAgICAgICAgICAgICBkc3RQaXhlbHNbcCArIDJdID0gKGJfc3VtICogbXVsX3N1bSkgPj4gc2hnX3N1bTtcclxuICAgICAgICAgICAgICAgIGRzdFBpeGVsc1twICsgM10gPSAoYV9zdW0gKiBtdWxfc3VtKSA+PiBzaGdfc3VtO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICByX3N1bSAtPSByX291dF9zdW07XHJcbiAgICAgICAgICAgICAgICBnX3N1bSAtPSBnX291dF9zdW07XHJcbiAgICAgICAgICAgICAgICBiX3N1bSAtPSBiX291dF9zdW07XHJcbiAgICAgICAgICAgICAgICBhX3N1bSAtPSBhX291dF9zdW07XHJcbiAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgcl9vdXRfc3VtIC09IHN0YWNrSW4ucjtcclxuICAgICAgICAgICAgICAgIGdfb3V0X3N1bSAtPSBzdGFja0luLmc7XHJcbiAgICAgICAgICAgICAgICBiX291dF9zdW0gLT0gc3RhY2tJbi5iO1xyXG4gICAgICAgICAgICAgICAgYV9vdXRfc3VtIC09IHN0YWNrSW4uYTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgcCA9ICh4ICsgKCgocCA9IHkgKyByYWRpdXNQbHVzMSkgPCBoZWlnaHRNaW51czEgPyBwIDogaGVpZ2h0TWludXMxKSAqIHNyY1dpZHRoKSkgPDwgMjtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgcl9zdW0gKz0gKHJfaW5fc3VtICs9IChzdGFja0luLnIgPSBkc3RQaXhlbHNbcF0pKTtcclxuICAgICAgICAgICAgICAgIGdfc3VtICs9IChnX2luX3N1bSArPSAoc3RhY2tJbi5nID0gZHN0UGl4ZWxzW3AgKyAxXSkpO1xyXG4gICAgICAgICAgICAgICAgYl9zdW0gKz0gKGJfaW5fc3VtICs9IChzdGFja0luLmIgPSBkc3RQaXhlbHNbcCArIDJdKSk7XHJcbiAgICAgICAgICAgICAgICBhX3N1bSArPSAoYV9pbl9zdW0gKz0gKHN0YWNrSW4uYSA9IGRzdFBpeGVsc1twICsgM10pKTtcclxuICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBzdGFja0luID0gc3RhY2tJbi5uZXh0O1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICByX291dF9zdW0gKz0gKHByID0gc3RhY2tPdXQucik7XHJcbiAgICAgICAgICAgICAgICBnX291dF9zdW0gKz0gKHBnID0gc3RhY2tPdXQuZyk7XHJcbiAgICAgICAgICAgICAgICBiX291dF9zdW0gKz0gKHBiID0gc3RhY2tPdXQuYik7XHJcbiAgICAgICAgICAgICAgICBhX291dF9zdW0gKz0gKHBhID0gc3RhY2tPdXQuYSk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHJfaW5fc3VtIC09IHByO1xyXG4gICAgICAgICAgICAgICAgZ19pbl9zdW0gLT0gcGc7XHJcbiAgICAgICAgICAgICAgICBiX2luX3N1bSAtPSBwYjtcclxuICAgICAgICAgICAgICAgIGFfaW5fc3VtIC09IHBhO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBzdGFja091dCA9IHN0YWNrT3V0Lm5leHQ7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHlpICs9IHNyY1dpZHRoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBkc3RJbWFnZURhdGE7XHJcbiAgICB9XHJcbn0oKSk7XHJcblxyXG4vKipcclxuICogVFYgYmFzZWQgYWxnb3JpdGhtXHJcbiAqL1xyXG5JbWFnZUZpbHRlcnMuQnJpZ2h0bmVzcyA9IGZ1bmN0aW9uIChzcmNJbWFnZURhdGEsIGJyaWdodG5lc3MpIHtcclxuICAgIHZhciBzcmNQaXhlbHMgICAgPSBzcmNJbWFnZURhdGEuZGF0YSxcclxuICAgICAgICBzcmNXaWR0aCAgICAgPSBzcmNJbWFnZURhdGEud2lkdGgsXHJcbiAgICAgICAgc3JjSGVpZ2h0ICAgID0gc3JjSW1hZ2VEYXRhLmhlaWdodCxcclxuICAgICAgICBzcmNMZW5ndGggICAgPSBzcmNQaXhlbHMubGVuZ3RoLFxyXG4gICAgICAgIGRzdEltYWdlRGF0YSA9IHRoaXMudXRpbHMuY3JlYXRlSW1hZ2VEYXRhKHNyY1dpZHRoLCBzcmNIZWlnaHQpLFxyXG4gICAgICAgIGRzdFBpeGVscyAgICA9IGRzdEltYWdlRGF0YS5kYXRhO1xyXG5cclxuICAgIHRoaXMudXRpbHMubWFwUkdCKHNyY1BpeGVscywgZHN0UGl4ZWxzLCBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICB2YWx1ZSArPSBicmlnaHRuZXNzO1xyXG4gICAgICAgIHJldHVybiAodmFsdWUgPiAyNTUpID8gMjU1IDogdmFsdWU7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gZHN0SW1hZ2VEYXRhO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEdJTVAgYWxnb3JpdGhtIG1vZGlmaWVkLiBwcmV0dHkgY2xvc2UgdG8gZmlyZXdvcmtzXHJcbiAqIEBwYXJhbSBicmlnaHRuZXNzIC0xMDAgPD0gbiA8PSAxMDBcclxuICogQHBhcmFtIGNvbnRyYXN0IC0xMDAgPD0gbiA8PSAxMDBcclxuICovXHJcbkltYWdlRmlsdGVycy5CcmlnaHRuZXNzQ29udHJhc3RHaW1wID0gZnVuY3Rpb24gKHNyY0ltYWdlRGF0YSwgYnJpZ2h0bmVzcywgY29udHJhc3QpIHtcclxuICAgIHZhciBzcmNQaXhlbHMgICAgPSBzcmNJbWFnZURhdGEuZGF0YSxcclxuICAgICAgICBzcmNXaWR0aCAgICAgPSBzcmNJbWFnZURhdGEud2lkdGgsXHJcbiAgICAgICAgc3JjSGVpZ2h0ICAgID0gc3JjSW1hZ2VEYXRhLmhlaWdodCxcclxuICAgICAgICBzcmNMZW5ndGggICAgPSBzcmNQaXhlbHMubGVuZ3RoLFxyXG4gICAgICAgIGRzdEltYWdlRGF0YSA9IHRoaXMudXRpbHMuY3JlYXRlSW1hZ2VEYXRhKHNyY1dpZHRoLCBzcmNIZWlnaHQpLFxyXG4gICAgICAgIGRzdFBpeGVscyAgICA9IGRzdEltYWdlRGF0YS5kYXRhLFxyXG4gICAgICAgIHA0ICAgICAgICAgICA9IE1hdGguUEkgLyA0O1xyXG5cclxuICAgIC8vIGZpeCB0byAtMSA8PSBuIDw9IDFcclxuICAgIGJyaWdodG5lc3MgLz0gMTAwO1xyXG4gICAgXHJcbiAgICAvLyBmaXggdG8gLTk5IDw9IG4gPD0gOTlcclxuICAgIGNvbnRyYXN0ICo9IDAuOTk7XHJcbiAgICAvLyBmaXggdG8gLTEgPCBuIDwgMVxyXG4gICAgY29udHJhc3QgLz0gMTAwO1xyXG4gICAgLy8gYXBwbHkgR0lNUCBmb3JtdWxhXHJcbiAgICBjb250cmFzdCA9IE1hdGgudGFuKChjb250cmFzdCArIDEpICogcDQpO1xyXG5cclxuICAgIC8vIGdldCB0aGUgYXZlcmFnZSBjb2xvclxyXG4gICAgZm9yICh2YXIgYXZnID0gMCwgaSA9IDA7IGkgPCBzcmNMZW5ndGg7IGkgKz0gNCkge1xyXG4gICAgICAgIGF2ZyArPSAoc3JjUGl4ZWxzW2ldICogMTk1OTUgKyBzcmNQaXhlbHNbaSArIDFdICogMzg0NzAgKyBzcmNQaXhlbHNbaSArIDJdICogNzQ3MSkgPj4gMTY7XHJcbiAgICB9XHJcbiAgICBhdmcgPSBhdmcgLyAoc3JjTGVuZ3RoIC8gNCk7XHJcblxyXG4gICAgdGhpcy51dGlscy5tYXBSR0Ioc3JjUGl4ZWxzLCBkc3RQaXhlbHMsIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIGlmIChicmlnaHRuZXNzIDwgMCkge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICogKDEgKyBicmlnaHRuZXNzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYnJpZ2h0bmVzcyA+IDApIHtcclxuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSArICgoMjU1IC0gdmFsdWUpICogYnJpZ2h0bmVzcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vdmFsdWUgKz0gYnJpZ2h0bmVzcztcclxuXHJcbiAgICAgICAgaWYgKGNvbnRyYXN0ICE9PSAwKSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gKHZhbHVlIC0gYXZnKSAqIGNvbnRyYXN0ICsgYXZnO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdmFsdWUgKyAwLjUgfCAwO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gZHN0SW1hZ2VEYXRhO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIG1vcmUgbGlrZSB0aGUgbmV3IHBob3Rvc2hvcCBhbGdvcml0aG1cclxuICogQHBhcmFtIGJyaWdodG5lc3MgLTEwMCA8PSBuIDw9IDEwMFxyXG4gKiBAcGFyYW0gY29udHJhc3QgLTEwMCA8PSBuIDw9IDEwMFxyXG4gKi9cclxuSW1hZ2VGaWx0ZXJzLkJyaWdodG5lc3NDb250cmFzdFBob3Rvc2hvcCA9IGZ1bmN0aW9uIChzcmNJbWFnZURhdGEsIGJyaWdodG5lc3MsIGNvbnRyYXN0KSB7XHJcbiAgICB2YXIgc3JjUGl4ZWxzICAgID0gc3JjSW1hZ2VEYXRhLmRhdGEsXHJcbiAgICAgICAgc3JjV2lkdGggICAgID0gc3JjSW1hZ2VEYXRhLndpZHRoLFxyXG4gICAgICAgIHNyY0hlaWdodCAgICA9IHNyY0ltYWdlRGF0YS5oZWlnaHQsXHJcbiAgICAgICAgc3JjTGVuZ3RoICAgID0gc3JjUGl4ZWxzLmxlbmd0aCxcclxuICAgICAgICBkc3RJbWFnZURhdGEgPSB0aGlzLnV0aWxzLmNyZWF0ZUltYWdlRGF0YShzcmNXaWR0aCwgc3JjSGVpZ2h0KSxcclxuICAgICAgICBkc3RQaXhlbHMgICAgPSBkc3RJbWFnZURhdGEuZGF0YTtcclxuXHJcbiAgICAvLyBmaXggdG8gMCA8PSBuIDw9IDI7XHJcbiAgICBicmlnaHRuZXNzID0gKGJyaWdodG5lc3MgKyAxMDApIC8gMTAwO1xyXG4gICAgY29udHJhc3QgPSAoY29udHJhc3QgKyAxMDApIC8gMTAwO1xyXG5cclxuICAgIHRoaXMudXRpbHMubWFwUkdCKHNyY1BpeGVscywgZHN0UGl4ZWxzLCBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICB2YWx1ZSAqPSBicmlnaHRuZXNzO1xyXG4gICAgICAgIHZhbHVlID0gKHZhbHVlIC0gMTI3LjUpICogY29udHJhc3QgKyAxMjcuNTtcclxuICAgICAgICByZXR1cm4gdmFsdWUgKyAwLjUgfCAwO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gZHN0SW1hZ2VEYXRhO1xyXG59O1xyXG5cclxuSW1hZ2VGaWx0ZXJzLkNoYW5uZWxzID0gZnVuY3Rpb24gKHNyY0ltYWdlRGF0YSwgY2hhbm5lbCkge1xyXG4gICAgdmFyIG1hdHJpeDtcclxuXHJcbiAgICBzd2l0Y2ggKGNoYW5uZWwpIHtcclxuICAgICAgICBjYXNlIDI6IC8vIGdyZWVuXHJcbiAgICAgICAgICAgIG1hdHJpeCA9IFtcclxuICAgICAgICAgICAgICAgIDAsIDEsIDAsIDAsIDAsXHJcbiAgICAgICAgICAgICAgICAwLCAxLCAwLCAwLCAwLFxyXG4gICAgICAgICAgICAgICAgMCwgMSwgMCwgMCwgMCxcclxuICAgICAgICAgICAgICAgIDAsIDAsIDAsIDEsIDBcclxuICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAzOiAvLyBibHVlXHJcbiAgICAgICAgICAgIG1hdHJpeCA9IFtcclxuICAgICAgICAgICAgICAgIDAsIDAsIDEsIDAsIDAsXHJcbiAgICAgICAgICAgICAgICAwLCAwLCAxLCAwLCAwLFxyXG4gICAgICAgICAgICAgICAgMCwgMCwgMSwgMCwgMCxcclxuICAgICAgICAgICAgICAgIDAsIDAsIDAsIDEsIDBcclxuICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDogLy8gcmVkXHJcbiAgICAgICAgICAgIG1hdHJpeCA9IFtcclxuICAgICAgICAgICAgICAgIDEsIDAsIDAsIDAsIDAsXHJcbiAgICAgICAgICAgICAgICAxLCAwLCAwLCAwLCAwLFxyXG4gICAgICAgICAgICAgICAgMSwgMCwgMCwgMCwgMCxcclxuICAgICAgICAgICAgICAgIDAsIDAsIDAsIDEsIDBcclxuICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLkNvbG9yTWF0cml4RmlsdGVyKHNyY0ltYWdlRGF0YSwgbWF0cml4KTtcclxufTtcclxuXHJcbkltYWdlRmlsdGVycy5DbG9uZSA9IGZ1bmN0aW9uIChzcmNJbWFnZURhdGEpIHtcclxuICAgIHJldHVybiB0aGlzLkNvcHkoc3JjSW1hZ2VEYXRhLCB0aGlzLnV0aWxzLmNyZWF0ZUltYWdlRGF0YShzcmNJbWFnZURhdGEud2lkdGgsIHNyY0ltYWdlRGF0YS5oZWlnaHQpKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBzbG93ZXJcclxuICovXHJcbkltYWdlRmlsdGVycy5DbG9uZUJ1aWx0aW4gPSBmdW5jdGlvbiAoc3JjSW1hZ2VEYXRhKSB7XHJcbiAgICB2YXIgc3JjV2lkdGggID0gc3JjSW1hZ2VEYXRhLndpZHRoLFxyXG4gICAgICAgIHNyY0hlaWdodCA9IHNyY0ltYWdlRGF0YS5oZWlnaHQsXHJcbiAgICAgICAgY2FudmFzICAgID0gdGhpcy51dGlscy5nZXRTYW1wbGVDYW52YXMoKSxcclxuICAgICAgICBjb250ZXh0ICAgPSB0aGlzLnV0aWxzLmdldFNhbXBsZUNvbnRleHQoKSxcclxuICAgICAgICBkc3RJbWFnZURhdGE7XHJcblxyXG4gICAgY2FudmFzLndpZHRoICA9IHNyY1dpZHRoO1xyXG4gICAgY2FudmFzLmhlaWdodCA9IHNyY0hlaWdodDtcclxuXHJcbiAgICBjb250ZXh0LnB1dEltYWdlRGF0YShzcmNJbWFnZURhdGEsIDAsIDApO1xyXG4gICAgZHN0SW1hZ2VEYXRhID0gY29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgc3JjV2lkdGgsIHNyY0hlaWdodCk7XHJcblxyXG4gICAgY2FudmFzLndpZHRoID0gMDtcclxuICAgIGNhbnZhcy5oZWlnaHQgPSAwO1xyXG5cclxuICAgIHJldHVybiBkc3RJbWFnZURhdGE7XHJcbn07XHJcblxyXG5JbWFnZUZpbHRlcnMuQ29sb3JNYXRyaXhGaWx0ZXIgPSBmdW5jdGlvbiAoc3JjSW1hZ2VEYXRhLCBtYXRyaXgpIHtcclxuICAgIHZhciBzcmNQaXhlbHMgICAgPSBzcmNJbWFnZURhdGEuZGF0YSxcclxuICAgICAgICBzcmNXaWR0aCAgICAgPSBzcmNJbWFnZURhdGEud2lkdGgsXHJcbiAgICAgICAgc3JjSGVpZ2h0ICAgID0gc3JjSW1hZ2VEYXRhLmhlaWdodCxcclxuICAgICAgICBzcmNMZW5ndGggICAgPSBzcmNQaXhlbHMubGVuZ3RoLFxyXG4gICAgICAgIGRzdEltYWdlRGF0YSA9IHRoaXMudXRpbHMuY3JlYXRlSW1hZ2VEYXRhKHNyY1dpZHRoLCBzcmNIZWlnaHQpLFxyXG4gICAgICAgIGRzdFBpeGVscyAgICA9IGRzdEltYWdlRGF0YS5kYXRhO1xyXG5cclxuICAgIHZhciBtMCAgPSBtYXRyaXhbMF0sXHJcbiAgICAgICAgbTEgID0gbWF0cml4WzFdLFxyXG4gICAgICAgIG0yICA9IG1hdHJpeFsyXSxcclxuICAgICAgICBtMyAgPSBtYXRyaXhbM10sXHJcbiAgICAgICAgbTQgID0gbWF0cml4WzRdLFxyXG4gICAgICAgIG01ICA9IG1hdHJpeFs1XSxcclxuICAgICAgICBtNiAgPSBtYXRyaXhbNl0sXHJcbiAgICAgICAgbTcgID0gbWF0cml4WzddLFxyXG4gICAgICAgIG04ICA9IG1hdHJpeFs4XSxcclxuICAgICAgICBtOSAgPSBtYXRyaXhbOV0sXHJcbiAgICAgICAgbTEwID0gbWF0cml4WzEwXSxcclxuICAgICAgICBtMTEgPSBtYXRyaXhbMTFdLFxyXG4gICAgICAgIG0xMiA9IG1hdHJpeFsxMl0sXHJcbiAgICAgICAgbTEzID0gbWF0cml4WzEzXSxcclxuICAgICAgICBtMTQgPSBtYXRyaXhbMTRdLFxyXG4gICAgICAgIG0xNSA9IG1hdHJpeFsxNV0sXHJcbiAgICAgICAgbTE2ID0gbWF0cml4WzE2XSxcclxuICAgICAgICBtMTcgPSBtYXRyaXhbMTddLFxyXG4gICAgICAgIG0xOCA9IG1hdHJpeFsxOF0sXHJcbiAgICAgICAgbTE5ID0gbWF0cml4WzE5XTtcclxuXHJcbiAgICB2YXIgdmFsdWUsIGksIHIsIGcsIGIsIGE7XHJcbiAgICBmb3IgKGkgPSAwOyBpIDwgc3JjTGVuZ3RoOyBpICs9IDQpIHtcclxuICAgICAgICByID0gc3JjUGl4ZWxzW2ldO1xyXG4gICAgICAgIGcgPSBzcmNQaXhlbHNbaSArIDFdO1xyXG4gICAgICAgIGIgPSBzcmNQaXhlbHNbaSArIDJdO1xyXG4gICAgICAgIGEgPSBzcmNQaXhlbHNbaSArIDNdO1xyXG5cclxuICAgICAgICBkc3RQaXhlbHNbaV0gICAgID0gKHZhbHVlID0gciAqICBtMCArIGcgKiAgbTEgKyBiICogIG0yICsgYSAqICBtMyArICBtNCkgPiAyNTUgPyAyNTUgOiB2YWx1ZSA8IDAgPyAwIDogdmFsdWUgfCAwO1xyXG4gICAgICAgIGRzdFBpeGVsc1tpICsgMV0gPSAodmFsdWUgPSByICogIG01ICsgZyAqICBtNiArIGIgKiAgbTcgKyBhICogIG04ICsgIG05KSA+IDI1NSA/IDI1NSA6IHZhbHVlIDwgMCA/IDAgOiB2YWx1ZSB8IDA7XHJcbiAgICAgICAgZHN0UGl4ZWxzW2kgKyAyXSA9ICh2YWx1ZSA9IHIgKiBtMTAgKyBnICogbTExICsgYiAqIG0xMiArIGEgKiBtMTMgKyBtMTQpID4gMjU1ID8gMjU1IDogdmFsdWUgPCAwID8gMCA6IHZhbHVlIHwgMDtcclxuICAgICAgICBkc3RQaXhlbHNbaSArIDNdID0gKHZhbHVlID0gciAqIG0xNSArIGcgKiBtMTYgKyBiICogbTE3ICsgYSAqIG0xOCArIG0xOSkgPiAyNTUgPyAyNTUgOiB2YWx1ZSA8IDAgPyAwIDogdmFsdWUgfCAwO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBkc3RJbWFnZURhdGE7XHJcbn07XHJcblxyXG5JbWFnZUZpbHRlcnMuQ29sb3JUcmFuc2Zvcm1GaWx0ZXIgPSBmdW5jdGlvbiAoXHJcbiAgICAgICAgc3JjSW1hZ2VEYXRhLCByZWRNdWx0aXBsaWVyLCBncmVlbk11bHRpcGxpZXIsIGJsdWVNdWx0aXBsaWVyLCBhbHBoYU11bHRpcGxpZXIsXHJcbiAgICAgICAgcmVkT2Zmc2V0LCBncmVlbk9mZnNldCwgYmx1ZU9mZnNldCwgYWxwaGFPZmZzZXQpIHtcclxuICAgIHZhciBzcmNQaXhlbHMgICAgPSBzcmNJbWFnZURhdGEuZGF0YSxcclxuICAgICAgICBzcmNXaWR0aCAgICAgPSBzcmNJbWFnZURhdGEud2lkdGgsXHJcbiAgICAgICAgc3JjSGVpZ2h0ICAgID0gc3JjSW1hZ2VEYXRhLmhlaWdodCxcclxuICAgICAgICBzcmNMZW5ndGggICAgPSBzcmNQaXhlbHMubGVuZ3RoLFxyXG4gICAgICAgIGRzdEltYWdlRGF0YSA9IHRoaXMudXRpbHMuY3JlYXRlSW1hZ2VEYXRhKHNyY1dpZHRoLCBzcmNIZWlnaHQpLFxyXG4gICAgICAgIGRzdFBpeGVscyAgICA9IGRzdEltYWdlRGF0YS5kYXRhO1xyXG5cclxuICAgIHZhciBpLCB2O1xyXG4gICAgZm9yIChpID0gMDsgaSA8IHNyY0xlbmd0aDsgaSArPSA0KSB7XHJcbiAgICAgICAgZHN0UGl4ZWxzW2ldICAgICA9ICh2ID0gc3JjUGl4ZWxzW2ldICAgICAqIHJlZE11bHRpcGxpZXIgICArIHJlZE9mZnNldCkgICA+IDI1NSA/IDI1NSA6IHYgPCAwID8gMCA6IHY7XHJcbiAgICAgICAgZHN0UGl4ZWxzW2kgKyAxXSA9ICh2ID0gc3JjUGl4ZWxzW2kgKyAxXSAqIGdyZWVuTXVsdGlwbGllciArIGdyZWVuT2Zmc2V0KSA+IDI1NSA/IDI1NSA6IHYgPCAwID8gMCA6IHY7XHJcbiAgICAgICAgZHN0UGl4ZWxzW2kgKyAyXSA9ICh2ID0gc3JjUGl4ZWxzW2kgKyAyXSAqIGJsdWVNdWx0aXBsaWVyICArIGJsdWVPZmZzZXQpICA+IDI1NSA/IDI1NSA6IHYgPCAwID8gMCA6IHY7XHJcbiAgICAgICAgZHN0UGl4ZWxzW2kgKyAzXSA9ICh2ID0gc3JjUGl4ZWxzW2kgKyAzXSAqIGFscGhhTXVsdGlwbGllciArIGFscGhhT2Zmc2V0KSA+IDI1NSA/IDI1NSA6IHYgPCAwID8gMCA6IHY7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGRzdEltYWdlRGF0YTtcclxufTtcclxuXHJcbkltYWdlRmlsdGVycy5Db3B5ID0gZnVuY3Rpb24gKHNyY0ltYWdlRGF0YSwgZHN0SW1hZ2VEYXRhKSB7XHJcbiAgICB2YXIgc3JjUGl4ZWxzID0gc3JjSW1hZ2VEYXRhLmRhdGEsXHJcbiAgICAgICAgc3JjTGVuZ3RoID0gc3JjUGl4ZWxzLmxlbmd0aCxcclxuICAgICAgICBkc3RQaXhlbHMgPSBkc3RJbWFnZURhdGEuZGF0YTtcclxuXHJcbiAgICB3aGlsZSAoc3JjTGVuZ3RoLS0pIHtcclxuICAgICAgICBkc3RQaXhlbHNbc3JjTGVuZ3RoXSA9IHNyY1BpeGVsc1tzcmNMZW5ndGhdO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBkc3RJbWFnZURhdGE7XHJcbn07XHJcblxyXG5JbWFnZUZpbHRlcnMuQ3JvcCA9IGZ1bmN0aW9uIChzcmNJbWFnZURhdGEsIHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcclxuICAgIHZhciBzcmNQaXhlbHMgICAgPSBzcmNJbWFnZURhdGEuZGF0YSxcclxuICAgICAgICBzcmNXaWR0aCAgICAgPSBzcmNJbWFnZURhdGEud2lkdGgsXHJcbiAgICAgICAgc3JjSGVpZ2h0ICAgID0gc3JjSW1hZ2VEYXRhLmhlaWdodCxcclxuICAgICAgICBzcmNMZW5ndGggICAgPSBzcmNQaXhlbHMubGVuZ3RoLFxyXG4gICAgICAgIGRzdEltYWdlRGF0YSA9IHRoaXMudXRpbHMuY3JlYXRlSW1hZ2VEYXRhKHdpZHRoLCBoZWlnaHQpLFxyXG4gICAgICAgIGRzdFBpeGVscyAgICA9IGRzdEltYWdlRGF0YS5kYXRhO1xyXG5cclxuICAgIHZhciBzcmNMZWZ0ICAgPSBNYXRoLm1heCh4LCAwKSxcclxuICAgICAgICBzcmNUb3AgICAgPSBNYXRoLm1heCh5LCAwKSxcclxuICAgICAgICBzcmNSaWdodCAgPSBNYXRoLm1pbih4ICsgd2lkdGgsIHNyY1dpZHRoKSxcclxuICAgICAgICBzcmNCb3R0b20gPSBNYXRoLm1pbih5ICsgaGVpZ2h0LCBzcmNIZWlnaHQpLFxyXG4gICAgICAgIGRzdExlZnQgICA9IHNyY0xlZnQgLSB4LFxyXG4gICAgICAgIGRzdFRvcCAgICA9IHNyY1RvcCAtIHksXHJcbiAgICAgICAgc3JjUm93LCBzcmNDb2wsIHNyY0luZGV4LCBkc3RJbmRleDtcclxuXHJcbiAgICBmb3IgKHNyY1JvdyA9IHNyY1RvcCwgZHN0Um93ID0gZHN0VG9wOyBzcmNSb3cgPCBzcmNCb3R0b207IHNyY1JvdyArPSAxLCBkc3RSb3cgKz0gMSkge1xyXG4gICAgICAgIGZvciAoc3JjQ29sID0gc3JjTGVmdCwgZHN0Q29sID0gZHN0TGVmdDsgc3JjQ29sIDwgc3JjUmlnaHQ7IHNyY0NvbCArPSAxLCBkc3RDb2wgKz0gMSkge1xyXG4gICAgICAgICAgICBzcmNJbmRleCA9IChzcmNSb3cgKiBzcmNXaWR0aCArIHNyY0NvbCkgPDwgMjtcclxuICAgICAgICAgICAgZHN0SW5kZXggPSAoZHN0Um93ICogd2lkdGggICAgKyBkc3RDb2wpIDw8IDI7XHJcbiAgICAgICAgICAgIGRzdFBpeGVsc1tkc3RJbmRleF0gICAgID0gc3JjUGl4ZWxzW3NyY0luZGV4XTtcclxuICAgICAgICAgICAgZHN0UGl4ZWxzW2RzdEluZGV4ICsgMV0gPSBzcmNQaXhlbHNbc3JjSW5kZXggKyAxXTtcclxuICAgICAgICAgICAgZHN0UGl4ZWxzW2RzdEluZGV4ICsgMl0gPSBzcmNQaXhlbHNbc3JjSW5kZXggKyAyXTtcclxuICAgICAgICAgICAgZHN0UGl4ZWxzW2RzdEluZGV4ICsgM10gPSBzcmNQaXhlbHNbc3JjSW5kZXggKyAzXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGRzdEltYWdlRGF0YTtcclxufTtcclxuXHJcbkltYWdlRmlsdGVycy5Dcm9wQnVpbHRpbiA9IGZ1bmN0aW9uIChzcmNJbWFnZURhdGEsIHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcclxuICAgIHZhciBzcmNXaWR0aCAgPSBzcmNJbWFnZURhdGEud2lkdGgsXHJcbiAgICAgICAgc3JjSGVpZ2h0ID0gc3JjSW1hZ2VEYXRhLmhlaWdodCxcclxuICAgICAgICBjYW52YXMgICAgPSB0aGlzLnV0aWxzLmdldFNhbXBsZUNhbnZhcygpLFxyXG4gICAgICAgIGNvbnRleHQgICA9IHRoaXMudXRpbHMuZ2V0U2FtcGxlQ29udGV4dCgpO1xyXG5cclxuICAgIGNhbnZhcy53aWR0aCA9IHNyY1dpZHRoO1xyXG4gICAgY2FudmFzLmhlaWdodCA9IHNyY0hlaWdodDtcclxuICAgIGNvbnRleHQucHV0SW1hZ2VEYXRhKHNyY0ltYWdlRGF0YSwgMCwgMCk7XHJcbiAgICB2YXIgcmVzdWx0ID0gY29udGV4dC5nZXRJbWFnZURhdGEoeCwgeSwgd2lkdGgsIGhlaWdodCk7XHJcblxyXG4gICAgY2FudmFzLndpZHRoID0gMDtcclxuICAgIGNhbnZhcy5oZWlnaHQgPSAwO1xyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn07XHJcblxyXG4vKipcclxuICogc2V0cyB0byB0aGUgYXZlcmFnZSBvZiB0aGUgaGlnaGVzdCBhbmQgbG93ZXN0IGNvbnRyYXN0XHJcbiAqL1xyXG5JbWFnZUZpbHRlcnMuRGVzYXR1cmF0ZSA9IGZ1bmN0aW9uIChzcmNJbWFnZURhdGEpIHtcclxuICAgIHZhciBzcmNQaXhlbHMgICAgPSBzcmNJbWFnZURhdGEuZGF0YSxcclxuICAgICAgICBzcmNXaWR0aCAgICAgPSBzcmNJbWFnZURhdGEud2lkdGgsXHJcbiAgICAgICAgc3JjSGVpZ2h0ICAgID0gc3JjSW1hZ2VEYXRhLmhlaWdodCxcclxuICAgICAgICBzcmNMZW5ndGggICAgPSBzcmNQaXhlbHMubGVuZ3RoLFxyXG4gICAgICAgIGRzdEltYWdlRGF0YSA9IHRoaXMudXRpbHMuY3JlYXRlSW1hZ2VEYXRhKHNyY1dpZHRoLCBzcmNIZWlnaHQpLFxyXG4gICAgICAgIGRzdFBpeGVscyAgICA9IGRzdEltYWdlRGF0YS5kYXRhO1xyXG5cclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3JjTGVuZ3RoOyBpICs9IDQpIHtcclxuICAgICAgICB2YXIgciA9IHNyY1BpeGVsc1tpXSxcclxuICAgICAgICAgICAgZyA9IHNyY1BpeGVsc1tpICsgMV0sXHJcbiAgICAgICAgICAgIGIgPSBzcmNQaXhlbHNbaSArIDJdLFxyXG4gICAgICAgICAgICBtYXggPSAociA+IGcpID8gKHIgPiBiKSA/IHIgOiBiIDogKGcgPiBiKSA/IGcgOiBiLFxyXG4gICAgICAgICAgICBtaW4gPSAociA8IGcpID8gKHIgPCBiKSA/IHIgOiBiIDogKGcgPCBiKSA/IGcgOiBiLFxyXG4gICAgICAgICAgICBhdmcgPSAoKG1heCArIG1pbikgLyAyKSArIDAuNSB8IDA7XHJcblxyXG4gICAgICAgIGRzdFBpeGVsc1tpXSA9IGRzdFBpeGVsc1tpICsgMV0gPSBkc3RQaXhlbHNbaSArIDJdID0gYXZnO1xyXG4gICAgICAgIGRzdFBpeGVsc1tpICsgM10gPSBzcmNQaXhlbHNbaSArIDNdO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBkc3RJbWFnZURhdGE7XHJcbn07XHJcblxyXG4vKipcclxuICogVE9ETzogdXNlIGJpbGluZWFyXHJcbiAqL1xyXG5JbWFnZUZpbHRlcnMuRGlzcGxhY2VtZW50TWFwRmlsdGVyID0gZnVuY3Rpb24gKHNyY0ltYWdlRGF0YSwgbWFwSW1hZ2VEYXRhLCBtYXBYLCBtYXBZLCBjb21wb25lbnRYLCBjb21wb25lbnRZLCBzY2FsZVgsIHNjYWxlWSwgbW9kZSkge1xyXG4gICAgdmFyIHNyY1BpeGVscyAgICA9IHNyY0ltYWdlRGF0YS5kYXRhLFxyXG4gICAgICAgIHNyY1dpZHRoICAgICA9IHNyY0ltYWdlRGF0YS53aWR0aCxcclxuICAgICAgICBzcmNIZWlnaHQgICAgPSBzcmNJbWFnZURhdGEuaGVpZ2h0LFxyXG4gICAgICAgIHNyY0xlbmd0aCAgICA9IHNyY1BpeGVscy5sZW5ndGgsXHJcbi8vICAgICAgICBkc3RJbWFnZURhdGEgPSB0aGlzLnV0aWxzLmNyZWF0ZUltYWdlRGF0YShzcmNXaWR0aCwgc3JjSGVpZ2h0KSxcclxuICAgICAgICBkc3RJbWFnZURhdGEgPSBJbWFnZUZpbHRlcnMuQ2xvbmUoc3JjSW1hZ2VEYXRhKSxcclxuICAgICAgICBkc3RQaXhlbHMgICAgPSBkc3RJbWFnZURhdGEuZGF0YTtcclxuXHJcbiAgICBtYXBYIHx8IChtYXBYID0gMCk7XHJcbiAgICBtYXBZIHx8IChtYXBZID0gMCk7XHJcbiAgICBjb21wb25lbnRYIHx8IChjb21wb25lbnRYID0gMCk7IC8vIHJlZD9cclxuICAgIGNvbXBvbmVudFkgfHwgKGNvbXBvbmVudFkgPSAwKTtcclxuICAgIHNjYWxlWCB8fCAoc2NhbGVYID0gMCk7XHJcbiAgICBzY2FsZVkgfHwgKHNjYWxlWSA9IDApO1xyXG4gICAgbW9kZSB8fCAobW9kZSA9IDIpOyAvLyB3cmFwXHJcblxyXG4gICAgdmFyIG1hcFdpZHRoICA9IG1hcEltYWdlRGF0YS53aWR0aCxcclxuICAgICAgICBtYXBIZWlnaHQgPSBtYXBJbWFnZURhdGEuaGVpZ2h0LFxyXG4gICAgICAgIG1hcFBpeGVscyA9IG1hcEltYWdlRGF0YS5kYXRhLFxyXG4gICAgICAgIG1hcFJpZ2h0ICA9IG1hcFdpZHRoICsgbWFwWCxcclxuICAgICAgICBtYXBCb3R0b20gPSBtYXBIZWlnaHQgKyBtYXBZLFxyXG4gICAgICAgIGRzdEluZGV4LCBzcmNJbmRleCwgbWFwSW5kZXgsXHJcbiAgICAgICAgY3gsIGN5LCB0eCwgdHksIHgsIHk7XHJcblxyXG4gICAgZm9yICh4ID0gMDsgeCA8IHNyY1dpZHRoOyB4ICs9IDEpIHtcclxuICAgICAgICBmb3IgKHkgPSAwOyB5IDwgc3JjSGVpZ2h0OyB5ICs9IDEpIHtcclxuXHJcbiAgICAgICAgICAgIGRzdEluZGV4ID0gKHkgKiBzcmNXaWR0aCArIHgpIDw8IDI7XHJcblxyXG4gICAgICAgICAgICBpZiAoeCA8IG1hcFggfHwgeSA8IG1hcFkgfHwgeCA+PSBtYXBSaWdodCB8fCB5ID49IG1hcEJvdHRvbSkge1xyXG4gICAgICAgICAgICAgICAgLy8gb3V0IG9mIHRoZSBtYXAgYm91bmRzXHJcbiAgICAgICAgICAgICAgICAvLyBjb3B5IHNyYyB0byBkc3RcclxuICAgICAgICAgICAgICAgIHNyY0luZGV4ID0gZHN0SW5kZXg7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBhcHBseSBtYXBcclxuICAgICAgICAgICAgICAgIG1hcEluZGV4ID0gKCh5IC0gbWFwWSkgKiBtYXBXaWR0aCArICh4IC0gbWFwWCkpIDw8IDI7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gdHggPSB4ICsgKChjb21wb25lbnRYKHgsIHkpIC0gMTI4KSAqIHNjYWxlWCkgLyAyNTZcclxuICAgICAgICAgICAgICAgIGN4ID0gbWFwUGl4ZWxzW21hcEluZGV4ICsgY29tcG9uZW50WF07XHJcbiAgICAgICAgICAgICAgICB0eCA9IHggKyAoKChjeCAtIDEyOCkgKiBzY2FsZVgpID4+IDgpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIHR4ID0geSArICgoY29tcG9uZW50WSh4LCB5KSAtIDEyOCkgKiBzY2FsZVkpIC8gMjU2XHJcbiAgICAgICAgICAgICAgICBjeSA9IG1hcFBpeGVsc1ttYXBJbmRleCArIGNvbXBvbmVudFldO1xyXG4gICAgICAgICAgICAgICAgdHkgPSB5ICsgKCgoY3kgLSAxMjgpICogc2NhbGVZKSA+PiA4KTtcclxuXHJcbiAgICAgICAgICAgICAgICBzcmNJbmRleCA9IEltYWdlRmlsdGVycy51dGlscy5nZXRQaXhlbEluZGV4KHR4ICsgMC41IHwgMCwgdHkgKyAwLjUgfCAwLCBzcmNXaWR0aCwgc3JjSGVpZ2h0LCBtb2RlKTtcclxuICAgICAgICAgICAgICAgIGlmIChzcmNJbmRleCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIG1vZGUgPT0gaWdub3JlIGFuZCAodHgsdHkpIGlzIG91dCBvZiBzcmMgYm91bmRzXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlbiBjb3B5ICh4LHkpIHRvIGRzdFxyXG4gICAgICAgICAgICAgICAgICAgIHNyY0luZGV4ID0gZHN0SW5kZXg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRzdFBpeGVsc1tkc3RJbmRleF0gICAgID0gc3JjUGl4ZWxzW3NyY0luZGV4XTtcclxuICAgICAgICAgICAgZHN0UGl4ZWxzW2RzdEluZGV4ICsgMV0gPSBzcmNQaXhlbHNbc3JjSW5kZXggKyAxXTtcclxuICAgICAgICAgICAgZHN0UGl4ZWxzW2RzdEluZGV4ICsgMl0gPSBzcmNQaXhlbHNbc3JjSW5kZXggKyAyXTtcclxuICAgICAgICAgICAgZHN0UGl4ZWxzW2RzdEluZGV4ICsgM10gPSBzcmNQaXhlbHNbc3JjSW5kZXggKyAzXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGRzdEltYWdlRGF0YTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBGbG95ZC1TdGVpbmJlcmcgYWxnb3JpdGhtXHJcbiAqIEBwYXJhbSBsZXZlbHMgMiA8PSBuIDw9IDI1NVxyXG4gKi9cclxuSW1hZ2VGaWx0ZXJzLkRpdGhlciA9IGZ1bmN0aW9uIChzcmNJbWFnZURhdGEsIGxldmVscykge1xyXG4gICAgdmFyIHNyY1dpZHRoICAgICA9IHNyY0ltYWdlRGF0YS53aWR0aCxcclxuICAgICAgICBzcmNIZWlnaHQgICAgPSBzcmNJbWFnZURhdGEuaGVpZ2h0LFxyXG4gICAgICAgIGRzdEltYWdlRGF0YSA9IHRoaXMuQ2xvbmUoc3JjSW1hZ2VEYXRhKSxcclxuICAgICAgICBkc3RQaXhlbHMgICAgPSBkc3RJbWFnZURhdGEuZGF0YTtcclxuXHJcbiAgICBsZXZlbHMgPSBsZXZlbHMgPCAyID8gMiA6IGxldmVscyA+IDI1NSA/IDI1NSA6IGxldmVscztcclxuXHJcbiAgICAvLyBCdWlsZCBhIGNvbG9yIG1hcCB1c2luZyB0aGUgc2FtZSBhbGdvcml0aG0gYXMgdGhlIHBvc3Rlcml6ZSBmaWx0ZXIuXHJcbiAgICB2YXIgcG9zdGVyaXplLFxyXG4gICAgICAgIGxldmVsTWFwID0gW10sXHJcbiAgICAgICAgbGV2ZWxzTWludXMxID0gbGV2ZWxzIC0gMSxcclxuICAgICAgICBqID0gMCxcclxuICAgICAgICBrID0gMCxcclxuICAgICAgICBpO1xyXG5cclxuICAgIGZvciAoaSA9IDA7IGkgPCBsZXZlbHM7IGkgKz0gMSkge1xyXG4gICAgICAgIGxldmVsTWFwW2ldID0gKDI1NSAqIGkpIC8gbGV2ZWxzTWludXMxO1xyXG4gICAgfVxyXG5cclxuICAgIHBvc3Rlcml6ZSA9IHRoaXMudXRpbHMuYnVpbGRNYXAoZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIHJldCA9IGxldmVsTWFwW2pdO1xyXG5cclxuICAgICAgICBrICs9IGxldmVscztcclxuXHJcbiAgICAgICAgaWYgKGsgPiAyNTUpIHtcclxuICAgICAgICAgICAgayAtPSAyNTU7XHJcbiAgICAgICAgICAgIGogKz0gMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXQ7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgLy8gQXBwbHkgdGhlIGRpdGhlcmluZyBhbGdvcml0aG0gdG8gZWFjaCBwaXhlbFxyXG4gICAgdmFyIHgsIHksXHJcbiAgICAgICAgaW5kZXgsXHJcbiAgICAgICAgb2xkX3IsIG9sZF9nLCBvbGRfYixcclxuICAgICAgICBuZXdfciwgbmV3X2csIG5ld19iLFxyXG4gICAgICAgIGVycl9yLCBlcnJfZywgZXJyX2IsXHJcbiAgICAgICAgbmJyX3IsIG5icl9nLCBuYnJfYixcclxuICAgICAgICBzcmNXaWR0aE1pbnVzMSA9IHNyY1dpZHRoIC0gMSxcclxuICAgICAgICBzcmNIZWlnaHRNaW51czEgPSBzcmNIZWlnaHQgLSAxLFxyXG4gICAgICAgIEEgPSA3IC8gMTYsXHJcbiAgICAgICAgQiA9IDMgLyAxNixcclxuICAgICAgICBDID0gNSAvIDE2LFxyXG4gICAgICAgIEQgPSAxIC8gMTY7XHJcbiAgICBcclxuICAgIGZvciAoeSA9IDA7IHkgPCBzcmNIZWlnaHQ7IHkgKz0gMSkge1xyXG4gICAgICAgIGZvciAoeCA9IDA7IHggPCBzcmNXaWR0aDsgeCArPSAxKSB7XHJcbiAgICAgICAgICAgIC8vIEdldCB0aGUgY3VycmVudCBwaXhlbC5cclxuICAgICAgICAgICAgaW5kZXggPSAoeSAqIHNyY1dpZHRoICsgeCkgPDwgMjtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIG9sZF9yID0gZHN0UGl4ZWxzW2luZGV4XTtcclxuICAgICAgICAgICAgb2xkX2cgPSBkc3RQaXhlbHNbaW5kZXggKyAxXTtcclxuICAgICAgICAgICAgb2xkX2IgPSBkc3RQaXhlbHNbaW5kZXggKyAyXTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFF1YW50aXplIHVzaW5nIHRoZSBjb2xvciBtYXBcclxuICAgICAgICAgICAgbmV3X3IgPSBwb3N0ZXJpemVbb2xkX3JdO1xyXG4gICAgICAgICAgICBuZXdfZyA9IHBvc3Rlcml6ZVtvbGRfZ107XHJcbiAgICAgICAgICAgIG5ld19iID0gcG9zdGVyaXplW29sZF9iXTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFNldCB0aGUgY3VycmVudCBwaXhlbC5cclxuICAgICAgICAgICAgZHN0UGl4ZWxzW2luZGV4XSAgICAgPSBuZXdfcjtcclxuICAgICAgICAgICAgZHN0UGl4ZWxzW2luZGV4ICsgMV0gPSBuZXdfZztcclxuICAgICAgICAgICAgZHN0UGl4ZWxzW2luZGV4ICsgMl0gPSBuZXdfYjtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFF1YW50aXphdGlvbiBlcnJvcnNcclxuICAgICAgICAgICAgZXJyX3IgPSBvbGRfciAtIG5ld19yO1xyXG4gICAgICAgICAgICBlcnJfZyA9IG9sZF9nIC0gbmV3X2c7XHJcbiAgICAgICAgICAgIGVycl9iID0gb2xkX2IgLSBuZXdfYjtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIEFwcGx5IHRoZSBtYXRyaXguXHJcbiAgICAgICAgICAgIC8vIHggKyAxLCB5XHJcbiAgICAgICAgICAgIGluZGV4ICs9IDEgPDwgMjtcclxuICAgICAgICAgICAgaWYgKHggPCBzcmNXaWR0aE1pbnVzMSkge1xyXG4gICAgICAgICAgICAgICAgbmJyX3IgPSBkc3RQaXhlbHNbaW5kZXhdICAgICArIEEgKiBlcnJfcjtcclxuICAgICAgICAgICAgICAgIG5icl9nID0gZHN0UGl4ZWxzW2luZGV4ICsgMV0gKyBBICogZXJyX2c7XHJcbiAgICAgICAgICAgICAgICBuYnJfYiA9IGRzdFBpeGVsc1tpbmRleCArIDJdICsgQSAqIGVycl9iO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBkc3RQaXhlbHNbaW5kZXhdICAgICA9IG5icl9yID4gMjU1ID8gMjU1IDogbmJyX3IgPCAwID8gMCA6IG5icl9yIHwgMDtcclxuICAgICAgICAgICAgICAgIGRzdFBpeGVsc1tpbmRleCArIDFdID0gbmJyX2cgPiAyNTUgPyAyNTUgOiBuYnJfZyA8IDAgPyAwIDogbmJyX2cgfCAwO1xyXG4gICAgICAgICAgICAgICAgZHN0UGl4ZWxzW2luZGV4ICsgMl0gPSBuYnJfYiA+IDI1NSA/IDI1NSA6IG5icl9iIDwgMCA/IDAgOiBuYnJfYiB8IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIHggLSAxLCB5ICsgMVxyXG4gICAgICAgICAgICBpbmRleCArPSAoc3JjV2lkdGggLSAyKSA8PCAyO1xyXG4gICAgICAgICAgICBpZiAoeCA+IDAgJiYgeSA8IHNyY0hlaWdodE1pbnVzMSkge1xyXG4gICAgICAgICAgICAgICAgbmJyX3IgPSBkc3RQaXhlbHNbaW5kZXhdICAgICArIEIgKiBlcnJfcjtcclxuICAgICAgICAgICAgICAgIG5icl9nID0gZHN0UGl4ZWxzW2luZGV4ICsgMV0gKyBCICogZXJyX2c7XHJcbiAgICAgICAgICAgICAgICBuYnJfYiA9IGRzdFBpeGVsc1tpbmRleCArIDJdICsgQiAqIGVycl9iO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBkc3RQaXhlbHNbaW5kZXhdICAgICA9IG5icl9yID4gMjU1ID8gMjU1IDogbmJyX3IgPCAwID8gMCA6IG5icl9yIHwgMDtcclxuICAgICAgICAgICAgICAgIGRzdFBpeGVsc1tpbmRleCArIDFdID0gbmJyX2cgPiAyNTUgPyAyNTUgOiBuYnJfZyA8IDAgPyAwIDogbmJyX2cgfCAwO1xyXG4gICAgICAgICAgICAgICAgZHN0UGl4ZWxzW2luZGV4ICsgMl0gPSBuYnJfYiA+IDI1NSA/IDI1NSA6IG5icl9iIDwgMCA/IDAgOiBuYnJfYiB8IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIHgsIHkgKyAxXHJcbiAgICAgICAgICAgIGluZGV4ICs9IDEgPDwgMjtcclxuICAgICAgICAgICAgaWYgKHkgPCBzcmNIZWlnaHRNaW51czEpIHtcclxuICAgICAgICAgICAgICAgIG5icl9yID0gZHN0UGl4ZWxzW2luZGV4XSAgICAgKyBDICogZXJyX3I7XHJcbiAgICAgICAgICAgICAgICBuYnJfZyA9IGRzdFBpeGVsc1tpbmRleCArIDFdICsgQyAqIGVycl9nO1xyXG4gICAgICAgICAgICAgICAgbmJyX2IgPSBkc3RQaXhlbHNbaW5kZXggKyAyXSArIEMgKiBlcnJfYjtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgZHN0UGl4ZWxzW2luZGV4XSAgICAgPSBuYnJfciA+IDI1NSA/IDI1NSA6IG5icl9yIDwgMCA/IDAgOiBuYnJfciB8IDA7XHJcbiAgICAgICAgICAgICAgICBkc3RQaXhlbHNbaW5kZXggKyAxXSA9IG5icl9nID4gMjU1ID8gMjU1IDogbmJyX2cgPCAwID8gMCA6IG5icl9nIHwgMDtcclxuICAgICAgICAgICAgICAgIGRzdFBpeGVsc1tpbmRleCArIDJdID0gbmJyX2IgPiAyNTUgPyAyNTUgOiBuYnJfYiA8IDAgPyAwIDogbmJyX2IgfCAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyB4ICsgMSwgeSArIDFcclxuICAgICAgICAgICAgaW5kZXggKz0gMSA8PCAyO1xyXG4gICAgICAgICAgICBpZiAoeCA8IHNyY1dpZHRoTWludXMxICYmIHkgPCBzcmNIZWlnaHRNaW51czEpIHtcclxuICAgICAgICAgICAgICAgIG5icl9yID0gZHN0UGl4ZWxzW2luZGV4XSAgICAgKyBEICogZXJyX3I7XHJcbiAgICAgICAgICAgICAgICBuYnJfZyA9IGRzdFBpeGVsc1tpbmRleCArIDFdICsgRCAqIGVycl9nO1xyXG4gICAgICAgICAgICAgICAgbmJyX2IgPSBkc3RQaXhlbHNbaW5kZXggKyAyXSArIEQgKiBlcnJfYjtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgZHN0UGl4ZWxzW2luZGV4XSAgICAgPSBuYnJfciA+IDI1NSA/IDI1NSA6IG5icl9yIDwgMCA/IDAgOiBuYnJfciB8IDA7XHJcbiAgICAgICAgICAgICAgICBkc3RQaXhlbHNbaW5kZXggKyAxXSA9IG5icl9nID4gMjU1ID8gMjU1IDogbmJyX2cgPCAwID8gMCA6IG5icl9nIHwgMDtcclxuICAgICAgICAgICAgICAgIGRzdFBpeGVsc1tpbmRleCArIDJdID0gbmJyX2IgPiAyNTUgPyAyNTUgOiBuYnJfYiA8IDAgPyAwIDogbmJyX2IgfCAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBkc3RJbWFnZURhdGE7XHJcbn07XHJcblxyXG5JbWFnZUZpbHRlcnMuRWRnZSA9IGZ1bmN0aW9uIChzcmNJbWFnZURhdGEpIHtcclxuICAgIC8vcHJldHR5IGNsb3NlIHRvIEZpcmV3b3JrcyAnRmluZCBFZGdlcycgZWZmZWN0XHJcbiAgICByZXR1cm4gdGhpcy5Db252b2x1dGlvbkZpbHRlcihzcmNJbWFnZURhdGEsIDMsIDMsIFtcclxuICAgICAgICAtMSwgLTEsIC0xLFxyXG4gICAgICAgIC0xLCAgOCwgLTEsXHJcbiAgICAgICAgLTEsIC0xLCAtMVxyXG4gICAgXSk7XHJcbn07XHJcblxyXG5JbWFnZUZpbHRlcnMuRW1ib3NzID0gZnVuY3Rpb24gKHNyY0ltYWdlRGF0YSkge1xyXG4gICAgcmV0dXJuIHRoaXMuQ29udm9sdXRpb25GaWx0ZXIoc3JjSW1hZ2VEYXRhLCAzLCAzLCBbXHJcbiAgICAgICAgLTIsIC0xLCAwLFxyXG4gICAgICAgIC0xLCAgMSwgMSxcclxuICAgICAgICAgMCwgIDEsIDJcclxuICAgIF0pO1xyXG59O1xyXG5cclxuSW1hZ2VGaWx0ZXJzLkVucmljaCA9IGZ1bmN0aW9uIChzcmNJbWFnZURhdGEpIHtcclxuICAgIHJldHVybiB0aGlzLkNvbnZvbHV0aW9uRmlsdGVyKHNyY0ltYWdlRGF0YSwgMywgMywgW1xyXG4gICAgICAgICAwLCAtMiwgIDAsXHJcbiAgICAgICAgLTIsIDIwLCAtMixcclxuICAgICAgICAgMCwgLTIsICAwXHJcbiAgICBdLCAxMCwgLTQwKTtcclxufTtcclxuXHJcbkltYWdlRmlsdGVycy5GbGlwID0gZnVuY3Rpb24gKHNyY0ltYWdlRGF0YSwgdmVydGljYWwpIHtcclxuICAgIHZhciBzcmNQaXhlbHMgICAgPSBzcmNJbWFnZURhdGEuZGF0YSxcclxuICAgICAgICBzcmNXaWR0aCAgICAgPSBzcmNJbWFnZURhdGEud2lkdGgsXHJcbiAgICAgICAgc3JjSGVpZ2h0ICAgID0gc3JjSW1hZ2VEYXRhLmhlaWdodCxcclxuICAgICAgICBzcmNMZW5ndGggICAgPSBzcmNQaXhlbHMubGVuZ3RoLFxyXG4gICAgICAgIGRzdEltYWdlRGF0YSA9IHRoaXMudXRpbHMuY3JlYXRlSW1hZ2VEYXRhKHNyY1dpZHRoLCBzcmNIZWlnaHQpLFxyXG4gICAgICAgIGRzdFBpeGVscyAgICA9IGRzdEltYWdlRGF0YS5kYXRhO1xyXG5cclxuICAgIHZhciB4LCB5LCBzcmNJbmRleCwgZHN0SW5kZXgsIGk7XHJcblxyXG4gICAgZm9yICh5ID0gMDsgeSA8IHNyY0hlaWdodDsgeSArPSAxKSB7XHJcbiAgICAgICAgZm9yICh4ID0gMDsgeCA8IHNyY1dpZHRoOyB4ICs9IDEpIHtcclxuICAgICAgICAgICAgc3JjSW5kZXggPSAoeSAqIHNyY1dpZHRoICsgeCkgPDwgMjtcclxuICAgICAgICAgICAgaWYgKHZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgICAgICBkc3RJbmRleCA9ICgoc3JjSGVpZ2h0IC0geSAtIDEpICogc3JjV2lkdGggKyB4KSA8PCAyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZHN0SW5kZXggPSAoeSAqIHNyY1dpZHRoICsgKHNyY1dpZHRoIC0geCAtIDEpKSA8PCAyO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkc3RQaXhlbHNbZHN0SW5kZXhdICAgICA9IHNyY1BpeGVsc1tzcmNJbmRleF07XHJcbiAgICAgICAgICAgIGRzdFBpeGVsc1tkc3RJbmRleCArIDFdID0gc3JjUGl4ZWxzW3NyY0luZGV4ICsgMV07XHJcbiAgICAgICAgICAgIGRzdFBpeGVsc1tkc3RJbmRleCArIDJdID0gc3JjUGl4ZWxzW3NyY0luZGV4ICsgMl07XHJcbiAgICAgICAgICAgIGRzdFBpeGVsc1tkc3RJbmRleCArIDNdID0gc3JjUGl4ZWxzW3NyY0luZGV4ICsgM107XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBkc3RJbWFnZURhdGE7XHJcbn07XHJcblxyXG5JbWFnZUZpbHRlcnMuR2FtbWEgPSBmdW5jdGlvbiAoc3JjSW1hZ2VEYXRhLCBnYW1tYSkge1xyXG4gICAgdmFyIHNyY1BpeGVscyAgICA9IHNyY0ltYWdlRGF0YS5kYXRhLFxyXG4gICAgICAgIHNyY1dpZHRoICAgICA9IHNyY0ltYWdlRGF0YS53aWR0aCxcclxuICAgICAgICBzcmNIZWlnaHQgICAgPSBzcmNJbWFnZURhdGEuaGVpZ2h0LFxyXG4gICAgICAgIHNyY0xlbmd0aCAgICA9IHNyY1BpeGVscy5sZW5ndGgsXHJcbiAgICAgICAgZHN0SW1hZ2VEYXRhID0gdGhpcy51dGlscy5jcmVhdGVJbWFnZURhdGEoc3JjV2lkdGgsIHNyY0hlaWdodCksXHJcbiAgICAgICAgZHN0UGl4ZWxzICAgID0gZHN0SW1hZ2VEYXRhLmRhdGE7XHJcblxyXG4gICAgdGhpcy51dGlscy5tYXBSR0Ioc3JjUGl4ZWxzLCBkc3RQaXhlbHMsIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIHZhbHVlID0gKDI1NSAqIE1hdGgucG93KHZhbHVlIC8gMjU1LCAxIC8gZ2FtbWEpICsgMC41KTtcclxuICAgICAgICByZXR1cm4gdmFsdWUgPiAyNTUgPyAyNTUgOiB2YWx1ZSArIDAuNSB8IDA7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gZHN0SW1hZ2VEYXRhO1xyXG59O1xyXG5cclxuSW1hZ2VGaWx0ZXJzLkdyYXlTY2FsZSA9IGZ1bmN0aW9uIChzcmNJbWFnZURhdGEpIHtcclxuICAgIHZhciBzcmNQaXhlbHMgICAgPSBzcmNJbWFnZURhdGEuZGF0YSxcclxuICAgICAgICBzcmNXaWR0aCAgICAgPSBzcmNJbWFnZURhdGEud2lkdGgsXHJcbiAgICAgICAgc3JjSGVpZ2h0ICAgID0gc3JjSW1hZ2VEYXRhLmhlaWdodCxcclxuICAgICAgICBzcmNMZW5ndGggICAgPSBzcmNQaXhlbHMubGVuZ3RoLFxyXG4gICAgICAgIGRzdEltYWdlRGF0YSA9IHRoaXMudXRpbHMuY3JlYXRlSW1hZ2VEYXRhKHNyY1dpZHRoLCBzcmNIZWlnaHQpLFxyXG4gICAgICAgIGRzdFBpeGVscyAgICA9IGRzdEltYWdlRGF0YS5kYXRhO1xyXG5cclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3JjTGVuZ3RoOyBpICs9IDQpIHtcclxuICAgICAgICB2YXIgaW50ZW5zaXR5ID0gKHNyY1BpeGVsc1tpXSAqIDE5NTk1ICsgc3JjUGl4ZWxzW2kgKyAxXSAqIDM4NDcwICsgc3JjUGl4ZWxzW2kgKyAyXSAqIDc0NzEpID4+IDE2O1xyXG4gICAgICAgIC8vdmFyIGludGVuc2l0eSA9IChzcmNQaXhlbHNbaV0gKiAwLjMwODYgKyBzcmNQaXhlbHNbaSArIDFdICogMC42MDk0ICsgc3JjUGl4ZWxzW2kgKyAyXSAqIDAuMDgyMCkgfCAwO1xyXG4gICAgICAgIGRzdFBpeGVsc1tpXSA9IGRzdFBpeGVsc1tpICsgMV0gPSBkc3RQaXhlbHNbaSArIDJdID0gaW50ZW5zaXR5O1xyXG4gICAgICAgIGRzdFBpeGVsc1tpICsgM10gPSBzcmNQaXhlbHNbaSArIDNdO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBkc3RJbWFnZURhdGE7XHJcbn07XHJcblxyXG4vKipcclxuICogQHBhcmFtIGh1ZURlbHRhICAtMTgwIDw9IG4gPD0gMTgwXHJcbiAqIEBwYXJhbSBzYXREZWx0YSAgLTEwMCA8PSBuIDw9IDEwMFxyXG4gKiBAcGFyYW0gbGlnaHRuZXNzIC0xMDAgPD0gbiA8PSAxMDBcclxuICovXHJcbkltYWdlRmlsdGVycy5IU0xBZGp1c3RtZW50ID0gZnVuY3Rpb24gKHNyY0ltYWdlRGF0YSwgaHVlRGVsdGEsIHNhdERlbHRhLCBsaWdodG5lc3MpIHtcclxuICAgIHZhciBzcmNQaXhlbHMgICAgPSBzcmNJbWFnZURhdGEuZGF0YSxcclxuICAgICAgICBzcmNXaWR0aCAgICAgPSBzcmNJbWFnZURhdGEud2lkdGgsXHJcbiAgICAgICAgc3JjSGVpZ2h0ICAgID0gc3JjSW1hZ2VEYXRhLmhlaWdodCxcclxuICAgICAgICBzcmNMZW5ndGggICAgPSBzcmNQaXhlbHMubGVuZ3RoLFxyXG4gICAgICAgIGRzdEltYWdlRGF0YSA9IHRoaXMudXRpbHMuY3JlYXRlSW1hZ2VEYXRhKHNyY1dpZHRoLCBzcmNIZWlnaHQpLFxyXG4gICAgICAgIGRzdFBpeGVscyAgICA9IGRzdEltYWdlRGF0YS5kYXRhO1xyXG5cclxuICAgIGh1ZURlbHRhIC89IDM2MDtcclxuICAgIHNhdERlbHRhIC89IDEwMDtcclxuICAgIGxpZ2h0bmVzcyAvPSAxMDA7XHJcblxyXG4gICAgdmFyIHJnYlRvSHNsID0gdGhpcy51dGlscy5yZ2JUb0hzbDtcclxuICAgIHZhciBoc2xUb1JnYiA9IHRoaXMudXRpbHMuaHNsVG9SZ2I7XHJcbiAgICB2YXIgaCwgcywgbCwgaHNsLCByZ2IsIGk7XHJcblxyXG4gICAgZm9yIChpID0gMDsgaSA8IHNyY0xlbmd0aDsgaSArPSA0KSB7XHJcbiAgICAgICAgLy8gY29udmVydCB0byBIU0xcclxuICAgICAgICBoc2wgPSByZ2JUb0hzbChzcmNQaXhlbHNbaV0sIHNyY1BpeGVsc1tpICsgMV0sIHNyY1BpeGVsc1tpICsgMl0pO1xyXG5cclxuICAgICAgICAvLyBodWVcclxuICAgICAgICBoID0gaHNsWzBdICsgaHVlRGVsdGE7XHJcbiAgICAgICAgd2hpbGUgKGggPCAwKSB7XHJcbiAgICAgICAgICAgIGggKz0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgd2hpbGUgKGggPiAxKSB7XHJcbiAgICAgICAgICAgIGggLT0gMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHNhdHVyYXRpb25cclxuICAgICAgICBzID0gaHNsWzFdICsgaHNsWzFdICogc2F0RGVsdGE7XHJcbiAgICAgICAgaWYgKHMgPCAwKSB7XHJcbiAgICAgICAgICAgIHMgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChzID4gMSkge1xyXG4gICAgICAgICAgICBzID0gMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGxpZ2h0bmVzc1xyXG4gICAgICAgIGwgPSBoc2xbMl07XHJcbiAgICAgICAgaWYgKGxpZ2h0bmVzcyA+IDApIHtcclxuICAgICAgICAgICAgbCArPSAoMSAtIGwpICogbGlnaHRuZXNzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChsaWdodG5lc3MgPCAwKSB7XHJcbiAgICAgICAgICAgIGwgKz0gbCAqIGxpZ2h0bmVzcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGNvbnZlcnQgYmFjayB0byByZ2JcclxuICAgICAgICByZ2IgPSBoc2xUb1JnYihoLCBzLCBsKTtcclxuXHJcbiAgICAgICAgZHN0UGl4ZWxzW2ldICAgICA9IHJnYlswXTtcclxuICAgICAgICBkc3RQaXhlbHNbaSArIDFdID0gcmdiWzFdO1xyXG4gICAgICAgIGRzdFBpeGVsc1tpICsgMl0gPSByZ2JbMl07XHJcbiAgICAgICAgZHN0UGl4ZWxzW2kgKyAzXSA9IHNyY1BpeGVsc1tpICsgM107XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGRzdEltYWdlRGF0YTtcclxufTtcclxuXHJcbkltYWdlRmlsdGVycy5JbnZlcnQgPSBmdW5jdGlvbiAoc3JjSW1hZ2VEYXRhKSB7XHJcbiAgICB2YXIgc3JjUGl4ZWxzICAgID0gc3JjSW1hZ2VEYXRhLmRhdGEsXHJcbiAgICAgICAgc3JjV2lkdGggICAgID0gc3JjSW1hZ2VEYXRhLndpZHRoLFxyXG4gICAgICAgIHNyY0hlaWdodCAgICA9IHNyY0ltYWdlRGF0YS5oZWlnaHQsXHJcbiAgICAgICAgc3JjTGVuZ3RoICAgID0gc3JjUGl4ZWxzLmxlbmd0aCxcclxuICAgICAgICBkc3RJbWFnZURhdGEgPSB0aGlzLnV0aWxzLmNyZWF0ZUltYWdlRGF0YShzcmNXaWR0aCwgc3JjSGVpZ2h0KSxcclxuICAgICAgICBkc3RQaXhlbHMgICAgPSBkc3RJbWFnZURhdGEuZGF0YTtcclxuXHJcbiAgICB0aGlzLnV0aWxzLm1hcFJHQihzcmNQaXhlbHMsIGRzdFBpeGVscywgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIDI1NSAtIHZhbHVlO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGRzdEltYWdlRGF0YTtcclxufTtcclxuXHJcbkltYWdlRmlsdGVycy5Nb3NhaWMgPSBmdW5jdGlvbiAoc3JjSW1hZ2VEYXRhLCBibG9ja1NpemUpIHtcclxuICAgIHZhciBzcmNQaXhlbHMgICAgPSBzcmNJbWFnZURhdGEuZGF0YSxcclxuICAgICAgICBzcmNXaWR0aCAgICAgPSBzcmNJbWFnZURhdGEud2lkdGgsXHJcbiAgICAgICAgc3JjSGVpZ2h0ICAgID0gc3JjSW1hZ2VEYXRhLmhlaWdodCxcclxuICAgICAgICBzcmNMZW5ndGggICAgPSBzcmNQaXhlbHMubGVuZ3RoLFxyXG4gICAgICAgIGRzdEltYWdlRGF0YSA9IHRoaXMudXRpbHMuY3JlYXRlSW1hZ2VEYXRhKHNyY1dpZHRoLCBzcmNIZWlnaHQpLFxyXG4gICAgICAgIGRzdFBpeGVscyAgICA9IGRzdEltYWdlRGF0YS5kYXRhO1xyXG4gICAgXHJcbiAgICB2YXIgY29scyA9IE1hdGguY2VpbChzcmNXaWR0aCAvIGJsb2NrU2l6ZSksXHJcbiAgICAgICAgcm93cyA9IE1hdGguY2VpbChzcmNIZWlnaHQgLyBibG9ja1NpemUpLFxyXG4gICAgICAgIHJvdywgY29sLFxyXG4gICAgICAgIHhfc3RhcnQsIHhfZW5kLCB5X3N0YXJ0LCB5X2VuZCxcclxuICAgICAgICB4LCB5LCB5SW5kZXgsIGluZGV4LCBzaXplLFxyXG4gICAgICAgIHIsIGcsIGIsIGE7XHJcblxyXG4gICAgZm9yIChyb3cgPSAwOyByb3cgPCByb3dzOyByb3cgKz0gMSkge1xyXG4gICAgICAgIHlfc3RhcnQgPSByb3cgKiBibG9ja1NpemU7XHJcbiAgICAgICAgeV9lbmQgICA9IHlfc3RhcnQgKyBibG9ja1NpemU7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHlfZW5kID4gc3JjSGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIHlfZW5kID0gc3JjSGVpZ2h0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBmb3IgKGNvbCA9IDA7IGNvbCA8IGNvbHM7IGNvbCArPSAxKSB7XHJcbiAgICAgICAgICAgIHhfc3RhcnQgPSBjb2wgKiBibG9ja1NpemU7XHJcbiAgICAgICAgICAgIHhfZW5kICAgPSB4X3N0YXJ0ICsgYmxvY2tTaXplO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKHhfZW5kID4gc3JjV2lkdGgpIHtcclxuICAgICAgICAgICAgICAgIHhfZW5kID0gc3JjV2lkdGg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGdldCB0aGUgYXZlcmFnZSBjb2xvciBmcm9tIHRoZSBzcmNcclxuICAgICAgICAgICAgciA9IGcgPSBiID0gYSA9IDA7XHJcbiAgICAgICAgICAgIHNpemUgPSAoeF9lbmQgLSB4X3N0YXJ0KSAqICh5X2VuZCAtIHlfc3RhcnQpO1xyXG5cclxuICAgICAgICAgICAgZm9yICh5ID0geV9zdGFydDsgeSA8IHlfZW5kOyB5ICs9IDEpIHtcclxuICAgICAgICAgICAgICAgIHlJbmRleCA9IHkgKiBzcmNXaWR0aDtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgZm9yICh4ID0geF9zdGFydDsgeCA8IHhfZW5kOyB4ICs9IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbmRleCA9ICh5SW5kZXggKyB4KSA8PCAyO1xyXG4gICAgICAgICAgICAgICAgICAgIHIgKz0gc3JjUGl4ZWxzW2luZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICBnICs9IHNyY1BpeGVsc1tpbmRleCArIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIGIgKz0gc3JjUGl4ZWxzW2luZGV4ICsgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgYSArPSBzcmNQaXhlbHNbaW5kZXggKyAzXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgciA9IChyIC8gc2l6ZSkgKyAwLjUgfCAwO1xyXG4gICAgICAgICAgICBnID0gKGcgLyBzaXplKSArIDAuNSB8IDA7XHJcbiAgICAgICAgICAgIGIgPSAoYiAvIHNpemUpICsgMC41IHwgMDtcclxuICAgICAgICAgICAgYSA9IChhIC8gc2l6ZSkgKyAwLjUgfCAwO1xyXG5cclxuICAgICAgICAgICAgLy8gZmlsbCB0aGUgZHN0IHdpdGggdGhhdCBjb2xvclxyXG4gICAgICAgICAgICBmb3IgKHkgPSB5X3N0YXJ0OyB5IDwgeV9lbmQ7IHkgKz0gMSkge1xyXG4gICAgICAgICAgICAgICAgeUluZGV4ID0geSAqIHNyY1dpZHRoO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBmb3IgKHggPSB4X3N0YXJ0OyB4IDwgeF9lbmQ7IHggKz0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4ID0gKHlJbmRleCArIHgpIDw8IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgZHN0UGl4ZWxzW2luZGV4XSAgICAgPSByO1xyXG4gICAgICAgICAgICAgICAgICAgIGRzdFBpeGVsc1tpbmRleCArIDFdID0gZztcclxuICAgICAgICAgICAgICAgICAgICBkc3RQaXhlbHNbaW5kZXggKyAyXSA9IGI7XHJcbiAgICAgICAgICAgICAgICAgICAgZHN0UGl4ZWxzW2luZGV4ICsgM10gPSBhO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBkc3RJbWFnZURhdGE7XHJcbn07XHJcblxyXG4vKipcclxuICogQHBhcmFtIHJhbmdlICAxIDw9IG4gPD0gNVxyXG4gKiBAcGFyYW0gbGV2ZWxzIDEgPD0gbiA8PSAyNTZcclxuICovXHJcbkltYWdlRmlsdGVycy5PaWwgPSBmdW5jdGlvbiAoc3JjSW1hZ2VEYXRhLCByYW5nZSwgbGV2ZWxzKSB7XHJcbiAgICB2YXIgc3JjUGl4ZWxzICAgID0gc3JjSW1hZ2VEYXRhLmRhdGEsXHJcbiAgICAgICAgc3JjV2lkdGggICAgID0gc3JjSW1hZ2VEYXRhLndpZHRoLFxyXG4gICAgICAgIHNyY0hlaWdodCAgICA9IHNyY0ltYWdlRGF0YS5oZWlnaHQsXHJcbiAgICAgICAgc3JjTGVuZ3RoICAgID0gc3JjUGl4ZWxzLmxlbmd0aCxcclxuICAgICAgICBkc3RJbWFnZURhdGEgPSB0aGlzLnV0aWxzLmNyZWF0ZUltYWdlRGF0YShzcmNXaWR0aCwgc3JjSGVpZ2h0KSxcclxuICAgICAgICBkc3RQaXhlbHMgICAgPSBkc3RJbWFnZURhdGEuZGF0YTtcclxuICAgIFxyXG4gICAgdmFyIGluZGV4ID0gMCxcclxuICAgICAgICByaCA9IFtdLFxyXG4gICAgICAgIGdoID0gW10sXHJcbiAgICAgICAgYmggPSBbXSxcclxuICAgICAgICBydCA9IFtdLFxyXG4gICAgICAgIGd0ID0gW10sXHJcbiAgICAgICAgYnQgPSBbXSxcclxuICAgICAgICB4LCB5LCBpLCByb3csIGNvbCxcclxuICAgICAgICByb3dJbmRleCwgY29sSW5kZXgsIG9mZnNldCwgc3JjSW5kZXgsXHJcbiAgICAgICAgc3IsIHNnLCBzYiwgcmksIGdpLCBiaSxcclxuICAgICAgICByLCBnLCBiO1xyXG4gICAgXHJcbiAgICBmb3IgKHkgPSAwOyB5IDwgc3JjSGVpZ2h0OyB5ICs9IDEpIHtcclxuICAgICAgICBmb3IgKHggPSAwOyB4IDwgc3JjV2lkdGg7IHggKz0gMSkge1xyXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGV2ZWxzOyBpICs9IDEpIHtcclxuICAgICAgICAgICAgICAgIHJoW2ldID0gZ2hbaV0gPSBiaFtpXSA9IHJ0W2ldID0gZ3RbaV0gPSBidFtpXSA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGZvciAocm93ID0gLXJhbmdlOyByb3cgPD0gcmFuZ2U7IHJvdyArPSAxKSB7XHJcbiAgICAgICAgICAgICAgICByb3dJbmRleCA9IHkgKyByb3c7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmIChyb3dJbmRleCA8IDAgfHwgcm93SW5kZXggPj0gc3JjSGVpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIG9mZnNldCA9IHJvd0luZGV4ICogc3JjV2lkdGg7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGZvciAoY29sID0gLXJhbmdlOyBjb2wgPD0gcmFuZ2U7IGNvbCArPSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sSW5kZXggPSB4ICsgY29sO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2xJbmRleCA8IDAgfHwgY29sSW5kZXggPj0gc3JjV2lkdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIHNyY0luZGV4ID0gKG9mZnNldCArIGNvbEluZGV4KSA8PCAyO1xyXG4gICAgICAgICAgICAgICAgICAgIHNyID0gc3JjUGl4ZWxzW3NyY0luZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICBzZyA9IHNyY1BpeGVsc1tzcmNJbmRleCArIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIHNiID0gc3JjUGl4ZWxzW3NyY0luZGV4ICsgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgcmkgPSAoc3IgKiBsZXZlbHMpID4+IDg7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2kgPSAoc2cgKiBsZXZlbHMpID4+IDg7XHJcbiAgICAgICAgICAgICAgICAgICAgYmkgPSAoc2IgKiBsZXZlbHMpID4+IDg7XHJcbiAgICAgICAgICAgICAgICAgICAgcnRbcmldICs9IHNyO1xyXG4gICAgICAgICAgICAgICAgICAgIGd0W2dpXSArPSBzZztcclxuICAgICAgICAgICAgICAgICAgICBidFtiaV0gKz0gc2I7XHJcbiAgICAgICAgICAgICAgICAgICAgcmhbcmldICs9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2hbZ2ldICs9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgYmhbYmldICs9IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHIgPSBnID0gYiA9IDA7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IDE7IGkgPCBsZXZlbHM7IGkgKz0gMSkge1xyXG4gICAgICAgICAgICAgICAgaWYocmhbaV0gPiByaFtyXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHIgPSBpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYoZ2hbaV0gPiBnaFtnXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGcgPSBpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYoYmhbaV0gPiBiaFtiXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGIgPSBpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkc3RQaXhlbHNbaW5kZXhdICAgICA9IHJ0W3JdIC8gcmhbcl0gfCAwO1xyXG4gICAgICAgICAgICBkc3RQaXhlbHNbaW5kZXggKyAxXSA9IGd0W2ddIC8gZ2hbZ10gfCAwO1xyXG4gICAgICAgICAgICBkc3RQaXhlbHNbaW5kZXggKyAyXSA9IGJ0W2JdIC8gYmhbYl0gfCAwO1xyXG4gICAgICAgICAgICBkc3RQaXhlbHNbaW5kZXggKyAzXSA9IHNyY1BpeGVsc1tpbmRleCArIDNdO1xyXG4gICAgICAgICAgICBpbmRleCArPSA0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZHN0SW1hZ2VEYXRhO1xyXG59O1xyXG5cclxuSW1hZ2VGaWx0ZXJzLk9wYWNpdHlGaWx0ZXIgPSBmdW5jdGlvbiAoc3JjSW1hZ2VEYXRhLCBvcGFjaXR5KSB7XHJcbiAgICB2YXIgc3JjUGl4ZWxzICAgID0gc3JjSW1hZ2VEYXRhLmRhdGEsXHJcbiAgICAgICAgc3JjV2lkdGggICAgID0gc3JjSW1hZ2VEYXRhLndpZHRoLFxyXG4gICAgICAgIHNyY0hlaWdodCAgICA9IHNyY0ltYWdlRGF0YS5oZWlnaHQsXHJcbiAgICAgICAgc3JjTGVuZ3RoICAgID0gc3JjUGl4ZWxzLmxlbmd0aCxcclxuICAgICAgICBkc3RJbWFnZURhdGEgPSB0aGlzLnV0aWxzLmNyZWF0ZUltYWdlRGF0YShzcmNXaWR0aCwgc3JjSGVpZ2h0KSxcclxuICAgICAgICBkc3RQaXhlbHMgICAgPSBkc3RJbWFnZURhdGEuZGF0YTtcclxuXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNyY0xlbmd0aDsgaSArPSA0KSB7XHJcbiAgICAgICAgZHN0UGl4ZWxzW2ldICAgICA9IHNyY1BpeGVsc1tpXTtcclxuICAgICAgICBkc3RQaXhlbHNbaSArIDFdID0gc3JjUGl4ZWxzW2kgKyAxXTtcclxuICAgICAgICBkc3RQaXhlbHNbaSArIDJdID0gc3JjUGl4ZWxzW2kgKyAyXTtcclxuICAgICAgICBkc3RQaXhlbHNbaSArIDNdID0gb3BhY2l0eTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZHN0SW1hZ2VEYXRhO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSBsZXZlbHMgMiA8PSBuIDw9IDI1NVxyXG4gKi9cclxuSW1hZ2VGaWx0ZXJzLlBvc3Rlcml6ZSA9IGZ1bmN0aW9uIChzcmNJbWFnZURhdGEsIGxldmVscykge1xyXG4gICAgdmFyIHNyY1BpeGVscyAgICA9IHNyY0ltYWdlRGF0YS5kYXRhLFxyXG4gICAgICAgIHNyY1dpZHRoICAgICA9IHNyY0ltYWdlRGF0YS53aWR0aCxcclxuICAgICAgICBzcmNIZWlnaHQgICAgPSBzcmNJbWFnZURhdGEuaGVpZ2h0LFxyXG4gICAgICAgIHNyY0xlbmd0aCAgICA9IHNyY1BpeGVscy5sZW5ndGgsXHJcbiAgICAgICAgZHN0SW1hZ2VEYXRhID0gdGhpcy51dGlscy5jcmVhdGVJbWFnZURhdGEoc3JjV2lkdGgsIHNyY0hlaWdodCksXHJcbiAgICAgICAgZHN0UGl4ZWxzICAgID0gZHN0SW1hZ2VEYXRhLmRhdGE7XHJcblxyXG4gICAgbGV2ZWxzID0gbGV2ZWxzIDwgMiA/IDIgOiBsZXZlbHMgPiAyNTUgPyAyNTUgOiBsZXZlbHM7XHJcblxyXG4gICAgdmFyIGxldmVsTWFwID0gW10sXHJcbiAgICAgICAgbGV2ZWxzTWludXMxID0gbGV2ZWxzIC0gMSxcclxuICAgICAgICBqID0gMCxcclxuICAgICAgICBrID0gMCxcclxuICAgICAgICBpO1xyXG5cclxuICAgIGZvciAoaSA9IDA7IGkgPCBsZXZlbHM7IGkgKz0gMSkge1xyXG4gICAgICAgIGxldmVsTWFwW2ldID0gKDI1NSAqIGkpIC8gbGV2ZWxzTWludXMxO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMudXRpbHMubWFwUkdCKHNyY1BpeGVscywgZHN0UGl4ZWxzLCBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICB2YXIgcmV0ID0gbGV2ZWxNYXBbal07XHJcblxyXG4gICAgICAgIGsgKz0gbGV2ZWxzO1xyXG5cclxuICAgICAgICBpZiAoayA+IDI1NSkge1xyXG4gICAgICAgICAgICBrIC09IDI1NTtcclxuICAgICAgICAgICAgaiArPSAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJldDtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBkc3RJbWFnZURhdGE7XHJcbn07XHJcblxyXG4vKipcclxuICogQHBhcmFtIHNjYWxlIDAuMCA8PSBuIDw9IDUuMFxyXG4gKi9cclxuSW1hZ2VGaWx0ZXJzLlJlc2NhbGUgPSBmdW5jdGlvbiAoc3JjSW1hZ2VEYXRhLCBzY2FsZSkge1xyXG4gICAgdmFyIHNyY1BpeGVscyAgICA9IHNyY0ltYWdlRGF0YS5kYXRhLFxyXG4gICAgICAgIHNyY1dpZHRoICAgICA9IHNyY0ltYWdlRGF0YS53aWR0aCxcclxuICAgICAgICBzcmNIZWlnaHQgICAgPSBzcmNJbWFnZURhdGEuaGVpZ2h0LFxyXG4gICAgICAgIHNyY0xlbmd0aCAgICA9IHNyY1BpeGVscy5sZW5ndGgsXHJcbiAgICAgICAgZHN0SW1hZ2VEYXRhID0gdGhpcy51dGlscy5jcmVhdGVJbWFnZURhdGEoc3JjV2lkdGgsIHNyY0hlaWdodCksXHJcbiAgICAgICAgZHN0UGl4ZWxzICAgID0gZHN0SW1hZ2VEYXRhLmRhdGE7XHJcblxyXG4gICAgdGhpcy51dGlscy5tYXBSR0Ioc3JjUGl4ZWxzLCBkc3RQaXhlbHMsIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIHZhbHVlICo9IHNjYWxlO1xyXG4gICAgICAgIHJldHVybiAodmFsdWUgPiAyNTUpID8gMjU1IDogdmFsdWUgKyAwLjUgfCAwO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGRzdEltYWdlRGF0YTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBOZWFyZXN0IG5laWdoYm9yXHJcbiAqL1xyXG5JbWFnZUZpbHRlcnMuUmVzaXplTmVhcmVzdE5laWdoYm9yID0gZnVuY3Rpb24gKHNyY0ltYWdlRGF0YSwgd2lkdGgsIGhlaWdodCkge1xyXG4gICAgdmFyIHNyY1BpeGVscyAgICA9IHNyY0ltYWdlRGF0YS5kYXRhLFxyXG4gICAgICAgIHNyY1dpZHRoICAgICA9IHNyY0ltYWdlRGF0YS53aWR0aCxcclxuICAgICAgICBzcmNIZWlnaHQgICAgPSBzcmNJbWFnZURhdGEuaGVpZ2h0LFxyXG4gICAgICAgIHNyY0xlbmd0aCAgICA9IHNyY1BpeGVscy5sZW5ndGgsXHJcbiAgICAgICAgZHN0SW1hZ2VEYXRhID0gdGhpcy51dGlscy5jcmVhdGVJbWFnZURhdGEod2lkdGgsIGhlaWdodCksXHJcbiAgICAgICAgZHN0UGl4ZWxzICAgID0gZHN0SW1hZ2VEYXRhLmRhdGE7XHJcblxyXG4gICAgdmFyIHhGYWN0b3IgPSBzcmNXaWR0aCAvIHdpZHRoLFxyXG4gICAgICAgIHlGYWN0b3IgPSBzcmNIZWlnaHQgLyBoZWlnaHQsXHJcbiAgICAgICAgZHN0SW5kZXggPSAwLCBzcmNJbmRleCxcclxuICAgICAgICB4LCB5LCBvZmZzZXQ7XHJcblxyXG4gICAgZm9yICh5ID0gMDsgeSA8IGhlaWdodDsgeSArPSAxKSB7XHJcbiAgICAgICAgb2Zmc2V0ID0gKCh5ICogeUZhY3RvcikgfCAwKSAqIHNyY1dpZHRoO1xyXG5cclxuICAgICAgICBmb3IgKHggPSAwOyB4IDwgd2lkdGg7IHggKz0gMSkge1xyXG4gICAgICAgICAgICBzcmNJbmRleCA9IChvZmZzZXQgKyB4ICogeEZhY3RvcikgPDwgMjtcclxuXHJcbiAgICAgICAgICAgIGRzdFBpeGVsc1tkc3RJbmRleF0gICAgID0gc3JjUGl4ZWxzW3NyY0luZGV4XTtcclxuICAgICAgICAgICAgZHN0UGl4ZWxzW2RzdEluZGV4ICsgMV0gPSBzcmNQaXhlbHNbc3JjSW5kZXggKyAxXTtcclxuICAgICAgICAgICAgZHN0UGl4ZWxzW2RzdEluZGV4ICsgMl0gPSBzcmNQaXhlbHNbc3JjSW5kZXggKyAyXTtcclxuICAgICAgICAgICAgZHN0UGl4ZWxzW2RzdEluZGV4ICsgM10gPSBzcmNQaXhlbHNbc3JjSW5kZXggKyAzXTtcclxuICAgICAgICAgICAgZHN0SW5kZXggKz0gNDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGRzdEltYWdlRGF0YTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBCaWxpbmVhclxyXG4gKi9cclxuSW1hZ2VGaWx0ZXJzLlJlc2l6ZSA9IGZ1bmN0aW9uIChzcmNJbWFnZURhdGEsIHdpZHRoLCBoZWlnaHQpIHtcclxuICAgIHZhciBzcmNQaXhlbHMgICAgPSBzcmNJbWFnZURhdGEuZGF0YSxcclxuICAgICAgICBzcmNXaWR0aCAgICAgPSBzcmNJbWFnZURhdGEud2lkdGgsXHJcbiAgICAgICAgc3JjSGVpZ2h0ICAgID0gc3JjSW1hZ2VEYXRhLmhlaWdodCxcclxuICAgICAgICBzcmNMZW5ndGggICAgPSBzcmNQaXhlbHMubGVuZ3RoLFxyXG4gICAgICAgIGRzdEltYWdlRGF0YSA9IHRoaXMudXRpbHMuY3JlYXRlSW1hZ2VEYXRhKHdpZHRoLCBoZWlnaHQpLFxyXG4gICAgICAgIGRzdFBpeGVscyAgICA9IGRzdEltYWdlRGF0YS5kYXRhO1xyXG5cclxuICAgIHZhciB4RmFjdG9yID0gc3JjV2lkdGggLyB3aWR0aCxcclxuICAgICAgICB5RmFjdG9yID0gc3JjSGVpZ2h0IC8gaGVpZ2h0LFxyXG4gICAgICAgIGRzdEluZGV4ID0gMCxcclxuICAgICAgICB4LCB5O1xyXG5cclxuICAgIGZvciAoeSA9IDA7IHkgPCBoZWlnaHQ7IHkgKz0gMSkge1xyXG4gICAgICAgIGZvciAoeCA9IDA7IHggPCB3aWR0aDsgeCArPSAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXRpbHMuY29weUJpbGluZWFyKHNyY1BpeGVscywgeCAqIHhGYWN0b3IsIHkgKiB5RmFjdG9yLCBzcmNXaWR0aCwgc3JjSGVpZ2h0LCBkc3RQaXhlbHMsIGRzdEluZGV4LCAwKTtcclxuICAgICAgICAgICAgZHN0SW5kZXggKz0gNDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGRzdEltYWdlRGF0YTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogZmFzdGVyIHJlc2l6aW5nIHVzaW5nIHRoZSBidWlsdGluIGNvbnRleHQuc2NhbGUoKVxyXG4gKiB0aGUgcmVzaXppbmcgYWxnb3JpdGhtIG1heSBiZSBkaWZmZXJlbnQgYmV0d2VlbiBicm93c2Vyc1xyXG4gKiB0aGlzIG1pZ2h0IG5vdCB3b3JrIGlmIHRoZSBpbWFnZSBpcyB0cmFuc3BhcmVudC5cclxuICogdG8gZml4IHRoYXQgd2UgcHJvYmFibHkgbmVlZCB0d28gY29udGV4dHNcclxuICovXHJcbkltYWdlRmlsdGVycy5SZXNpemVCdWlsdGluID0gZnVuY3Rpb24gKHNyY0ltYWdlRGF0YSwgd2lkdGgsIGhlaWdodCkge1xyXG4gICAgdmFyIHNyY1dpZHRoICAgICA9IHNyY0ltYWdlRGF0YS53aWR0aCxcclxuICAgICAgICBzcmNIZWlnaHQgICAgPSBzcmNJbWFnZURhdGEuaGVpZ2h0LFxyXG4gICAgICAgIGNhbnZhcyAgICA9IHRoaXMudXRpbHMuZ2V0U2FtcGxlQ2FudmFzKCksXHJcbiAgICAgICAgY29udGV4dCAgID0gdGhpcy51dGlscy5nZXRTYW1wbGVDb250ZXh0KCksXHJcbiAgICAgICAgZHN0SW1hZ2VEYXRhO1xyXG5cclxuICAgIGNhbnZhcy53aWR0aCAgPSBNYXRoLm1heChzcmNXaWR0aCwgd2lkdGgpO1xyXG4gICAgY2FudmFzLmhlaWdodCA9IE1hdGgubWF4KHNyY0hlaWdodCwgaGVpZ2h0KTtcclxuICAgIGNvbnRleHQuc2F2ZSgpO1xyXG5cclxuICAgIGNvbnRleHQucHV0SW1hZ2VEYXRhKHNyY0ltYWdlRGF0YSwgMCwgMCk7XHJcbiAgICBjb250ZXh0LnNjYWxlKHdpZHRoIC8gc3JjV2lkdGgsIGhlaWdodCAvIHNyY0hlaWdodCk7XHJcbiAgICBjb250ZXh0LmRyYXdJbWFnZShjYW52YXMsIDAsIDApO1xyXG5cclxuICAgIGRzdEltYWdlRGF0YSA9IGNvbnRleHQuZ2V0SW1hZ2VEYXRhKDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xyXG5cclxuICAgIGNvbnRleHQucmVzdG9yZSgpO1xyXG4gICAgY2FudmFzLndpZHRoID0gMDtcclxuICAgIGNhbnZhcy5oZWlnaHQgPSAwO1xyXG5cclxuICAgIHJldHVybiBkc3RJbWFnZURhdGE7XHJcbn07XHJcblxyXG5JbWFnZUZpbHRlcnMuU2VwaWEgPSBmdW5jdGlvbiAoc3JjSW1hZ2VEYXRhKSB7XHJcbiAgICB2YXIgc3JjUGl4ZWxzICAgID0gc3JjSW1hZ2VEYXRhLmRhdGEsXHJcbiAgICAgICAgc3JjV2lkdGggICAgID0gc3JjSW1hZ2VEYXRhLndpZHRoLFxyXG4gICAgICAgIHNyY0hlaWdodCAgICA9IHNyY0ltYWdlRGF0YS5oZWlnaHQsXHJcbiAgICAgICAgc3JjTGVuZ3RoICAgID0gc3JjUGl4ZWxzLmxlbmd0aCxcclxuICAgICAgICBkc3RJbWFnZURhdGEgPSB0aGlzLnV0aWxzLmNyZWF0ZUltYWdlRGF0YShzcmNXaWR0aCwgc3JjSGVpZ2h0KSxcclxuICAgICAgICBkc3RQaXhlbHMgICAgPSBkc3RJbWFnZURhdGEuZGF0YTtcclxuXHJcbiAgICB2YXIgciwgZywgYiwgaSwgdmFsdWU7XHJcblxyXG4gICAgZm9yIChpID0gMDsgaSA8IHNyY0xlbmd0aDsgaSArPSA0KSB7XHJcbiAgICAgICAgciA9IHNyY1BpeGVsc1tpXTtcclxuICAgICAgICBnID0gc3JjUGl4ZWxzW2kgKyAxXTtcclxuICAgICAgICBiID0gc3JjUGl4ZWxzW2kgKyAyXTtcclxuXHJcbiAgICAgICAgZHN0UGl4ZWxzW2ldICAgICA9ICh2YWx1ZSA9IHIgKiAwLjM5MyArIGcgKiAwLjc2OSArIGIgKiAwLjE4OSkgPiAyNTUgPyAyNTUgOiB2YWx1ZSA8IDAgPyAwIDogdmFsdWUgKyAwLjUgfCAwO1xyXG4gICAgICAgIGRzdFBpeGVsc1tpICsgMV0gPSAodmFsdWUgPSByICogMC4zNDkgKyBnICogMC42ODYgKyBiICogMC4xNjgpID4gMjU1ID8gMjU1IDogdmFsdWUgPCAwID8gMCA6IHZhbHVlICsgMC41IHwgMDtcclxuICAgICAgICBkc3RQaXhlbHNbaSArIDJdID0gKHZhbHVlID0gciAqIDAuMjcyICsgZyAqIDAuNTM0ICsgYiAqIDAuMTMxKSA+IDI1NSA/IDI1NSA6IHZhbHVlIDwgMCA/IDAgOiB2YWx1ZSArIDAuNSB8IDA7XHJcbiAgICAgICAgZHN0UGl4ZWxzW2kgKyAzXSA9IHNyY1BpeGVsc1tpICsgM107XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGRzdEltYWdlRGF0YTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gZmFjdG9yIDEgPD0gblxyXG4gKi9cclxuSW1hZ2VGaWx0ZXJzLlNoYXJwZW4gPSBmdW5jdGlvbiAoc3JjSW1hZ2VEYXRhLCBmYWN0b3IpIHtcclxuICAgIC8vQ29udm9sdXRpb24gZm9ybXVsYSBmcm9tIFZJR1JBXHJcbiAgICByZXR1cm4gdGhpcy5Db252b2x1dGlvbkZpbHRlcihzcmNJbWFnZURhdGEsIDMsIDMsIFtcclxuICAgICAgICAtZmFjdG9yLzE2LCAgICAgLWZhY3Rvci84LCAgICAgIC1mYWN0b3IvMTYsXHJcbiAgICAgICAgLWZhY3Rvci84LCAgICAgICBmYWN0b3IqMC43NSsxLCAtZmFjdG9yLzgsXHJcbiAgICAgICAgLWZhY3Rvci8xNiwgICAgIC1mYWN0b3IvOCwgICAgICAtZmFjdG9yLzE2XHJcbiAgICBdKTtcclxufTtcclxuXHJcbkltYWdlRmlsdGVycy5Tb2xhcml6ZSA9IGZ1bmN0aW9uIChzcmNJbWFnZURhdGEpIHtcclxuICAgIHZhciBzcmNQaXhlbHMgICAgPSBzcmNJbWFnZURhdGEuZGF0YSxcclxuICAgICAgICBzcmNXaWR0aCAgICAgPSBzcmNJbWFnZURhdGEud2lkdGgsXHJcbiAgICAgICAgc3JjSGVpZ2h0ICAgID0gc3JjSW1hZ2VEYXRhLmhlaWdodCxcclxuICAgICAgICBzcmNMZW5ndGggICAgPSBzcmNQaXhlbHMubGVuZ3RoLFxyXG4gICAgICAgIGRzdEltYWdlRGF0YSA9IHRoaXMudXRpbHMuY3JlYXRlSW1hZ2VEYXRhKHNyY1dpZHRoLCBzcmNIZWlnaHQpLFxyXG4gICAgICAgIGRzdFBpeGVscyAgICA9IGRzdEltYWdlRGF0YS5kYXRhO1xyXG5cclxuICAgIHRoaXMudXRpbHMubWFwUkdCKHNyY1BpeGVscywgZHN0UGl4ZWxzLCBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWUgPiAxMjcgPyAodmFsdWUgLSAxMjcuNSkgKiAyIDogKDEyNy41IC0gdmFsdWUpICogMjtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBkc3RJbWFnZURhdGE7XHJcbn07XHJcblxyXG5JbWFnZUZpbHRlcnMuVHJhbnNwb3NlID0gZnVuY3Rpb24gKHNyY0ltYWdlRGF0YSkge1xyXG4gICAgdmFyIHNyY1BpeGVscyAgICA9IHNyY0ltYWdlRGF0YS5kYXRhLFxyXG4gICAgICAgIHNyY1dpZHRoICAgICA9IHNyY0ltYWdlRGF0YS53aWR0aCxcclxuICAgICAgICBzcmNIZWlnaHQgICAgPSBzcmNJbWFnZURhdGEuaGVpZ2h0LFxyXG4gICAgICAgIHNyY0xlbmd0aCAgICA9IHNyY1BpeGVscy5sZW5ndGgsXHJcbiAgICAgICAgZHN0SW1hZ2VEYXRhID0gdGhpcy51dGlscy5jcmVhdGVJbWFnZURhdGEoc3JjSGVpZ2h0LCBzcmNXaWR0aCksXHJcbiAgICAgICAgZHN0UGl4ZWxzICAgID0gZHN0SW1hZ2VEYXRhLmRhdGE7XHJcbiAgICBcclxuICAgIHZhciBzcmNJbmRleCwgZHN0SW5kZXg7XHJcbiAgICBcclxuICAgIGZvciAoeSA9IDA7IHkgPCBzcmNIZWlnaHQ7IHkgKz0gMSkge1xyXG4gICAgICAgIGZvciAoeCA9IDA7IHggPCBzcmNXaWR0aDsgeCArPSAxKSB7XHJcbiAgICAgICAgICAgIHNyY0luZGV4ID0gKHkgKiBzcmNXaWR0aCArIHgpIDw8IDI7XHJcbiAgICAgICAgICAgIGRzdEluZGV4ID0gKHggKiBzcmNIZWlnaHQgKyB5KSA8PCAyO1xyXG5cclxuICAgICAgICAgICAgZHN0UGl4ZWxzW2RzdEluZGV4XSAgICAgPSBzcmNQaXhlbHNbc3JjSW5kZXhdO1xyXG4gICAgICAgICAgICBkc3RQaXhlbHNbZHN0SW5kZXggKyAxXSA9IHNyY1BpeGVsc1tzcmNJbmRleCArIDFdO1xyXG4gICAgICAgICAgICBkc3RQaXhlbHNbZHN0SW5kZXggKyAyXSA9IHNyY1BpeGVsc1tzcmNJbmRleCArIDJdO1xyXG4gICAgICAgICAgICBkc3RQaXhlbHNbZHN0SW5kZXggKyAzXSA9IHNyY1BpeGVsc1tzcmNJbmRleCArIDNdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIGRzdEltYWdlRGF0YTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gY2VudGVyWCAwLjAgPD0gbiA8PSAxLjBcclxuICogQHBhcmFtIGNlbnRlclkgMC4wIDw9IG4gPD0gMS4wXHJcbiAqIEBwYXJhbSByYWRpdXNcclxuICogQHBhcmFtIGFuZ2xlKGRlZ3JlZSlcclxuICogQHBhcmFtIHNtb290aFxyXG4gKi9cclxuSW1hZ2VGaWx0ZXJzLlR3cmlsID0gZnVuY3Rpb24gKHNyY0ltYWdlRGF0YSwgY2VudGVyWCwgY2VudGVyWSwgcmFkaXVzLCBhbmdsZSwgZWRnZSwgc21vb3RoKSB7XHJcbiAgICB2YXIgc3JjUGl4ZWxzICAgID0gc3JjSW1hZ2VEYXRhLmRhdGEsXHJcbiAgICAgICAgc3JjV2lkdGggICAgID0gc3JjSW1hZ2VEYXRhLndpZHRoLFxyXG4gICAgICAgIHNyY0hlaWdodCAgICA9IHNyY0ltYWdlRGF0YS5oZWlnaHQsXHJcbiAgICAgICAgc3JjTGVuZ3RoICAgID0gc3JjUGl4ZWxzLmxlbmd0aCxcclxuICAgICAgICBkc3RJbWFnZURhdGEgPSB0aGlzLnV0aWxzLmNyZWF0ZUltYWdlRGF0YShzcmNXaWR0aCwgc3JjSGVpZ2h0KSxcclxuICAgICAgICBkc3RQaXhlbHMgICAgPSBkc3RJbWFnZURhdGEuZGF0YTtcclxuXHJcbiAgICAvL2NvbnZlcnQgcG9zaXRpb24gdG8gcHhcclxuICAgIGNlbnRlclggPSBzcmNXaWR0aCAgKiBjZW50ZXJYO1xyXG4gICAgY2VudGVyWSA9IHNyY0hlaWdodCAqIGNlbnRlclk7XHJcblxyXG4gICAgLy8gZGVncmVlIHRvIHJhZGlhblxyXG4gICAgYW5nbGUgKj0gKE1hdGguUEkgLyAxODApO1xyXG5cclxuICAgIHZhciByYWRpdXMyID0gcmFkaXVzICogcmFkaXVzLFxyXG4gICAgICAgIG1heF95ID0gc3JjSGVpZ2h0IC0gMSxcclxuICAgICAgICBtYXhfeCA9IHNyY1dpZHRoIC0gMSxcclxuICAgICAgICBkc3RJbmRleCA9IDAsXHJcbiAgICAgICAgeCwgeSwgZHgsIGR5LCBkaXN0YW5jZSwgYSwgdHgsIHR5LCBzcmNJbmRleCwgcGl4ZWwsIGk7XHJcblxyXG4gICAgZm9yICh5ID0gMDsgeSA8IHNyY0hlaWdodDsgeSArPSAxKSB7XHJcbiAgICAgICAgZm9yICh4ID0gMDsgeCA8IHNyY1dpZHRoOyB4ICs9IDEpIHtcclxuICAgICAgICAgICAgZHggPSB4IC0gY2VudGVyWDtcclxuICAgICAgICAgICAgZHkgPSB5IC0gY2VudGVyWTtcclxuICAgICAgICAgICAgZGlzdGFuY2UgPSBkeCAqIGR4ICsgZHkgKiBkeTtcclxuXHJcbiAgICAgICAgICAgIGlmIChkaXN0YW5jZSA+IHJhZGl1czIpIHtcclxuICAgICAgICAgICAgICAgIC8vIG91dCBvZiB0aGUgZWZmZWN0ZWQgYXJlYS4ganVzdCBjb3B5IHRoZSBwaXhlbFxyXG4gICAgICAgICAgICAgICAgZHN0UGl4ZWxzW2RzdEluZGV4XSAgICAgPSBzcmNQaXhlbHNbZHN0SW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgZHN0UGl4ZWxzW2RzdEluZGV4ICsgMV0gPSBzcmNQaXhlbHNbZHN0SW5kZXggKyAxXTtcclxuICAgICAgICAgICAgICAgIGRzdFBpeGVsc1tkc3RJbmRleCArIDJdID0gc3JjUGl4ZWxzW2RzdEluZGV4ICsgMl07XHJcbiAgICAgICAgICAgICAgICBkc3RQaXhlbHNbZHN0SW5kZXggKyAzXSA9IHNyY1BpeGVsc1tkc3RJbmRleCArIDNdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gbWFpbiBmb3JtdWxhXHJcbiAgICAgICAgICAgICAgICBkaXN0YW5jZSA9IE1hdGguc3FydChkaXN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICBhICA9IE1hdGguYXRhbjIoZHksIGR4KSArIChhbmdsZSAqIChyYWRpdXMgLSBkaXN0YW5jZSkpIC8gcmFkaXVzO1xyXG4gICAgICAgICAgICAgICAgdHggPSBjZW50ZXJYICsgZGlzdGFuY2UgKiBNYXRoLmNvcyhhKTtcclxuICAgICAgICAgICAgICAgIHR5ID0gY2VudGVyWSArIGRpc3RhbmNlICogTWF0aC5zaW4oYSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gY29weSB0YXJnZXQgcGl4ZWxcclxuICAgICAgICAgICAgICAgIGlmIChzbW9vdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBiaWxpbmVhclxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXRpbHMuY29weUJpbGluZWFyKHNyY1BpeGVscywgdHgsIHR5LCBzcmNXaWR0aCwgc3JjSGVpZ2h0LCBkc3RQaXhlbHMsIGRzdEluZGV4LCBlZGdlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG5lYXJlc3QgbmVpZ2hib3JcclxuICAgICAgICAgICAgICAgICAgICAvLyByb3VuZCB0eCwgdHlcclxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIGVkZ2UgYWN0aW9ucyEhXHJcbiAgICAgICAgICAgICAgICAgICAgc3JjSW5kZXggPSAoKHR5ICsgMC41IHwgMCkgKiBzcmNXaWR0aCArICh0eCArIDAuNSB8IDApKSA8PCAyO1xyXG4gICAgICAgICAgICAgICAgICAgIGRzdFBpeGVsc1tkc3RJbmRleF0gICAgID0gc3JjUGl4ZWxzW3NyY0luZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICBkc3RQaXhlbHNbZHN0SW5kZXggKyAxXSA9IHNyY1BpeGVsc1tzcmNJbmRleCArIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIGRzdFBpeGVsc1tkc3RJbmRleCArIDJdID0gc3JjUGl4ZWxzW3NyY0luZGV4ICsgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgZHN0UGl4ZWxzW2RzdEluZGV4ICsgM10gPSBzcmNQaXhlbHNbc3JjSW5kZXggKyAzXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZHN0SW5kZXggKz0gNDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGRzdEltYWdlRGF0YTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEltYWdlRmlsdGVyc1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9wbHVnaW5zL2ltYWdlZmlsdGVycy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar filterValue = [{\n  name: 'HSLAdjustment',\n  chooseValue: ['h', 's', 'l'],\n  range: [{\n    min: -180,\n    max: 180,\n    first: 0\n  }, {\n    min: -100,\n    max: 100,\n    first: 0\n  }, {\n    min: -100,\n    max: 100,\n    first: 0\n  }]\n}, {\n  name: 'GrayScale',\n  chooseValue: [],\n  range: []\n}, {\n  name: 'Gamma',\n  chooseValue: ['g'],\n  range: [{\n    min: 0,\n    max: 3,\n    first: 1\n  }]\n}, {\n  name: 'BrightnessContrastGimp',\n  chooseValue: ['b', 'c'],\n  range: [{\n    min: -100,\n    max: 100,\n    first: 30\n  }, {\n    min: -100,\n    max: 100,\n    first: 30\n  }]\n}, {\n  name: 'Edge',\n  chooseValue: [],\n  range: []\n}, {\n  name: 'Emboss',\n  chooseValue: [],\n  range: []\n}, {\n  name: 'Invert',\n  chooseValue: [],\n  range: []\n}, {\n  name: 'Oil',\n  chooseValue: ['r', 'l'],\n  range: [{\n    min: 1,\n    max: 5,\n    first: 2\n  }, {\n    min: 1,\n    max: 255,\n    first: 50\n  }]\n}, {\n  name: 'Solarize',\n  chooseValue: [],\n  range: []\n}, {\n  name: 'Twril',\n  chooseValue: ['cx', 'cy', 'r', 'angle', 'edge', 'smooth'],\n  range: [{\n    min: 0.5,\n    max: 0.5,\n    first: 0.5\n  }, {\n    min: 0.5,\n    max: 0.5,\n    first: 0.5\n  }, {\n    min: 10,\n    max: 200,\n    first: 100\n  }, {\n    min: -720,\n    max: 720,\n    first: 100\n  }, {\n    min: 0,\n    max: 0,\n    first: 'Clamp'\n  }, {\n    min: 1,\n    max: 1,\n    first: 1\n  }]\n}];\n\nexports.default = {\n  filterValue: filterValue\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvZmlsdGVyRGF0YS5qcz9iZjJiIl0sIm5hbWVzIjpbImZpbHRlclZhbHVlIiwibmFtZSIsImNob29zZVZhbHVlIiwicmFuZ2UiLCJtaW4iLCJtYXgiLCJmaXJzdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFNQSxjQUFjLENBQ2xCO0FBQ0VDLFFBQU0sZUFEUjtBQUVFQyxlQUFhLENBQUMsR0FBRCxFQUFNLEdBQU4sRUFBVyxHQUFYLENBRmY7QUFHRUMsU0FBTyxDQUFDO0FBQ05DLFNBQUssQ0FBQyxHQURBO0FBRU5DLFNBQUssR0FGQztBQUdOQyxXQUFPO0FBSEQsR0FBRCxFQUlKO0FBQ0RGLFNBQUssQ0FBQyxHQURMO0FBRURDLFNBQUssR0FGSjtBQUdEQyxXQUFPO0FBSE4sR0FKSSxFQVFKO0FBQ0RGLFNBQUssQ0FBQyxHQURMO0FBRURDLFNBQUssR0FGSjtBQUdEQyxXQUFPO0FBSE4sR0FSSTtBQUhULENBRGtCLEVBaUJmO0FBQ0RMLFFBQU0sV0FETDtBQUVEQyxlQUFhLEVBRlo7QUFHREMsU0FBTztBQUhOLENBakJlLEVBcUJmO0FBQ0RGLFFBQU0sT0FETDtBQUVEQyxlQUFhLENBQUMsR0FBRCxDQUZaO0FBR0RDLFNBQU8sQ0FBQztBQUNOQyxTQUFLLENBREM7QUFFTkMsU0FBSyxDQUZDO0FBR05DLFdBQU87QUFIRCxHQUFEO0FBSE4sQ0FyQmUsRUE2QmY7QUFDREwsUUFBTSx3QkFETDtBQUVEQyxlQUFhLENBQUMsR0FBRCxFQUFNLEdBQU4sQ0FGWjtBQUdEQyxTQUFPLENBQUM7QUFDTkMsU0FBSyxDQUFDLEdBREE7QUFFTkMsU0FBSyxHQUZDO0FBR05DLFdBQU87QUFIRCxHQUFELEVBSUo7QUFDREYsU0FBSyxDQUFDLEdBREw7QUFFREMsU0FBSyxHQUZKO0FBR0RDLFdBQU87QUFITixHQUpJO0FBSE4sQ0E3QmUsRUF5Q2Y7QUFDREwsUUFBTSxNQURMO0FBRURDLGVBQWEsRUFGWjtBQUdEQyxTQUFPO0FBSE4sQ0F6Q2UsRUE2Q2Y7QUFDREYsUUFBTSxRQURMO0FBRURDLGVBQWEsRUFGWjtBQUdEQyxTQUFPO0FBSE4sQ0E3Q2UsRUFpRGY7QUFDREYsUUFBTSxRQURMO0FBRURDLGVBQWEsRUFGWjtBQUdEQyxTQUFPO0FBSE4sQ0FqRGUsRUFxRGY7QUFDREYsUUFBTSxLQURMO0FBRURDLGVBQWEsQ0FBQyxHQUFELEVBQU0sR0FBTixDQUZaO0FBR0RDLFNBQU8sQ0FBQztBQUNOQyxTQUFLLENBREM7QUFFTkMsU0FBSyxDQUZDO0FBR05DLFdBQU87QUFIRCxHQUFELEVBSUo7QUFDREYsU0FBSyxDQURKO0FBRURDLFNBQUssR0FGSjtBQUdEQyxXQUFPO0FBSE4sR0FKSTtBQUhOLENBckRlLEVBaUVmO0FBQ0RMLFFBQU0sVUFETDtBQUVEQyxlQUFhLEVBRlo7QUFHREMsU0FBTztBQUhOLENBakVlLEVBcUVmO0FBQ0RGLFFBQU0sT0FETDtBQUVEQyxlQUFhLENBQUMsSUFBRCxFQUFPLElBQVAsRUFBYSxHQUFiLEVBQWtCLE9BQWxCLEVBQTJCLE1BQTNCLEVBQW1DLFFBQW5DLENBRlo7QUFHREMsU0FBTyxDQUFDO0FBQ05DLFNBQUssR0FEQztBQUVOQyxTQUFLLEdBRkM7QUFHTkMsV0FBTztBQUhELEdBQUQsRUFJSjtBQUNERixTQUFLLEdBREo7QUFFREMsU0FBSyxHQUZKO0FBR0RDLFdBQU87QUFITixHQUpJLEVBUUo7QUFDREYsU0FBSyxFQURKO0FBRURDLFNBQUssR0FGSjtBQUdEQyxXQUFPO0FBSE4sR0FSSSxFQVlKO0FBQ0RGLFNBQUssQ0FBQyxHQURMO0FBRURDLFNBQUssR0FGSjtBQUdEQyxXQUFPO0FBSE4sR0FaSSxFQWdCSjtBQUNERixTQUFLLENBREo7QUFFREMsU0FBSyxDQUZKO0FBR0RDLFdBQU87QUFITixHQWhCSSxFQW9CSjtBQUNERixTQUFLLENBREo7QUFFREMsU0FBSyxDQUZKO0FBR0RDLFdBQU87QUFITixHQXBCSTtBQUhOLENBckVlLENBQXBCOztrQkFvR2U7QUFDYk4sZUFBYUE7QUFEQSxDIiwiZmlsZSI6IjEyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZmlsdGVyVmFsdWUgPSBbXHJcbiAge1xyXG4gICAgbmFtZTogJ0hTTEFkanVzdG1lbnQnLFxyXG4gICAgY2hvb3NlVmFsdWU6IFsnaCcsICdzJywgJ2wnXSxcclxuICAgIHJhbmdlOiBbe1xyXG4gICAgICBtaW46IC0xODAsXHJcbiAgICAgIG1heDogMTgwLFxyXG4gICAgICBmaXJzdDogMFxyXG4gICAgfSwge1xyXG4gICAgICBtaW46IC0xMDAsXHJcbiAgICAgIG1heDogMTAwLFxyXG4gICAgICBmaXJzdDogMFxyXG4gICAgfSwge1xyXG4gICAgICBtaW46IC0xMDAsXHJcbiAgICAgIG1heDogMTAwLFxyXG4gICAgICBmaXJzdDogMFxyXG4gICAgfV1cclxuICB9LCB7XHJcbiAgICBuYW1lOiAnR3JheVNjYWxlJyxcclxuICAgIGNob29zZVZhbHVlOiBbXSxcclxuICAgIHJhbmdlOiBbXVxyXG4gIH0sIHtcclxuICAgIG5hbWU6ICdHYW1tYScsXHJcbiAgICBjaG9vc2VWYWx1ZTogWydnJ10sXHJcbiAgICByYW5nZTogW3tcclxuICAgICAgbWluOiAwLFxyXG4gICAgICBtYXg6IDMsXHJcbiAgICAgIGZpcnN0OiAxXHJcbiAgICB9XVxyXG4gIH0sIHtcclxuICAgIG5hbWU6ICdCcmlnaHRuZXNzQ29udHJhc3RHaW1wJyxcclxuICAgIGNob29zZVZhbHVlOiBbJ2InLCAnYyddLFxyXG4gICAgcmFuZ2U6IFt7XHJcbiAgICAgIG1pbjogLTEwMCxcclxuICAgICAgbWF4OiAxMDAsXHJcbiAgICAgIGZpcnN0OiAzMFxyXG4gICAgfSwge1xyXG4gICAgICBtaW46IC0xMDAsXHJcbiAgICAgIG1heDogMTAwLFxyXG4gICAgICBmaXJzdDogMzBcclxuICAgIH1dXHJcbiAgfSwge1xyXG4gICAgbmFtZTogJ0VkZ2UnLFxyXG4gICAgY2hvb3NlVmFsdWU6IFtdLFxyXG4gICAgcmFuZ2U6IFtdXHJcbiAgfSwge1xyXG4gICAgbmFtZTogJ0VtYm9zcycsXHJcbiAgICBjaG9vc2VWYWx1ZTogW10sXHJcbiAgICByYW5nZTogW11cclxuICB9LCB7XHJcbiAgICBuYW1lOiAnSW52ZXJ0JyxcclxuICAgIGNob29zZVZhbHVlOiBbXSxcclxuICAgIHJhbmdlOiBbXVxyXG4gIH0sIHtcclxuICAgIG5hbWU6ICdPaWwnLFxyXG4gICAgY2hvb3NlVmFsdWU6IFsncicsICdsJ10sXHJcbiAgICByYW5nZTogW3tcclxuICAgICAgbWluOiAxLFxyXG4gICAgICBtYXg6IDUsXHJcbiAgICAgIGZpcnN0OiAyXHJcbiAgICB9LCB7XHJcbiAgICAgIG1pbjogMSxcclxuICAgICAgbWF4OiAyNTUsXHJcbiAgICAgIGZpcnN0OiA1MFxyXG4gICAgfV1cclxuICB9LCB7XHJcbiAgICBuYW1lOiAnU29sYXJpemUnLFxyXG4gICAgY2hvb3NlVmFsdWU6IFtdLFxyXG4gICAgcmFuZ2U6IFtdXHJcbiAgfSwge1xyXG4gICAgbmFtZTogJ1R3cmlsJyxcclxuICAgIGNob29zZVZhbHVlOiBbJ2N4JywgJ2N5JywgJ3InLCAnYW5nbGUnLCAnZWRnZScsICdzbW9vdGgnXSxcclxuICAgIHJhbmdlOiBbe1xyXG4gICAgICBtaW46IDAuNSxcclxuICAgICAgbWF4OiAwLjUsXHJcbiAgICAgIGZpcnN0OiAwLjVcclxuICAgIH0sIHtcclxuICAgICAgbWluOiAwLjUsXHJcbiAgICAgIG1heDogMC41LFxyXG4gICAgICBmaXJzdDogMC41XHJcbiAgICB9LCB7XHJcbiAgICAgIG1pbjogMTAsXHJcbiAgICAgIG1heDogMjAwLFxyXG4gICAgICBmaXJzdDogMTAwXHJcbiAgICB9LCB7XHJcbiAgICAgIG1pbjogLTcyMCxcclxuICAgICAgbWF4OiA3MjAsXHJcbiAgICAgIGZpcnN0OiAxMDBcclxuICAgIH0sIHtcclxuICAgICAgbWluOiAwLFxyXG4gICAgICBtYXg6IDAsXHJcbiAgICAgIGZpcnN0OiAnQ2xhbXAnXHJcbiAgICB9LCB7XHJcbiAgICAgIG1pbjogMSxcclxuICAgICAgbWF4OiAxLFxyXG4gICAgICBmaXJzdDogMVxyXG4gICAgfV1cclxuICB9XHJcbl1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBmaWx0ZXJWYWx1ZTogZmlsdGVyVmFsdWVcclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvdXRpbHMvZmlsdGVyRGF0YS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _draw = __webpack_require__(1);\n\nvar _draw2 = _interopRequireDefault(_draw);\n\nvar _filter = __webpack_require__(2);\n\nvar _filter2 = _interopRequireDefault(_filter);\n\nvar _opts = __webpack_require__(0);\n\nvar _opts2 = _interopRequireDefault(_opts);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ctx = _opts2.default.ctx;\n\n// 改变图片展示方式\nfunction selectPicSize(value) {\n  var set_x = void 0,\n      set_y = void 0,\n      set_w = void 0,\n      set_h = void 0,\n      w = _opts2.default.imgData.w,\n      h = _opts2.default.imgData.h;\n  var cw = _opts2.default.canvasW,\n      ch = _opts2.default.canvasH;\n\n  function check_type(type) {\n    if (type) {\n      if (cw / ch > w / h) {\n        // 宽大于高，高100%\n        w = w * ch / h;\n        h = ch;\n      } else {\n        h = h * cw / w;\n        w = cw;\n      }\n    } else {\n      if (cw / ch <= w / h) {\n        // 宽大于高，高100%\n        w = w * ch / h;\n        h = ch;\n      } else {\n        h = h * cw / w;\n        w = cw;\n      }\n    }\n  }\n  // 改变图片展示方式\n  switch (value) {\n    case '1':\n      // 居中\n      check_type(true);\n      set_x = (cw - w) / 2;\n      set_y = (ch - h) / 2;\n      set_w = w;\n      set_h = h;\n      break;\n    case '2':\n      // 填充\n      check_type(false);\n      set_x = (cw - w) / 2;\n      set_y = (ch - h) / 2;\n      set_w = w;\n      set_h = h;\n      break;\n    case '3':\n      // 适应\n      check_type(true);\n      set_x = 0;\n      set_y = 0;\n      set_w = w;\n      set_h = h;\n      break;\n    case '4':\n      // 拉伸\n      set_x = 0;\n      set_y = 0;\n      set_w = cw;\n      set_h = ch;\n      break;\n    default:\n      // 居中\n      check_type(true);\n      set_x = (cw - w) / 2;\n      set_y = (ch - h) / 2;\n      set_w = w;\n      set_h = h;\n      break;\n  }\n  return {\n    set_x: set_x,\n    set_y: set_y,\n    set_w: set_w,\n    set_h: set_h\n  };\n}\n// 选择图片的显示方式\ndocument.getElementById('selectPicSize').addEventListener('change', function () {\n  // 获取上传的图片\n  var img = _opts2.default.data.img;\n  // 获取修正后的宽高,xy\n  var output = selectPicSize(this.value);\n  var set_x = output.set_x,\n      set_y = output.set_y,\n      set_w = output.set_w,\n      set_h = output.set_h;\n  // 重绘\n  ctx.clearRect(0, 0, _opts2.default.canvasW, _opts2.default.canvasH);\n  ctx.drawImage(img, set_x, set_y, set_w, set_h);\n  _opts2.default.data.imageData = ctx.getImageData(set_x, set_y, set_w, set_h);\n  _opts2.default.data.imgPos = {\n    x: set_x,\n    y: set_y,\n    w: set_w,\n    h: set_h\n  };\n  img = null;\n  (0, _filter2.default)();\n  (0, _draw2.default)();\n}, false);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvaW5kZXgvc2VsZWN0SW1nU2l6ZS5qcz80ZGNjIl0sIm5hbWVzIjpbImN0eCIsInNlbGVjdFBpY1NpemUiLCJ2YWx1ZSIsInNldF94Iiwic2V0X3kiLCJzZXRfdyIsInNldF9oIiwidyIsImltZ0RhdGEiLCJoIiwiY3ciLCJjYW52YXNXIiwiY2giLCJjYW52YXNIIiwiY2hlY2tfdHlwZSIsInR5cGUiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiYWRkRXZlbnRMaXN0ZW5lciIsImltZyIsImRhdGEiLCJvdXRwdXQiLCJjbGVhclJlY3QiLCJkcmF3SW1hZ2UiLCJpbWFnZURhdGEiLCJnZXRJbWFnZURhdGEiLCJpbWdQb3MiLCJ4IiwieSJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBLElBQU1BLE1BQU0sZUFBS0EsR0FBakI7O0FBRUE7QUFDQSxTQUFTQyxhQUFULENBQXVCQyxLQUF2QixFQUE4QjtBQUM1QixNQUFJQyxjQUFKO0FBQUEsTUFDRUMsY0FERjtBQUFBLE1BRUVDLGNBRkY7QUFBQSxNQUdFQyxjQUhGO0FBQUEsTUFJRUMsSUFBSSxlQUFLQyxPQUFMLENBQWFELENBSm5CO0FBQUEsTUFLRUUsSUFBSSxlQUFLRCxPQUFMLENBQWFDLENBTG5CO0FBTUEsTUFBTUMsS0FBSyxlQUFLQyxPQUFoQjtBQUFBLE1BQ0VDLEtBQUssZUFBS0MsT0FEWjs7QUFHQSxXQUFTQyxVQUFULENBQW9CQyxJQUFwQixFQUEwQjtBQUN4QixRQUFJQSxJQUFKLEVBQVU7QUFDUixVQUFJTCxLQUFLRSxFQUFMLEdBQVVMLElBQUlFLENBQWxCLEVBQXFCO0FBQ25CO0FBQ0FGLFlBQUlBLElBQUlLLEVBQUosR0FBU0gsQ0FBYjtBQUNBQSxZQUFJRyxFQUFKO0FBQ0QsT0FKRCxNQUlPO0FBQ0xILFlBQUlBLElBQUlDLEVBQUosR0FBU0gsQ0FBYjtBQUNBQSxZQUFJRyxFQUFKO0FBQ0Q7QUFDRixLQVRELE1BU087QUFDTCxVQUFJQSxLQUFLRSxFQUFMLElBQVdMLElBQUlFLENBQW5CLEVBQXNCO0FBQ3BCO0FBQ0FGLFlBQUlBLElBQUlLLEVBQUosR0FBU0gsQ0FBYjtBQUNBQSxZQUFJRyxFQUFKO0FBQ0QsT0FKRCxNQUlPO0FBQ0xILFlBQUlBLElBQUlDLEVBQUosR0FBU0gsQ0FBYjtBQUNBQSxZQUFJRyxFQUFKO0FBQ0Q7QUFDRjtBQUNGO0FBQ0Q7QUFDQSxVQUFRUixLQUFSO0FBQ0EsU0FBSyxHQUFMO0FBQ0U7QUFDQVksaUJBQVcsSUFBWDtBQUNBWCxjQUFRLENBQUNPLEtBQUtILENBQU4sSUFBVyxDQUFuQjtBQUNBSCxjQUFRLENBQUNRLEtBQUtILENBQU4sSUFBVyxDQUFuQjtBQUNBSixjQUFRRSxDQUFSO0FBQ0FELGNBQVFHLENBQVI7QUFDQTtBQUNGLFNBQUssR0FBTDtBQUNFO0FBQ0FLLGlCQUFXLEtBQVg7QUFDQVgsY0FBUSxDQUFDTyxLQUFLSCxDQUFOLElBQVcsQ0FBbkI7QUFDQUgsY0FBUSxDQUFDUSxLQUFLSCxDQUFOLElBQVcsQ0FBbkI7QUFDQUosY0FBUUUsQ0FBUjtBQUNBRCxjQUFRRyxDQUFSO0FBQ0E7QUFDRixTQUFLLEdBQUw7QUFDRTtBQUNBSyxpQkFBVyxJQUFYO0FBQ0FYLGNBQVEsQ0FBUjtBQUNBQyxjQUFRLENBQVI7QUFDQUMsY0FBUUUsQ0FBUjtBQUNBRCxjQUFRRyxDQUFSO0FBQ0E7QUFDRixTQUFLLEdBQUw7QUFDRTtBQUNBTixjQUFRLENBQVI7QUFDQUMsY0FBUSxDQUFSO0FBQ0FDLGNBQVFLLEVBQVI7QUFDQUosY0FBUU0sRUFBUjtBQUNBO0FBQ0Y7QUFDRTtBQUNBRSxpQkFBVyxJQUFYO0FBQ0FYLGNBQVEsQ0FBQ08sS0FBS0gsQ0FBTixJQUFXLENBQW5CO0FBQ0FILGNBQVEsQ0FBQ1EsS0FBS0gsQ0FBTixJQUFXLENBQW5CO0FBQ0FKLGNBQVFFLENBQVI7QUFDQUQsY0FBUUcsQ0FBUjtBQUNBO0FBdkNGO0FBeUNBLFNBQU87QUFDTE4sV0FBT0EsS0FERjtBQUVMQyxXQUFPQSxLQUZGO0FBR0xDLFdBQU9BLEtBSEY7QUFJTEMsV0FBT0E7QUFKRixHQUFQO0FBTUQ7QUFDRDtBQUNBVSxTQUFTQyxjQUFULENBQXdCLGVBQXhCLEVBQXlDQyxnQkFBekMsQ0FBMEQsUUFBMUQsRUFBb0UsWUFBVztBQUM3RTtBQUNBLE1BQUlDLE1BQU0sZUFBS0MsSUFBTCxDQUFVRCxHQUFwQjtBQUNBO0FBQ0EsTUFBTUUsU0FBU3BCLGNBQWMsS0FBS0MsS0FBbkIsQ0FBZjtBQUNBLE1BQU1DLFFBQVFrQixPQUFPbEIsS0FBckI7QUFBQSxNQUNFQyxRQUFRaUIsT0FBT2pCLEtBRGpCO0FBQUEsTUFFRUMsUUFBUWdCLE9BQU9oQixLQUZqQjtBQUFBLE1BR0VDLFFBQVFlLE9BQU9mLEtBSGpCO0FBSUE7QUFDQU4sTUFBSXNCLFNBQUosQ0FBYyxDQUFkLEVBQWlCLENBQWpCLEVBQW9CLGVBQUtYLE9BQXpCLEVBQWtDLGVBQUtFLE9BQXZDO0FBQ0FiLE1BQUl1QixTQUFKLENBQWNKLEdBQWQsRUFBbUJoQixLQUFuQixFQUEwQkMsS0FBMUIsRUFBaUNDLEtBQWpDLEVBQXdDQyxLQUF4QztBQUNBLGlCQUFLYyxJQUFMLENBQVVJLFNBQVYsR0FBc0J4QixJQUFJeUIsWUFBSixDQUFpQnRCLEtBQWpCLEVBQXdCQyxLQUF4QixFQUErQkMsS0FBL0IsRUFBc0NDLEtBQXRDLENBQXRCO0FBQ0EsaUJBQUtjLElBQUwsQ0FBVU0sTUFBVixHQUFtQjtBQUNqQkMsT0FBR3hCLEtBRGM7QUFFakJ5QixPQUFHeEIsS0FGYztBQUdqQkcsT0FBR0YsS0FIYztBQUlqQkksT0FBR0g7QUFKYyxHQUFuQjtBQU1BYSxRQUFNLElBQU47QUFDQTtBQUNBO0FBQ0QsQ0F0QkQsRUFzQkcsS0F0QkgiLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdXBkYXRlRHJhd1N0cm9rZXMgZnJvbSAnLi9kcmF3J1xyXG5pbXBvcnQgc2V0RmlsdGVyIGZyb20gJy4vZmlsdGVyJ1xyXG5pbXBvcnQgb3B0cyBmcm9tICcuL29wdHMnXHJcblxyXG5jb25zdCBjdHggPSBvcHRzLmN0eFxyXG5cclxuLy8g5pS55Y+Y5Zu+54mH5bGV56S65pa55byPXHJcbmZ1bmN0aW9uIHNlbGVjdFBpY1NpemUodmFsdWUpIHtcclxuICBsZXQgc2V0X3gsXHJcbiAgICBzZXRfeSxcclxuICAgIHNldF93LFxyXG4gICAgc2V0X2gsXHJcbiAgICB3ID0gb3B0cy5pbWdEYXRhLncsXHJcbiAgICBoID0gb3B0cy5pbWdEYXRhLmhcclxuICBjb25zdCBjdyA9IG9wdHMuY2FudmFzVyxcclxuICAgIGNoID0gb3B0cy5jYW52YXNIXHJcblxyXG4gIGZ1bmN0aW9uIGNoZWNrX3R5cGUodHlwZSkge1xyXG4gICAgaWYgKHR5cGUpIHtcclxuICAgICAgaWYgKGN3IC8gY2ggPiB3IC8gaCkge1xyXG4gICAgICAgIC8vIOWuveWkp+S6jumrmO+8jOmrmDEwMCVcclxuICAgICAgICB3ID0gdyAqIGNoIC8gaFxyXG4gICAgICAgIGggPSBjaFxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGggPSBoICogY3cgLyB3XHJcbiAgICAgICAgdyA9IGN3XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChjdyAvIGNoIDw9IHcgLyBoKSB7XHJcbiAgICAgICAgLy8g5a695aSn5LqO6auY77yM6auYMTAwJVxyXG4gICAgICAgIHcgPSB3ICogY2ggLyBoXHJcbiAgICAgICAgaCA9IGNoXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaCA9IGggKiBjdyAvIHdcclxuICAgICAgICB3ID0gY3dcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICAvLyDmlLnlj5jlm77niYflsZXnpLrmlrnlvI9cclxuICBzd2l0Y2ggKHZhbHVlKSB7XHJcbiAgY2FzZSAnMSc6XHJcbiAgICAvLyDlsYXkuK1cclxuICAgIGNoZWNrX3R5cGUodHJ1ZSlcclxuICAgIHNldF94ID0gKGN3IC0gdykgLyAyXHJcbiAgICBzZXRfeSA9IChjaCAtIGgpIC8gMlxyXG4gICAgc2V0X3cgPSB3XHJcbiAgICBzZXRfaCA9IGhcclxuICAgIGJyZWFrXHJcbiAgY2FzZSAnMic6XHJcbiAgICAvLyDloavlhYVcclxuICAgIGNoZWNrX3R5cGUoZmFsc2UpXHJcbiAgICBzZXRfeCA9IChjdyAtIHcpIC8gMlxyXG4gICAgc2V0X3kgPSAoY2ggLSBoKSAvIDJcclxuICAgIHNldF93ID0gd1xyXG4gICAgc2V0X2ggPSBoXHJcbiAgICBicmVha1xyXG4gIGNhc2UgJzMnOlxyXG4gICAgLy8g6YCC5bqUXHJcbiAgICBjaGVja190eXBlKHRydWUpXHJcbiAgICBzZXRfeCA9IDBcclxuICAgIHNldF95ID0gMFxyXG4gICAgc2V0X3cgPSB3XHJcbiAgICBzZXRfaCA9IGhcclxuICAgIGJyZWFrXHJcbiAgY2FzZSAnNCc6XHJcbiAgICAvLyDmi4nkvLhcclxuICAgIHNldF94ID0gMFxyXG4gICAgc2V0X3kgPSAwXHJcbiAgICBzZXRfdyA9IGN3XHJcbiAgICBzZXRfaCA9IGNoXHJcbiAgICBicmVha1xyXG4gIGRlZmF1bHQ6XHJcbiAgICAvLyDlsYXkuK1cclxuICAgIGNoZWNrX3R5cGUodHJ1ZSlcclxuICAgIHNldF94ID0gKGN3IC0gdykgLyAyXHJcbiAgICBzZXRfeSA9IChjaCAtIGgpIC8gMlxyXG4gICAgc2V0X3cgPSB3XHJcbiAgICBzZXRfaCA9IGhcclxuICAgIGJyZWFrXHJcbiAgfVxyXG4gIHJldHVybiB7XHJcbiAgICBzZXRfeDogc2V0X3gsXHJcbiAgICBzZXRfeTogc2V0X3ksXHJcbiAgICBzZXRfdzogc2V0X3csXHJcbiAgICBzZXRfaDogc2V0X2hcclxuICB9XHJcbn1cclxuLy8g6YCJ5oup5Zu+54mH55qE5pi+56S65pa55byPXHJcbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZWxlY3RQaWNTaXplJykuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24oKSB7XHJcbiAgLy8g6I635Y+W5LiK5Lyg55qE5Zu+54mHXHJcbiAgbGV0IGltZyA9IG9wdHMuZGF0YS5pbWdcclxuICAvLyDojrflj5bkv67mraPlkI7nmoTlrr3pq5gseHlcclxuICBjb25zdCBvdXRwdXQgPSBzZWxlY3RQaWNTaXplKHRoaXMudmFsdWUpXHJcbiAgY29uc3Qgc2V0X3ggPSBvdXRwdXQuc2V0X3gsXHJcbiAgICBzZXRfeSA9IG91dHB1dC5zZXRfeSxcclxuICAgIHNldF93ID0gb3V0cHV0LnNldF93LFxyXG4gICAgc2V0X2ggPSBvdXRwdXQuc2V0X2hcclxuICAvLyDph43nu5hcclxuICBjdHguY2xlYXJSZWN0KDAsIDAsIG9wdHMuY2FudmFzVywgb3B0cy5jYW52YXNIKVxyXG4gIGN0eC5kcmF3SW1hZ2UoaW1nLCBzZXRfeCwgc2V0X3ksIHNldF93LCBzZXRfaClcclxuICBvcHRzLmRhdGEuaW1hZ2VEYXRhID0gY3R4LmdldEltYWdlRGF0YShzZXRfeCwgc2V0X3ksIHNldF93LCBzZXRfaClcclxuICBvcHRzLmRhdGEuaW1nUG9zID0ge1xyXG4gICAgeDogc2V0X3gsXHJcbiAgICB5OiBzZXRfeSxcclxuICAgIHc6IHNldF93LFxyXG4gICAgaDogc2V0X2hcclxuICB9XHJcbiAgaW1nID0gbnVsbFxyXG4gIHNldEZpbHRlcigpXHJcbiAgdXBkYXRlRHJhd1N0cm9rZXMoKVxyXG59LCBmYWxzZSlcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL2luZGV4L3NlbGVjdEltZ1NpemUuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///13\n");

/***/ })
],[5]);